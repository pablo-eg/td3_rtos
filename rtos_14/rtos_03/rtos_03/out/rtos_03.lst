
examples/c/td3/tp_rtos/rtos_03/out/rtos_03.elf:     file format elf32-littlearm
examples/c/td3/tp_rtos/rtos_03/out/rtos_03.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000391

Program Header:
0x70000001 off    0x00015000 vaddr 0x1a005000 paddr 0x1a005000 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002b70 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005008 memsz 0x00005008 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005008 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ffc  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a005008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002b70  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004ffc  1a004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005000  1a005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002c14  10002c14  000200a4  2**2
                  CONTENTS
 19 .debug_info   000328c3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000075a0  00000000  00000000  00052967  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000dec6  00000000  00000000  00059f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001120  00000000  00000000  00067dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001310  00000000  00000000  00068ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000e72f  00000000  00000000  0006a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00011abd  00000000  00000000  0007892f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000302c0  00000000  00000000  0008a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000031  00000000  00000000  000ba6ac  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000ba6dd  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002ae0  00000000  00000000  000ba714  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004ffc l    d  .init_array	00000000 .init_array
1a005000 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c14 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system.c
100000a8 l     O .bss	00000004 heap_end.5622
00000000 l    df *ABS*	00000000 heap_4.c
1a0004e4 l     F .text	00000064 prvHeapInit
1a000548 l     F .text	00000058 prvInsertBlockIntoFreeList
100000ac l     O .bss	00000004 pxEnd
100000b0 l     O .bss	00002000 ucHeap
100020b0 l     O .bss	00000004 xBlockAllocatedBit
100020b4 l     O .bss	00000004 xFreeBytesRemaining
100020b8 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020bc l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000720 l     F .text	0000001e prvIsQueueFull
1a00073e l     F .text	0000001a prvIsQueueEmpty
1a000758 l     F .text	00000076 prvCopyDataToQueue
1a0007ce l     F .text	00000024 prvCopyDataFromQueue
1a0007f2 l     F .text	0000006e prvUnlockQueue
1a0008e0 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c4 l     O .bss	00000190 uxIdleTaskStack.10588
10002254 l     O .bss	00000640 uxTimerTaskStack.10595
10002894 l     O .bss	00000060 xIdleTaskTCB.10587
100028f4 l     O .bss	00000060 xTimerTaskTCB.10594
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000f08 l     F .text	00000034 prvResetNextTaskUnblockTime
1a000f3c l     F .text	00000092 prvInitialiseNewTask
1a000fd0 l     F .text	00000068 prvInitialiseTaskLists
1a001038 l     F .text	000000ac prvAddNewTaskToReadyList
1a0010e4 l     F .text	0000003a prvDeleteTCB
1a001120 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00116c l     F .text	00000028 prvIdleTask
1a001194 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002958 l     O .bss	00000004 pxDelayedTaskList
1000295c l     O .bss	00000004 pxOverflowDelayedTaskList
10002960 l     O .bss	0000008c pxReadyTasksLists
100029ec l     O .bss	00000004 uxCurrentNumberOfTasks
100029f0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029f4 l     O .bss	00000004 uxPendedTicks
100029f8 l     O .bss	00000004 uxSchedulerSuspended
100029fc l     O .bss	00000004 uxTaskNumber
10002a00 l     O .bss	00000004 uxTopReadyPriority
10002a04 l     O .bss	00000014 xDelayedTaskList1
10002a18 l     O .bss	00000014 xDelayedTaskList2
10002a2c l     O .bss	00000004 xNextTaskUnblockTime
10002a30 l     O .bss	00000004 xNumOfOverflows
10002a34 l     O .bss	00000014 xPendingReadyList
10002a48 l     O .bss	00000004 xSchedulerRunning
10002a4c l     O .bss	00000014 xSuspendedTaskList
10002a60 l     O .bss	00000014 xTasksWaitingTermination
10002a74 l     O .bss	00000004 xTickCount
10002a78 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001a1c l     F .text	00000020 prvGetNextExpireTime
1a001a3c l     F .text	00000048 prvInsertTimerInActiveList
1a001a84 l     F .text	00000070 prvCheckForValidListAndQueue
1a001e44 l     F .text	00000016 prvTimerTask
1a001bd0 l     F .text	00000078 prvSwitchTimerLists
1a001c48 l     F .text	0000002c prvSampleTimeNow
1a001c74 l     F .text	00000060 prvProcessExpiredTimer
1a001cd4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001d48 l     F .text	000000fc prvProcessReceivedCommands
10002a7c l     O .bss	00000004 pxCurrentTimerList
10002a80 l     O .bss	00000004 pxOverflowTimerList
10002a84 l     O .bss	000000a0 ucStaticTimerQueueStorage.11667
10002b24 l     O .bss	00000014 xActiveTimerList1
10002b38 l     O .bss	00000014 xActiveTimerList2
10002b4c l     O .bss	00000004 xLastTime.11616
10002b50 l     O .bss	00000050 xStaticTimerQueue.11666
10002ba0 l     O .bss	00000004 xTimerQueue
10002ba4 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001e5c l     F .text	00000040 prvTaskExitError
1a001e9c l     F .text	00000022 prvPortStartFirstTask
1a001ec4 l     F .text	0000000e vPortEnableVFP
1a001f30 l       .text	00000000 pxCurrentTCBConst2
1a002030 l       .text	00000000 pxCurrentTCBConst
10002ba8 l     O .bss	00000001 ucMaxSysCallPriority
10002bac l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 conio.c
10002bb0 l     O .bss	00000004 keyIdx
1a004cf0 l     O .text	00000004 keys
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 supporting_functions.c
00000000 l    df *ABS*	00000000 board.c
1a002298 l     F .text	00000044 Board_LED_Init
1a0022dc l     F .text	00000040 Board_TEC_Init
1a00231c l     F .text	00000040 Board_GPIO_Init
1a00235c l     F .text	00000030 Board_ADC_Init
1a00238c l     F .text	00000038 Board_SPI_Init
1a0023c4 l     F .text	00000024 Board_I2C_Init
1a004cfc l     O .text	00000008 GpioButtons
1a004d04 l     O .text	0000000c GpioLeds
1a004d10 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004d28 l     O .text	00000004 InitClkStates
1a004d2c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0025a0 l     F .text	0000002c Chip_UART_GetIndex
1a004da0 l     O .text	00000008 UART_BClock
1a004da8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002708 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00271c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0027e4 l     F .text	000000a0 pll_calc_divs
1a002884 l     F .text	0000010c pll_get_frac
1a002990 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002c04 l     F .text	00000022 Chip_Clock_GetDivRate
10002bb8 l     O .bss	00000008 audio_usb_pll_freq
1a004dbc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004e28 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002f44 l     F .text	00000014 Chip_SSP_GetClockIndex
1a002f58 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003038 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002bc0 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0035b0 l     F .text	00000004 __fp_unlock
1a0035c0 l     F .text	00000004 __fp_lock
1a00367c l     F .text	00000110 __sinit.part.1
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003bec l     F .text	00000032 __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005000 l       .init_array	00000000 __init_array_end
1a004ffc l       .bss_RAM5	00000000 __preinit_array_end
1a004ffc l       .init_array	00000000 __init_array_start
1a004ffc l       .bss_RAM5	00000000 __preinit_array_start
1a004bd8 g     F .text	00000012 _malloc_usable_size_r
1a002a28 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000430 g     F .text	00000012 _isatty_r
1a004318 g     F .text	000000e0 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000442 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001f9c g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0042e4 g     F .text	00000034 printf
1a0024e6 g     F .text	00000008 __stdio_init
1a00446c g     F .text	00000020 __sseek
1a0037a0 g     F .text	00000008 __sinit
10000004 g     O .data	00000004 xKeyPressesStopApplication
1a004494 g     F .text	000000b4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000d90 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0035c4 g     F .text	0000002e __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0027c2 g     F .text	0000000c Chip_ADC_SetResolution
1a002034 g     F .text	0000002c SysTick_Handler
100000a4 g     O .bss	00000004 xTask2Handle
1a00038c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002420 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a004ac0 g     F .text	000000c6 memmove
1a00378c g     F .text	00000014 _cleanup
1a001fd0 g     F .text	00000064 PendSV_Handler
1a000b2c g     F .text	000000de xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005008 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002954 g     O .bss	00000004 pxCurrentTCB
1a000426 g     F .text	0000000a _fstat_r
53ff74fe g       *ABS*	00000000 __valid_user_code_checksum
1a00442c g     F .text	00000004 __seofread
1a005008 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001304 g     F .text	000000e8 vTaskPrioritySet
1a0018a4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002ca6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002098 g     F .text	00000110 xPortStartScheduler
1a001488 g     F .text	00000024 vTaskEndScheduler
1a0038d0 g     F .text	00000134 memcpy
1a0017b0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0035b4 g     F .text	0000000c _cleanup_r
1a002060  w    F .text	00000038 vPortSetupTimerInterrupt
1a0030f0 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c14 g       .noinit	00000000 _noinit
1a0043f8 g     F .text	00000010 puts
1a0006b0 g     F .text	00000070 vPortFree
10002c0c g     O .bss	00000004 SystemCoreClock
1a0025cc g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0021a8 g     F .text	0000005c vPortValidateInterruptPriority
1a0042b8 g     F .text	0000002c _printf_r
1a000180  w    F .text	00000002 UsageFault_Handler
1a002d24 g     F .text	0000004c Chip_Clock_GetRate
1a000dfe g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002528 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00464c g     F .text	000002f0 __sfvwrite_r
1a000300 g     F .text	00000024 vTask1
1a003120 g     F .text	000002dc .hidden __udivmoddi4
1a0004c4 g     F .text	00000020 _sbrk_r
1a004cf8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00044c g     F .text	00000050 _read_r
1a000df8 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000c0c g     F .text	0000015c xQueueReceive
10002bcc g     O .bss	00000040 xQueueRegistry
1a00358c g     F .text	00000024 fflush
1a000e8c g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005000 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004fb8 g     O .text	00000004 _global_impure_ptr
1a004b88 g     F .text	00000050 _realloc_r
1a003880 g     F .text	00000050 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0005a0 g     F .text	00000110 pvPortMalloc
1a0037b8 g     F .text	00000014 __fp_lock_all
1a0024a4 g     F .text	00000030 Board_Init
1a00041a  w    F .text	00000002 _init
1a001f34 g     F .text	00000024 vPortEndScheduler
1a000de2 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0014bc g     F .text	0000000c xTaskGetTickCount
1a0009a4 g     F .text	00000188 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c14 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000390 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002f0c g     F .text	00000038 Chip_I2C_SetClockRate
1a001968 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0029dc g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001818 g     F .text	0000008c xTaskRemoveFromEventList
1a000ed0  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004f58 g     O .text	00000020 __sf_fake_stderr
1a002ee8 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002b98 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004e70 g     O .text	000000e6 gpioPinsInit
1a000ea4  w    F .text	0000002c vAssertCalled
1a002f70 g     F .text	00000012 Chip_SSP_SetClockRate
1a003c20 g     F .text	0000002c __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a002250 g     F .text	00000048 vPrintString
1a0037a8 g     F .text	00000002 __sfp_lock_acquire
1a004a20 g     F .text	00000000 memchr
1a0018bc g     F .text	00000080 xTaskCheckForTimeOut
1a003aa0 g     F .text	00000090 _free_r
1a002c80 g     F .text	00000026 Chip_Clock_GetBaseClock
100000a4 g       .bss	00000000 _bss
1a002790 g     F .text	00000032 Chip_ADC_SetSampleRate
10002bb4 g     O .bss	00000004 freeRtosInterruptCallback
1a0014ac g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002f82 g     F .text	0000003e Chip_SSP_SetBitRate
1a000e4a g     F .text	00000028 uxListRemove
1a002ec4 g     F .text	00000002 Chip_GPIO_Init
1a004d24 g     O .text	00000004 OscRateIn
1a00122c g     F .text	00000072 xTaskCreateStatic
10002c14 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0016e4 g     F .text	000000cc vTaskSwitchContext
1a0042b8 g     F .text	0000002c _iprintf_r
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000902 g     F .text	000000a0 xQueueGenericCreateStatic
1a0017e0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00041c g     F .text	0000000a _close_r
1a000e74 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001b64 g     F .text	0000006c xTimerGenericCommand
1a004558 g     F .text	000000f4 __swsetup_r
1a000eec  w    F .text	0000001c vApplicationStackOverflowHook
1a0033fc  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0035f4 g     F .text	00000088 __sfp
1a0037b4 g     F .text	00000002 __sinit_lock_release
1a002204 g     F .text	0000002c _kbhit
1a004408 g     F .text	00000022 __sread
1a0030d4 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00240c g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003528 g     F .text	00000064 _fflush_r
1a004f98 g     O .text	00000020 __sf_fake_stdin
1a002a44 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003a04 g     F .text	0000009a memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000340 g     F .text	0000004c main
1a004548 g     F .text	00000010 __swbuf
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000e16 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001f10 g     F .text	00000024 SVC_Handler
1a00448c g     F .text	00000008 __sclose
1a001af4 g     F .text	00000070 xTimerCreateTimerTask
1a00248c g     F .text	00000016 Board_LED_Toggle
1a003b30 g     F .text	000000bc _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002cb4 g     F .text	0000003c Chip_Clock_EnableOpts
1a0024de g     F .text	00000008 __stdio_getchar
1a0037e0 g     F .text	0000004a _fwalk
1a002a60 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002460 g     F .text	0000002c Board_LED_Test
1a002b18 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003ecc g     F .text	00000018 vfiprintf
1a002ff8 g     F .text	00000040 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000418  w    F .text	00000002 _fini
1a0042e4 g     F .text	00000034 iprintf
1a0015e8 g     F .text	000000fc xTaskResumeAll
1a0013ec g     F .text	0000009c vTaskStartScheduler
1a002750 g     F .text	00000040 Chip_ADC_Init
10002c10 g     O .bss	00000004 g_pUsbApi
1a0024f0 g     F .text	00000038 Board_SetupMuxing
1a002620 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00049c g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a003ee4 g     F .text	00000132 _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a003400 g     F .text	00000128 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0037cc g     F .text	00000014 __fp_unlock_all
1a00193c g     F .text	0000000c vTaskMissedYield
10002c14 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002fc0 g     F .text	00000038 Chip_SSP_Init
1a000d68 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0014c8 g     F .text	00000120 xTaskIncrementTick
1a00493c g     F .text	0000005a __swhatbuf_r
1a002230 g     F .text	00000020 DAC_IRQHandler
1a0023e8 g     F .text	00000024 Board_Debug_Init
1a0024d4 g     F .text	0000000a __stdio_putchar
1a000860 g     F .text	00000080 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a002ec8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00129e g     F .text	00000066 xTaskCreate
1a002d70 g     F .text	00000154 Chip_SetupCoreClock
1a004430 g     F .text	0000003c __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a003c68 g     F .text	00000264 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a00382c g     F .text	00000052 _fwalk_reent
1a0027d0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0037ac g     F .text	00000002 __sfp_lock_release
1a004f78 g     O .text	00000020 __sf_fake_stdout
1a001948 g     F .text	00000020 xTaskGetSchedulerState
1a000324 g     F .text	0000001c vTask2
1a0033fc  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a004998 g     F .text	00000088 __smakebuf_r
1a001ed8 g     F .text	0000002c pxPortInitialiseStack
1a004018 g     F .text	000002a0 _printf_i
1a002cf0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002bc8 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a003c4c g     F .text	0000001a __sprint_r
1a00243c g     F .text	00000024 Board_LED_Set
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00306c g     F .text	00000068 gpioRead
1a001f58 g     F .text	00000044 vPortEnterCritical
10002bc4 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003c68 g     F .text	00000264 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002c28 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003ecc g     F .text	00000018 vfprintf
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0037b0 g     F .text	00000002 __sinit_lock_acquire
1a002594 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 91 03 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a fe 74 ff 53     }............t.S
	...
1a00002c:	11 1f 00 1a 85 01 00 1a 00 00 00 00 d1 1f 00 1a     ................
1a00003c:	35 20 00 1a                                         5 ..

1a000040 <g_pfnVendorVectors>:
1a000040:	31 22 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     1"..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	d5 30 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .0..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005008 	.word	0x1a005008
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a005008 	.word	0x1a005008
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005008 	.word	0x1a005008
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005008 	.word	0x1a005008
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005008 	.word	0x1a005008
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002b70 	.word	0x00002b70
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <vTask1>:
   return 0;
}
/*-----------------------------------------------------------*/

void vTask1( void *pvParameters )
{
1a000300:	b508      	push	{r3, lr}
   const char *pcTaskName = "Task 1 is running\r\n";
   TickType_t xLastWakeTime;
   const TickType_t xDelay1000ms = pdMS_TO_TICKS( 1000UL ); //1 seg

   xLastWakeTime = xTaskGetTickCount(); /* se inicializa la variable con la actual cantidad de ticks. Luego es manejada por la API de vTaskDelayUntil()*/
1a000302:	f001 f8db 	bl	1a0014bc <xTaskGetTickCount>

   /* As per most tasks, this task is implemented in an infinite loop. */
   for( ;; ){
      /* Print out the name of this task. */
      vPrintString( pcTaskName );
1a000306:	4805      	ldr	r0, [pc, #20]	; (1a00031c <vTask1+0x1c>)
1a000308:	f001 ffa2 	bl	1a002250 <vPrintString>
      if (xLastWakeTime - 100 >= 0){ //aproximadamente cada 1 seg
        xLastWakeTime = xTaskGetTickCount();
1a00030c:	f001 f8d6 	bl	1a0014bc <xTaskGetTickCount>
        vTaskPrioritySet( xTask2Handle, tskIDLE_PRIORITY + 3 ); //aumenta la prioriodad de la tarea 2 por encima de la tarea 1
1a000310:	2103      	movs	r1, #3
1a000312:	4b03      	ldr	r3, [pc, #12]	; (1a000320 <vTask1+0x20>)
1a000314:	6818      	ldr	r0, [r3, #0]
1a000316:	f000 fff5 	bl	1a001304 <vTaskPrioritySet>
1a00031a:	e7f4      	b.n	1a000306 <vTask1+0x6>
1a00031c:	1a004bfc 	.word	0x1a004bfc
1a000320:	100000a4 	.word	0x100000a4

1a000324 <vTask2>:
    }
}
/*-----------------------------------------------------------*/

void vTask2( void *pvParameters )
{
1a000324:	b508      	push	{r3, lr}
   const char *pcTaskName = "Task 2 is running\r\n";

   /* As per most tasks, this task is implemented in an infinite loop. */
   for( ;; ) {
      /* Print out the name of this task. */
      vPrintString( pcTaskName );
1a000326:	4805      	ldr	r0, [pc, #20]	; (1a00033c <vTask2+0x18>)
1a000328:	f001 ff92 	bl	1a002250 <vPrintString>
      Board_LED_Toggle(5);
1a00032c:	2005      	movs	r0, #5
1a00032e:	f002 f8ad 	bl	1a00248c <Board_LED_Toggle>
      vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 ); //disminuye su propia prioridad
1a000332:	2101      	movs	r1, #1
1a000334:	2000      	movs	r0, #0
1a000336:	f000 ffe5 	bl	1a001304 <vTaskPrioritySet>
1a00033a:	e7f4      	b.n	1a000326 <vTask2+0x2>
1a00033c:	1a004c10 	.word	0x1a004c10

1a000340 <main>:
{
1a000340:	b500      	push	{lr}
1a000342:	b083      	sub	sp, #12
   xTaskCreate( vTask1, (const char *)"Task 1", 1000, NULL, tskIDLE_PRIORITY+2, NULL );
1a000344:	2400      	movs	r4, #0
1a000346:	9401      	str	r4, [sp, #4]
1a000348:	2302      	movs	r3, #2
1a00034a:	9300      	str	r3, [sp, #0]
1a00034c:	4623      	mov	r3, r4
1a00034e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000352:	4909      	ldr	r1, [pc, #36]	; (1a000378 <main+0x38>)
1a000354:	4809      	ldr	r0, [pc, #36]	; (1a00037c <main+0x3c>)
1a000356:	f000 ffa2 	bl	1a00129e <xTaskCreate>
   xTaskCreate( vTask2, (const char *)"Task 2", 1000, NULL, tskIDLE_PRIORITY+1, xTask2Handle);
1a00035a:	4b09      	ldr	r3, [pc, #36]	; (1a000380 <main+0x40>)
1a00035c:	681b      	ldr	r3, [r3, #0]
1a00035e:	9301      	str	r3, [sp, #4]
1a000360:	2301      	movs	r3, #1
1a000362:	9300      	str	r3, [sp, #0]
1a000364:	4623      	mov	r3, r4
1a000366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00036a:	4906      	ldr	r1, [pc, #24]	; (1a000384 <main+0x44>)
1a00036c:	4806      	ldr	r0, [pc, #24]	; (1a000388 <main+0x48>)
1a00036e:	f000 ff96 	bl	1a00129e <xTaskCreate>
   vTaskStartScheduler();
1a000372:	f001 f83b 	bl	1a0013ec <vTaskStartScheduler>
1a000376:	e7fe      	b.n	1a000376 <main+0x36>
1a000378:	1a004bec 	.word	0x1a004bec
1a00037c:	1a000301 	.word	0x1a000301
1a000380:	100000a4 	.word	0x100000a4
1a000384:	1a004bf4 	.word	0x1a004bf4
1a000388:	1a000325 	.word	0x1a000325

1a00038c <initialise_monitor_handles>:
{
1a00038c:	4770      	bx	lr
1a00038e:	Address 0x000000001a00038e is out of bounds.


1a000390 <Reset_Handler>:
void Reset_Handler(void) {
1a000390:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000392:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000394:	4a19      	ldr	r2, [pc, #100]	; (1a0003fc <Reset_Handler+0x6c>)
1a000396:	4b1a      	ldr	r3, [pc, #104]	; (1a000400 <Reset_Handler+0x70>)
1a000398:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00039a:	4a1a      	ldr	r2, [pc, #104]	; (1a000404 <Reset_Handler+0x74>)
1a00039c:	3304      	adds	r3, #4
1a00039e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003a0:	2300      	movs	r3, #0
1a0003a2:	e005      	b.n	1a0003b0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0003a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003a8:	4a17      	ldr	r2, [pc, #92]	; (1a000408 <Reset_Handler+0x78>)
1a0003aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003ae:	3301      	adds	r3, #1
1a0003b0:	2b07      	cmp	r3, #7
1a0003b2:	d9f7      	bls.n	1a0003a4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0003b4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0003b6:	4b15      	ldr	r3, [pc, #84]	; (1a00040c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0003b8:	e007      	b.n	1a0003ca <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0003ba:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0003be:	689a      	ldr	r2, [r3, #8]
1a0003c0:	6859      	ldr	r1, [r3, #4]
1a0003c2:	6818      	ldr	r0, [r3, #0]
1a0003c4:	f7ff fee1 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0003c8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0003ca:	4a11      	ldr	r2, [pc, #68]	; (1a000410 <Reset_Handler+0x80>)
1a0003cc:	4293      	cmp	r3, r2
1a0003ce:	d3f4      	bcc.n	1a0003ba <Reset_Handler+0x2a>
1a0003d0:	e006      	b.n	1a0003e0 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0003d2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0003d4:	6859      	ldr	r1, [r3, #4]
1a0003d6:	f854 0b08 	ldr.w	r0, [r4], #8
1a0003da:	f7ff fee5 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0003de:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0003e0:	4a0c      	ldr	r2, [pc, #48]	; (1a000414 <Reset_Handler+0x84>)
1a0003e2:	4293      	cmp	r3, r2
1a0003e4:	d3f5      	bcc.n	1a0003d2 <Reset_Handler+0x42>
    SystemInit();
1a0003e6:	f002 fe07 	bl	1a002ff8 <SystemInit>
    __libc_init_array();
1a0003ea:	f003 fa49 	bl	1a003880 <__libc_init_array>
    initialise_monitor_handles();
1a0003ee:	f7ff ffcd 	bl	1a00038c <initialise_monitor_handles>
    main();
1a0003f2:	f7ff ffa5 	bl	1a000340 <main>
        __asm__ volatile("wfi");
1a0003f6:	bf30      	wfi
1a0003f8:	e7fd      	b.n	1a0003f6 <Reset_Handler+0x66>
1a0003fa:	bf00      	nop
1a0003fc:	10df1000 	.word	0x10df1000
1a000400:	40053100 	.word	0x40053100
1a000404:	01dff7ff 	.word	0x01dff7ff
1a000408:	e000e280 	.word	0xe000e280
1a00040c:	1a000114 	.word	0x1a000114
1a000410:	1a000150 	.word	0x1a000150
1a000414:	1a000178 	.word	0x1a000178

1a000418 <_fini>:
void _fini(void) {}
1a000418:	4770      	bx	lr

1a00041a <_init>:
void _init(void) {}
1a00041a:	4770      	bx	lr

1a00041c <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00041c:	2309      	movs	r3, #9
1a00041e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000424:	4770      	bx	lr

1a000426 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000426:	2358      	movs	r3, #88	; 0x58
1a000428:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00042a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00042e:	4770      	bx	lr

1a000430 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000430:	2902      	cmp	r1, #2
1a000432:	d801      	bhi.n	1a000438 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000434:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000436:	4770      	bx	lr
       SET_ERR(EBADF);
1a000438:	2309      	movs	r3, #9
1a00043a:	6003      	str	r3, [r0, #0]
       return -1;
1a00043c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000440:	4770      	bx	lr

1a000442 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000442:	2358      	movs	r3, #88	; 0x58
1a000444:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00044a:	4770      	bx	lr

1a00044c <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00044c:	2902      	cmp	r1, #2
1a00044e:	d820      	bhi.n	1a000492 <_read_r+0x46>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000454:	461d      	mov	r5, r3
1a000456:	4617      	mov	r7, r2
1a000458:	4606      	mov	r6, r0
  switch (fd) {
1a00045a:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00045c:	42ac      	cmp	r4, r5
1a00045e:	d212      	bcs.n	1a000486 <_read_r+0x3a>
         int c = __stdio_getchar();
1a000460:	f002 f83d 	bl	1a0024de <__stdio_getchar>
         if( c != -1 ){
1a000464:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000468:	d0f8      	beq.n	1a00045c <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00046a:	f104 0801 	add.w	r8, r4, #1
1a00046e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000470:	280d      	cmp	r0, #13
1a000472:	d003      	beq.n	1a00047c <_read_r+0x30>
1a000474:	280a      	cmp	r0, #10
1a000476:	d001      	beq.n	1a00047c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000478:	4644      	mov	r4, r8
1a00047a:	e7ef      	b.n	1a00045c <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a00047c:	f002 f82f 	bl	1a0024de <__stdio_getchar>
               return i;
1a000480:	4640      	mov	r0, r8
1a000482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
         }
      }
      SET_ERR(ENODEV);
1a000486:	2313      	movs	r3, #19
1a000488:	6033      	str	r3, [r6, #0]
      return -1;
1a00048a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00048e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  default:
      SET_ERR(ENODEV);
1a000492:	2313      	movs	r3, #19
1a000494:	6003      	str	r3, [r0, #0]
      return -1;
1a000496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00049a:	4770      	bx	lr

1a00049c <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00049c:	2902      	cmp	r1, #2
1a00049e:	d80c      	bhi.n	1a0004ba <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0004a0:	b570      	push	{r4, r5, r6, lr}
1a0004a2:	461d      	mov	r5, r3
1a0004a4:	4616      	mov	r6, r2
   switch (fd) {
1a0004a6:	2400      	movs	r4, #0
1a0004a8:	e003      	b.n	1a0004b2 <_write_r+0x16>
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
           __stdio_putchar(((char*) b)[i]);
1a0004aa:	5d30      	ldrb	r0, [r6, r4]
1a0004ac:	f002 f812 	bl	1a0024d4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0004b0:	3401      	adds	r4, #1
1a0004b2:	42ac      	cmp	r4, r5
1a0004b4:	d3f9      	bcc.n	1a0004aa <_write_r+0xe>
       return n;
1a0004b6:	4628      	mov	r0, r5
1a0004b8:	bd70      	pop	{r4, r5, r6, pc}
   default:
       SET_ERR(ENODEV);
1a0004ba:	2313      	movs	r3, #19
1a0004bc:	6003      	str	r3, [r0, #0]
       return -1;
1a0004be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004c2:	4770      	bx	lr

1a0004c4 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0004c4:	4b05      	ldr	r3, [pc, #20]	; (1a0004dc <_sbrk_r+0x18>)
1a0004c6:	681b      	ldr	r3, [r3, #0]
1a0004c8:	b123      	cbz	r3, 1a0004d4 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0004ca:	4b04      	ldr	r3, [pc, #16]	; (1a0004dc <_sbrk_r+0x18>)
1a0004cc:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0004ce:	4401      	add	r1, r0
1a0004d0:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0004d2:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0004d4:	4a02      	ldr	r2, [pc, #8]	; (1a0004e0 <_sbrk_r+0x1c>)
1a0004d6:	4b01      	ldr	r3, [pc, #4]	; (1a0004dc <_sbrk_r+0x18>)
1a0004d8:	601a      	str	r2, [r3, #0]
1a0004da:	e7f6      	b.n	1a0004ca <_sbrk_r+0x6>
1a0004dc:	100000a8 	.word	0x100000a8
1a0004e0:	10002c14 	.word	0x10002c14

1a0004e4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a0004e4:	4a12      	ldr	r2, [pc, #72]	; (1a000530 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0004e6:	f012 0f07 	tst.w	r2, #7
1a0004ea:	d01e      	beq.n	1a00052a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0004ec:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0004ee:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a0004f2:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a0004f6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0004f8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0004fa:	480e      	ldr	r0, [pc, #56]	; (1a000534 <prvHeapInit+0x50>)
1a0004fc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a0004fe:	2100      	movs	r1, #0
1a000500:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000502:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000504:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000506:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00050a:	480b      	ldr	r0, [pc, #44]	; (1a000538 <prvHeapInit+0x54>)
1a00050c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00050e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000510:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000512:	1a99      	subs	r1, r3, r2
1a000514:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000516:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000518:	4b08      	ldr	r3, [pc, #32]	; (1a00053c <prvHeapInit+0x58>)
1a00051a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00051c:	4b08      	ldr	r3, [pc, #32]	; (1a000540 <prvHeapInit+0x5c>)
1a00051e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000520:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000524:	4b07      	ldr	r3, [pc, #28]	; (1a000544 <prvHeapInit+0x60>)
1a000526:	601a      	str	r2, [r3, #0]
1a000528:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00052a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a00052e:	e7e4      	b.n	1a0004fa <prvHeapInit+0x16>
1a000530:	100000b0 	.word	0x100000b0
1a000534:	100020bc 	.word	0x100020bc
1a000538:	100000ac 	.word	0x100000ac
1a00053c:	100020b8 	.word	0x100020b8
1a000540:	100020b4 	.word	0x100020b4
1a000544:	100020b0 	.word	0x100020b0

1a000548 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000548:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00054a:	4b13      	ldr	r3, [pc, #76]	; (1a000598 <prvInsertBlockIntoFreeList+0x50>)
1a00054c:	681a      	ldr	r2, [r3, #0]
1a00054e:	4282      	cmp	r2, r0
1a000550:	d31b      	bcc.n	1a00058a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000552:	6859      	ldr	r1, [r3, #4]
1a000554:	185c      	adds	r4, r3, r1
1a000556:	42a0      	cmp	r0, r4
1a000558:	d103      	bne.n	1a000562 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00055a:	6840      	ldr	r0, [r0, #4]
1a00055c:	4401      	add	r1, r0
1a00055e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000560:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000562:	6841      	ldr	r1, [r0, #4]
1a000564:	1844      	adds	r4, r0, r1
1a000566:	42a2      	cmp	r2, r4
1a000568:	d113      	bne.n	1a000592 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00056a:	4c0c      	ldr	r4, [pc, #48]	; (1a00059c <prvInsertBlockIntoFreeList+0x54>)
1a00056c:	6824      	ldr	r4, [r4, #0]
1a00056e:	42a2      	cmp	r2, r4
1a000570:	d00d      	beq.n	1a00058e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000572:	6852      	ldr	r2, [r2, #4]
1a000574:	4411      	add	r1, r2
1a000576:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000578:	681a      	ldr	r2, [r3, #0]
1a00057a:	6812      	ldr	r2, [r2, #0]
1a00057c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a00057e:	4298      	cmp	r0, r3
1a000580:	d000      	beq.n	1a000584 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000582:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000584:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000588:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00058a:	4613      	mov	r3, r2
1a00058c:	e7de      	b.n	1a00054c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a00058e:	6004      	str	r4, [r0, #0]
1a000590:	e7f5      	b.n	1a00057e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000592:	6002      	str	r2, [r0, #0]
1a000594:	e7f3      	b.n	1a00057e <prvInsertBlockIntoFreeList+0x36>
1a000596:	bf00      	nop
1a000598:	100020bc 	.word	0x100020bc
1a00059c:	100000ac 	.word	0x100000ac

1a0005a0 <pvPortMalloc>:
{
1a0005a0:	b570      	push	{r4, r5, r6, lr}
1a0005a2:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0005a4:	f000 ff82 	bl	1a0014ac <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0005a8:	4b3c      	ldr	r3, [pc, #240]	; (1a00069c <pvPortMalloc+0xfc>)
1a0005aa:	681b      	ldr	r3, [r3, #0]
1a0005ac:	b1bb      	cbz	r3, 1a0005de <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0005ae:	4b3c      	ldr	r3, [pc, #240]	; (1a0006a0 <pvPortMalloc+0x100>)
1a0005b0:	681b      	ldr	r3, [r3, #0]
1a0005b2:	421c      	tst	r4, r3
1a0005b4:	d164      	bne.n	1a000680 <pvPortMalloc+0xe0>
			if( xWantedSize > 0 )
1a0005b6:	b1ac      	cbz	r4, 1a0005e4 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
1a0005b8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0005ba:	f014 0f07 	tst.w	r4, #7
1a0005be:	d011      	beq.n	1a0005e4 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0005c0:	f024 0407 	bic.w	r4, r4, #7
1a0005c4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0005c6:	f004 0307 	and.w	r3, r4, #7
1a0005ca:	b15b      	cbz	r3, 1a0005e4 <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0005cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0005d0:	f383 8811 	msr	BASEPRI, r3
1a0005d4:	f3bf 8f6f 	isb	sy
1a0005d8:	f3bf 8f4f 	dsb	sy
1a0005dc:	e7fe      	b.n	1a0005dc <pvPortMalloc+0x3c>
			prvHeapInit();
1a0005de:	f7ff ff81 	bl	1a0004e4 <prvHeapInit>
1a0005e2:	e7e4      	b.n	1a0005ae <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a0005e4:	2c00      	cmp	r4, #0
1a0005e6:	d04d      	beq.n	1a000684 <pvPortMalloc+0xe4>
1a0005e8:	4b2e      	ldr	r3, [pc, #184]	; (1a0006a4 <pvPortMalloc+0x104>)
1a0005ea:	681b      	ldr	r3, [r3, #0]
1a0005ec:	429c      	cmp	r4, r3
1a0005ee:	d84b      	bhi.n	1a000688 <pvPortMalloc+0xe8>
				pxBlock = xStart.pxNextFreeBlock;
1a0005f0:	4b2d      	ldr	r3, [pc, #180]	; (1a0006a8 <pvPortMalloc+0x108>)
1a0005f2:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0005f4:	e001      	b.n	1a0005fa <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
1a0005f6:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a0005f8:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0005fa:	686a      	ldr	r2, [r5, #4]
1a0005fc:	4294      	cmp	r4, r2
1a0005fe:	d902      	bls.n	1a000606 <pvPortMalloc+0x66>
1a000600:	682a      	ldr	r2, [r5, #0]
1a000602:	2a00      	cmp	r2, #0
1a000604:	d1f7      	bne.n	1a0005f6 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
1a000606:	4a25      	ldr	r2, [pc, #148]	; (1a00069c <pvPortMalloc+0xfc>)
1a000608:	6812      	ldr	r2, [r2, #0]
1a00060a:	4295      	cmp	r5, r2
1a00060c:	d03e      	beq.n	1a00068c <pvPortMalloc+0xec>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00060e:	681e      	ldr	r6, [r3, #0]
1a000610:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000612:	682a      	ldr	r2, [r5, #0]
1a000614:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000616:	686b      	ldr	r3, [r5, #4]
1a000618:	1b1b      	subs	r3, r3, r4
1a00061a:	2b10      	cmp	r3, #16
1a00061c:	d910      	bls.n	1a000640 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a00061e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000620:	f010 0f07 	tst.w	r0, #7
1a000624:	d008      	beq.n	1a000638 <pvPortMalloc+0x98>
1a000626:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00062a:	f383 8811 	msr	BASEPRI, r3
1a00062e:	f3bf 8f6f 	isb	sy
1a000632:	f3bf 8f4f 	dsb	sy
1a000636:	e7fe      	b.n	1a000636 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000638:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a00063a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a00063c:	f7ff ff84 	bl	1a000548 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000640:	686a      	ldr	r2, [r5, #4]
1a000642:	4918      	ldr	r1, [pc, #96]	; (1a0006a4 <pvPortMalloc+0x104>)
1a000644:	680b      	ldr	r3, [r1, #0]
1a000646:	1a9b      	subs	r3, r3, r2
1a000648:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a00064a:	4918      	ldr	r1, [pc, #96]	; (1a0006ac <pvPortMalloc+0x10c>)
1a00064c:	6809      	ldr	r1, [r1, #0]
1a00064e:	428b      	cmp	r3, r1
1a000650:	d201      	bcs.n	1a000656 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000652:	4916      	ldr	r1, [pc, #88]	; (1a0006ac <pvPortMalloc+0x10c>)
1a000654:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000656:	4b12      	ldr	r3, [pc, #72]	; (1a0006a0 <pvPortMalloc+0x100>)
1a000658:	681b      	ldr	r3, [r3, #0]
1a00065a:	4313      	orrs	r3, r2
1a00065c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a00065e:	2300      	movs	r3, #0
1a000660:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000662:	f000 ffc1 	bl	1a0015e8 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000666:	b19e      	cbz	r6, 1a000690 <pvPortMalloc+0xf0>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000668:	f016 0f07 	tst.w	r6, #7
1a00066c:	d013      	beq.n	1a000696 <pvPortMalloc+0xf6>
1a00066e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000672:	f383 8811 	msr	BASEPRI, r3
1a000676:	f3bf 8f6f 	isb	sy
1a00067a:	f3bf 8f4f 	dsb	sy
1a00067e:	e7fe      	b.n	1a00067e <pvPortMalloc+0xde>
void *pvReturn = NULL;
1a000680:	2600      	movs	r6, #0
1a000682:	e7ee      	b.n	1a000662 <pvPortMalloc+0xc2>
1a000684:	2600      	movs	r6, #0
1a000686:	e7ec      	b.n	1a000662 <pvPortMalloc+0xc2>
1a000688:	2600      	movs	r6, #0
1a00068a:	e7ea      	b.n	1a000662 <pvPortMalloc+0xc2>
1a00068c:	2600      	movs	r6, #0
1a00068e:	e7e8      	b.n	1a000662 <pvPortMalloc+0xc2>
			vApplicationMallocFailedHook();
1a000690:	f000 fc1e 	bl	1a000ed0 <vApplicationMallocFailedHook>
1a000694:	e7e8      	b.n	1a000668 <pvPortMalloc+0xc8>
}
1a000696:	4630      	mov	r0, r6
1a000698:	bd70      	pop	{r4, r5, r6, pc}
1a00069a:	bf00      	nop
1a00069c:	100000ac 	.word	0x100000ac
1a0006a0:	100020b0 	.word	0x100020b0
1a0006a4:	100020b4 	.word	0x100020b4
1a0006a8:	100020bc 	.word	0x100020bc
1a0006ac:	100020b8 	.word	0x100020b8

1a0006b0 <vPortFree>:
	if( pv != NULL )
1a0006b0:	b380      	cbz	r0, 1a000714 <vPortFree+0x64>
{
1a0006b2:	b538      	push	{r3, r4, r5, lr}
1a0006b4:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0006b6:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0006ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0006be:	4916      	ldr	r1, [pc, #88]	; (1a000718 <vPortFree+0x68>)
1a0006c0:	6809      	ldr	r1, [r1, #0]
1a0006c2:	420a      	tst	r2, r1
1a0006c4:	d108      	bne.n	1a0006d8 <vPortFree+0x28>
1a0006c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006ca:	f383 8811 	msr	BASEPRI, r3
1a0006ce:	f3bf 8f6f 	isb	sy
1a0006d2:	f3bf 8f4f 	dsb	sy
1a0006d6:	e7fe      	b.n	1a0006d6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a0006d8:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a0006dc:	b140      	cbz	r0, 1a0006f0 <vPortFree+0x40>
1a0006de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006e2:	f383 8811 	msr	BASEPRI, r3
1a0006e6:	f3bf 8f6f 	isb	sy
1a0006ea:	f3bf 8f4f 	dsb	sy
1a0006ee:	e7fe      	b.n	1a0006ee <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a0006f0:	ea22 0201 	bic.w	r2, r2, r1
1a0006f4:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a0006f8:	f000 fed8 	bl	1a0014ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a0006fc:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000700:	4a06      	ldr	r2, [pc, #24]	; (1a00071c <vPortFree+0x6c>)
1a000702:	6813      	ldr	r3, [r2, #0]
1a000704:	440b      	add	r3, r1
1a000706:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000708:	4628      	mov	r0, r5
1a00070a:	f7ff ff1d 	bl	1a000548 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00070e:	f000 ff6b 	bl	1a0015e8 <xTaskResumeAll>
1a000712:	bd38      	pop	{r3, r4, r5, pc}
1a000714:	4770      	bx	lr
1a000716:	bf00      	nop
1a000718:	100020b0 	.word	0x100020b0
1a00071c:	100020b4 	.word	0x100020b4

1a000720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000720:	b510      	push	{r4, lr}
1a000722:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000724:	f001 fc18 	bl	1a001f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000728:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00072a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00072c:	429a      	cmp	r2, r3
1a00072e:	d004      	beq.n	1a00073a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000730:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000732:	f001 fc33 	bl	1a001f9c <vPortExitCritical>

	return xReturn;
}
1a000736:	4620      	mov	r0, r4
1a000738:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00073a:	2401      	movs	r4, #1
1a00073c:	e7f9      	b.n	1a000732 <prvIsQueueFull+0x12>

1a00073e <prvIsQueueEmpty>:
{
1a00073e:	b510      	push	{r4, lr}
1a000740:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000742:	f001 fc09 	bl	1a001f58 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000748:	b123      	cbz	r3, 1a000754 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a00074a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00074c:	f001 fc26 	bl	1a001f9c <vPortExitCritical>
}
1a000750:	4620      	mov	r0, r4
1a000752:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000754:	2401      	movs	r4, #1
1a000756:	e7f9      	b.n	1a00074c <prvIsQueueEmpty+0xe>

1a000758 <prvCopyDataToQueue>:
{
1a000758:	b570      	push	{r4, r5, r6, lr}
1a00075a:	4604      	mov	r4, r0
1a00075c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00075e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000760:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000762:	b94a      	cbnz	r2, 1a000778 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000764:	6803      	ldr	r3, [r0, #0]
1a000766:	bb53      	cbnz	r3, 1a0007be <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000768:	6840      	ldr	r0, [r0, #4]
1a00076a:	f001 f8fd 	bl	1a001968 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00076e:	2300      	movs	r3, #0
1a000770:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000772:	3501      	adds	r5, #1
1a000774:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000776:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
1a000778:	b96e      	cbnz	r6, 1a000796 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00077a:	6880      	ldr	r0, [r0, #8]
1a00077c:	f003 f8a8 	bl	1a0038d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000780:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000782:	68a3      	ldr	r3, [r4, #8]
1a000784:	4413      	add	r3, r2
1a000786:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000788:	6862      	ldr	r2, [r4, #4]
1a00078a:	4293      	cmp	r3, r2
1a00078c:	d319      	bcc.n	1a0007c2 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a00078e:	6823      	ldr	r3, [r4, #0]
1a000790:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000792:	2000      	movs	r0, #0
1a000794:	e7ed      	b.n	1a000772 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000796:	68c0      	ldr	r0, [r0, #12]
1a000798:	f003 f89a 	bl	1a0038d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a00079c:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00079e:	425b      	negs	r3, r3
1a0007a0:	68e2      	ldr	r2, [r4, #12]
1a0007a2:	441a      	add	r2, r3
1a0007a4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0007a6:	6821      	ldr	r1, [r4, #0]
1a0007a8:	428a      	cmp	r2, r1
1a0007aa:	d202      	bcs.n	1a0007b2 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0007ac:	6862      	ldr	r2, [r4, #4]
1a0007ae:	4413      	add	r3, r2
1a0007b0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0007b2:	2e02      	cmp	r6, #2
1a0007b4:	d107      	bne.n	1a0007c6 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0007b6:	b145      	cbz	r5, 1a0007ca <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0007b8:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0007ba:	2000      	movs	r0, #0
1a0007bc:	e7d9      	b.n	1a000772 <prvCopyDataToQueue+0x1a>
1a0007be:	2000      	movs	r0, #0
1a0007c0:	e7d7      	b.n	1a000772 <prvCopyDataToQueue+0x1a>
1a0007c2:	2000      	movs	r0, #0
1a0007c4:	e7d5      	b.n	1a000772 <prvCopyDataToQueue+0x1a>
1a0007c6:	2000      	movs	r0, #0
1a0007c8:	e7d3      	b.n	1a000772 <prvCopyDataToQueue+0x1a>
1a0007ca:	2000      	movs	r0, #0
1a0007cc:	e7d1      	b.n	1a000772 <prvCopyDataToQueue+0x1a>

1a0007ce <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0007ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0007d0:	b172      	cbz	r2, 1a0007f0 <prvCopyDataFromQueue+0x22>
{
1a0007d2:	b510      	push	{r4, lr}
1a0007d4:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0007d6:	68c4      	ldr	r4, [r0, #12]
1a0007d8:	4414      	add	r4, r2
1a0007da:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0007dc:	6840      	ldr	r0, [r0, #4]
1a0007de:	4284      	cmp	r4, r0
1a0007e0:	d301      	bcc.n	1a0007e6 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0007e2:	6818      	ldr	r0, [r3, #0]
1a0007e4:	60d8      	str	r0, [r3, #12]
1a0007e6:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0007e8:	68d9      	ldr	r1, [r3, #12]
1a0007ea:	f003 f871 	bl	1a0038d0 <memcpy>
1a0007ee:	bd10      	pop	{r4, pc}
1a0007f0:	4770      	bx	lr

1a0007f2 <prvUnlockQueue>:
{
1a0007f2:	b538      	push	{r3, r4, r5, lr}
1a0007f4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0007f6:	f001 fbaf 	bl	1a001f58 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0007fa:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0007fe:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000800:	e001      	b.n	1a000806 <prvUnlockQueue+0x14>
			--cTxLock;
1a000802:	3c01      	subs	r4, #1
1a000804:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000806:	2c00      	cmp	r4, #0
1a000808:	dd0a      	ble.n	1a000820 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00080a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a00080c:	b143      	cbz	r3, 1a000820 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00080e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000812:	f001 f801 	bl	1a001818 <xTaskRemoveFromEventList>
1a000816:	2800      	cmp	r0, #0
1a000818:	d0f3      	beq.n	1a000802 <prvUnlockQueue+0x10>
						vTaskMissedYield();
1a00081a:	f001 f88f 	bl	1a00193c <vTaskMissedYield>
1a00081e:	e7f0      	b.n	1a000802 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000820:	23ff      	movs	r3, #255	; 0xff
1a000822:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000826:	f001 fbb9 	bl	1a001f9c <vPortExitCritical>
	taskENTER_CRITICAL();
1a00082a:	f001 fb95 	bl	1a001f58 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00082e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000832:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000834:	e001      	b.n	1a00083a <prvUnlockQueue+0x48>
				--cRxLock;
1a000836:	3c01      	subs	r4, #1
1a000838:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00083a:	2c00      	cmp	r4, #0
1a00083c:	dd0a      	ble.n	1a000854 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00083e:	692b      	ldr	r3, [r5, #16]
1a000840:	b143      	cbz	r3, 1a000854 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000842:	f105 0010 	add.w	r0, r5, #16
1a000846:	f000 ffe7 	bl	1a001818 <xTaskRemoveFromEventList>
1a00084a:	2800      	cmp	r0, #0
1a00084c:	d0f3      	beq.n	1a000836 <prvUnlockQueue+0x44>
					vTaskMissedYield();
1a00084e:	f001 f875 	bl	1a00193c <vTaskMissedYield>
1a000852:	e7f0      	b.n	1a000836 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000854:	23ff      	movs	r3, #255	; 0xff
1a000856:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00085a:	f001 fb9f 	bl	1a001f9c <vPortExitCritical>
1a00085e:	bd38      	pop	{r3, r4, r5, pc}

1a000860 <xQueueGenericReset>:
{
1a000860:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000862:	b330      	cbz	r0, 1a0008b2 <xQueueGenericReset+0x52>
1a000864:	4604      	mov	r4, r0
1a000866:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000868:	f001 fb76 	bl	1a001f58 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00086c:	6821      	ldr	r1, [r4, #0]
1a00086e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000870:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000872:	fb03 1002 	mla	r0, r3, r2, r1
1a000876:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000878:	2000      	movs	r0, #0
1a00087a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00087c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a00087e:	3a01      	subs	r2, #1
1a000880:	fb02 1303 	mla	r3, r2, r3, r1
1a000884:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000886:	23ff      	movs	r3, #255	; 0xff
1a000888:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00088c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000890:	b9c5      	cbnz	r5, 1a0008c4 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000892:	6923      	ldr	r3, [r4, #16]
1a000894:	b1f3      	cbz	r3, 1a0008d4 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000896:	f104 0010 	add.w	r0, r4, #16
1a00089a:	f000 ffbd 	bl	1a001818 <xTaskRemoveFromEventList>
1a00089e:	b1c8      	cbz	r0, 1a0008d4 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
1a0008a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0008a4:	4b0d      	ldr	r3, [pc, #52]	; (1a0008dc <xQueueGenericReset+0x7c>)
1a0008a6:	601a      	str	r2, [r3, #0]
1a0008a8:	f3bf 8f4f 	dsb	sy
1a0008ac:	f3bf 8f6f 	isb	sy
1a0008b0:	e010      	b.n	1a0008d4 <xQueueGenericReset+0x74>
1a0008b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008b6:	f383 8811 	msr	BASEPRI, r3
1a0008ba:	f3bf 8f6f 	isb	sy
1a0008be:	f3bf 8f4f 	dsb	sy
1a0008c2:	e7fe      	b.n	1a0008c2 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0008c4:	f104 0010 	add.w	r0, r4, #16
1a0008c8:	f000 fa8b 	bl	1a000de2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0008cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0008d0:	f000 fa87 	bl	1a000de2 <vListInitialise>
	taskEXIT_CRITICAL();
1a0008d4:	f001 fb62 	bl	1a001f9c <vPortExitCritical>
}
1a0008d8:	2001      	movs	r0, #1
1a0008da:	bd38      	pop	{r3, r4, r5, pc}
1a0008dc:	e000ed04 	.word	0xe000ed04

1a0008e0 <prvInitialiseNewQueue>:
{
1a0008e0:	b538      	push	{r3, r4, r5, lr}
1a0008e2:	461d      	mov	r5, r3
1a0008e4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0008e6:	460b      	mov	r3, r1
1a0008e8:	b149      	cbz	r1, 1a0008fe <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0008ea:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0008ec:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0008ee:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0008f0:	2101      	movs	r1, #1
1a0008f2:	4620      	mov	r0, r4
1a0008f4:	f7ff ffb4 	bl	1a000860 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0008f8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a0008fc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0008fe:	6024      	str	r4, [r4, #0]
1a000900:	e7f4      	b.n	1a0008ec <prvInitialiseNewQueue+0xc>

1a000902 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000902:	b940      	cbnz	r0, 1a000916 <xQueueGenericCreateStatic+0x14>
1a000904:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000908:	f383 8811 	msr	BASEPRI, r3
1a00090c:	f3bf 8f6f 	isb	sy
1a000910:	f3bf 8f4f 	dsb	sy
1a000914:	e7fe      	b.n	1a000914 <xQueueGenericCreateStatic+0x12>
	{
1a000916:	b510      	push	{r4, lr}
1a000918:	b084      	sub	sp, #16
1a00091a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a00091c:	b163      	cbz	r3, 1a000938 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00091e:	b1a2      	cbz	r2, 1a00094a <xQueueGenericCreateStatic+0x48>
1a000920:	b1a9      	cbz	r1, 1a00094e <xQueueGenericCreateStatic+0x4c>
1a000922:	2001      	movs	r0, #1
1a000924:	b9a8      	cbnz	r0, 1a000952 <xQueueGenericCreateStatic+0x50>
1a000926:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00092a:	f383 8811 	msr	BASEPRI, r3
1a00092e:	f3bf 8f6f 	isb	sy
1a000932:	f3bf 8f4f 	dsb	sy
1a000936:	e7fe      	b.n	1a000936 <xQueueGenericCreateStatic+0x34>
1a000938:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00093c:	f383 8811 	msr	BASEPRI, r3
1a000940:	f3bf 8f6f 	isb	sy
1a000944:	f3bf 8f4f 	dsb	sy
1a000948:	e7fe      	b.n	1a000948 <xQueueGenericCreateStatic+0x46>
1a00094a:	2001      	movs	r0, #1
1a00094c:	e7ea      	b.n	1a000924 <xQueueGenericCreateStatic+0x22>
1a00094e:	2000      	movs	r0, #0
1a000950:	e7e8      	b.n	1a000924 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000952:	b90a      	cbnz	r2, 1a000958 <xQueueGenericCreateStatic+0x56>
1a000954:	b101      	cbz	r1, 1a000958 <xQueueGenericCreateStatic+0x56>
1a000956:	2000      	movs	r0, #0
1a000958:	b940      	cbnz	r0, 1a00096c <xQueueGenericCreateStatic+0x6a>
1a00095a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00095e:	f383 8811 	msr	BASEPRI, r3
1a000962:	f3bf 8f6f 	isb	sy
1a000966:	f3bf 8f4f 	dsb	sy
1a00096a:	e7fe      	b.n	1a00096a <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a00096c:	2050      	movs	r0, #80	; 0x50
1a00096e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000970:	9803      	ldr	r0, [sp, #12]
1a000972:	2850      	cmp	r0, #80	; 0x50
1a000974:	d008      	beq.n	1a000988 <xQueueGenericCreateStatic+0x86>
1a000976:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00097a:	f383 8811 	msr	BASEPRI, r3
1a00097e:	f3bf 8f6f 	isb	sy
1a000982:	f3bf 8f4f 	dsb	sy
1a000986:	e7fe      	b.n	1a000986 <xQueueGenericCreateStatic+0x84>
1a000988:	4620      	mov	r0, r4
1a00098a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a00098c:	2301      	movs	r3, #1
1a00098e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000992:	9400      	str	r4, [sp, #0]
1a000994:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000998:	f7ff ffa2 	bl	1a0008e0 <prvInitialiseNewQueue>
	}
1a00099c:	4620      	mov	r0, r4
1a00099e:	b004      	add	sp, #16
1a0009a0:	bd10      	pop	{r4, pc}
1a0009a2:	Address 0x000000001a0009a2 is out of bounds.


1a0009a4 <xQueueGenericSend>:
{
1a0009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0009a6:	b085      	sub	sp, #20
1a0009a8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0009aa:	b160      	cbz	r0, 1a0009c6 <xQueueGenericSend+0x22>
1a0009ac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0009ae:	b199      	cbz	r1, 1a0009d8 <xQueueGenericSend+0x34>
1a0009b0:	2501      	movs	r5, #1
1a0009b2:	b9bd      	cbnz	r5, 1a0009e4 <xQueueGenericSend+0x40>
1a0009b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009b8:	f383 8811 	msr	BASEPRI, r3
1a0009bc:	f3bf 8f6f 	isb	sy
1a0009c0:	f3bf 8f4f 	dsb	sy
1a0009c4:	e7fe      	b.n	1a0009c4 <xQueueGenericSend+0x20>
1a0009c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009ca:	f383 8811 	msr	BASEPRI, r3
1a0009ce:	f3bf 8f6f 	isb	sy
1a0009d2:	f3bf 8f4f 	dsb	sy
1a0009d6:	e7fe      	b.n	1a0009d6 <xQueueGenericSend+0x32>
1a0009d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0009da:	b90a      	cbnz	r2, 1a0009e0 <xQueueGenericSend+0x3c>
1a0009dc:	2501      	movs	r5, #1
1a0009de:	e7e8      	b.n	1a0009b2 <xQueueGenericSend+0xe>
1a0009e0:	2500      	movs	r5, #0
1a0009e2:	e7e6      	b.n	1a0009b2 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0009e4:	2b02      	cmp	r3, #2
1a0009e6:	d009      	beq.n	1a0009fc <xQueueGenericSend+0x58>
1a0009e8:	b96d      	cbnz	r5, 1a000a06 <xQueueGenericSend+0x62>
1a0009ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009ee:	f383 8811 	msr	BASEPRI, r3
1a0009f2:	f3bf 8f6f 	isb	sy
1a0009f6:	f3bf 8f4f 	dsb	sy
1a0009fa:	e7fe      	b.n	1a0009fa <xQueueGenericSend+0x56>
1a0009fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0009fe:	2a01      	cmp	r2, #1
1a000a00:	d0f2      	beq.n	1a0009e8 <xQueueGenericSend+0x44>
1a000a02:	2500      	movs	r5, #0
1a000a04:	e7f0      	b.n	1a0009e8 <xQueueGenericSend+0x44>
1a000a06:	461e      	mov	r6, r3
1a000a08:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000a0a:	f000 ff9d 	bl	1a001948 <xTaskGetSchedulerState>
1a000a0e:	b910      	cbnz	r0, 1a000a16 <xQueueGenericSend+0x72>
1a000a10:	9b01      	ldr	r3, [sp, #4]
1a000a12:	b103      	cbz	r3, 1a000a16 <xQueueGenericSend+0x72>
1a000a14:	2500      	movs	r5, #0
1a000a16:	b945      	cbnz	r5, 1a000a2a <xQueueGenericSend+0x86>
1a000a18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a1c:	f383 8811 	msr	BASEPRI, r3
1a000a20:	f3bf 8f6f 	isb	sy
1a000a24:	f3bf 8f4f 	dsb	sy
1a000a28:	e7fe      	b.n	1a000a28 <xQueueGenericSend+0x84>
1a000a2a:	2500      	movs	r5, #0
1a000a2c:	e02c      	b.n	1a000a88 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000a2e:	4632      	mov	r2, r6
1a000a30:	4639      	mov	r1, r7
1a000a32:	4620      	mov	r0, r4
1a000a34:	f7ff fe90 	bl	1a000758 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000a3a:	b18b      	cbz	r3, 1a000a60 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000a3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a40:	f000 feea 	bl	1a001818 <xTaskRemoveFromEventList>
1a000a44:	b138      	cbz	r0, 1a000a56 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
1a000a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a4a:	4b37      	ldr	r3, [pc, #220]	; (1a000b28 <xQueueGenericSend+0x184>)
1a000a4c:	601a      	str	r2, [r3, #0]
1a000a4e:	f3bf 8f4f 	dsb	sy
1a000a52:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000a56:	f001 faa1 	bl	1a001f9c <vPortExitCritical>
				return pdPASS;
1a000a5a:	2001      	movs	r0, #1
}
1a000a5c:	b005      	add	sp, #20
1a000a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
1a000a60:	2800      	cmp	r0, #0
1a000a62:	d0f8      	beq.n	1a000a56 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
1a000a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a68:	4b2f      	ldr	r3, [pc, #188]	; (1a000b28 <xQueueGenericSend+0x184>)
1a000a6a:	601a      	str	r2, [r3, #0]
1a000a6c:	f3bf 8f4f 	dsb	sy
1a000a70:	f3bf 8f6f 	isb	sy
1a000a74:	e7ef      	b.n	1a000a56 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
1a000a76:	f001 fa91 	bl	1a001f9c <vPortExitCritical>
					return errQUEUE_FULL;
1a000a7a:	2000      	movs	r0, #0
1a000a7c:	e7ee      	b.n	1a000a5c <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
1a000a7e:	4620      	mov	r0, r4
1a000a80:	f7ff feb7 	bl	1a0007f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000a84:	f000 fdb0 	bl	1a0015e8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000a88:	f001 fa66 	bl	1a001f58 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000a8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a90:	429a      	cmp	r2, r3
1a000a92:	d3cc      	bcc.n	1a000a2e <xQueueGenericSend+0x8a>
1a000a94:	2e02      	cmp	r6, #2
1a000a96:	d0ca      	beq.n	1a000a2e <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000a98:	9b01      	ldr	r3, [sp, #4]
1a000a9a:	2b00      	cmp	r3, #0
1a000a9c:	d0eb      	beq.n	1a000a76 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
1a000a9e:	b91d      	cbnz	r5, 1a000aa8 <xQueueGenericSend+0x104>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000aa0:	a802      	add	r0, sp, #8
1a000aa2:	f000 feff 	bl	1a0018a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000aa6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
1a000aa8:	f001 fa78 	bl	1a001f9c <vPortExitCritical>
		vTaskSuspendAll();
1a000aac:	f000 fcfe 	bl	1a0014ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ab0:	f001 fa52 	bl	1a001f58 <vPortEnterCritical>
1a000ab4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ab8:	b25b      	sxtb	r3, r3
1a000aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000abe:	d102      	bne.n	1a000ac6 <xQueueGenericSend+0x122>
1a000ac0:	2300      	movs	r3, #0
1a000ac2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ac6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000aca:	b25b      	sxtb	r3, r3
1a000acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ad0:	d102      	bne.n	1a000ad8 <xQueueGenericSend+0x134>
1a000ad2:	2300      	movs	r3, #0
1a000ad4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ad8:	f001 fa60 	bl	1a001f9c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000adc:	a901      	add	r1, sp, #4
1a000ade:	a802      	add	r0, sp, #8
1a000ae0:	f000 feec 	bl	1a0018bc <xTaskCheckForTimeOut>
1a000ae4:	b9c8      	cbnz	r0, 1a000b1a <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000ae6:	4620      	mov	r0, r4
1a000ae8:	f7ff fe1a 	bl	1a000720 <prvIsQueueFull>
1a000aec:	2800      	cmp	r0, #0
1a000aee:	d0c6      	beq.n	1a000a7e <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000af0:	9901      	ldr	r1, [sp, #4]
1a000af2:	f104 0010 	add.w	r0, r4, #16
1a000af6:	f000 fe5b 	bl	1a0017b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000afa:	4620      	mov	r0, r4
1a000afc:	f7ff fe79 	bl	1a0007f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000b00:	f000 fd72 	bl	1a0015e8 <xTaskResumeAll>
1a000b04:	2800      	cmp	r0, #0
1a000b06:	d1bf      	bne.n	1a000a88 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
1a000b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b0c:	4b06      	ldr	r3, [pc, #24]	; (1a000b28 <xQueueGenericSend+0x184>)
1a000b0e:	601a      	str	r2, [r3, #0]
1a000b10:	f3bf 8f4f 	dsb	sy
1a000b14:	f3bf 8f6f 	isb	sy
1a000b18:	e7b6      	b.n	1a000a88 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
1a000b1a:	4620      	mov	r0, r4
1a000b1c:	f7ff fe69 	bl	1a0007f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000b20:	f000 fd62 	bl	1a0015e8 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000b24:	2000      	movs	r0, #0
1a000b26:	e799      	b.n	1a000a5c <xQueueGenericSend+0xb8>
1a000b28:	e000ed04 	.word	0xe000ed04

1a000b2c <xQueueGenericSendFromISR>:
{
1a000b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000b30:	b160      	cbz	r0, 1a000b4c <xQueueGenericSendFromISR+0x20>
1a000b32:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b34:	b199      	cbz	r1, 1a000b5e <xQueueGenericSendFromISR+0x32>
1a000b36:	2001      	movs	r0, #1
1a000b38:	b9b8      	cbnz	r0, 1a000b6a <xQueueGenericSendFromISR+0x3e>
1a000b3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b3e:	f383 8811 	msr	BASEPRI, r3
1a000b42:	f3bf 8f6f 	isb	sy
1a000b46:	f3bf 8f4f 	dsb	sy
1a000b4a:	e7fe      	b.n	1a000b4a <xQueueGenericSendFromISR+0x1e>
1a000b4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b50:	f383 8811 	msr	BASEPRI, r3
1a000b54:	f3bf 8f6f 	isb	sy
1a000b58:	f3bf 8f4f 	dsb	sy
1a000b5c:	e7fe      	b.n	1a000b5c <xQueueGenericSendFromISR+0x30>
1a000b5e:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000b60:	b908      	cbnz	r0, 1a000b66 <xQueueGenericSendFromISR+0x3a>
1a000b62:	2001      	movs	r0, #1
1a000b64:	e7e8      	b.n	1a000b38 <xQueueGenericSendFromISR+0xc>
1a000b66:	2000      	movs	r0, #0
1a000b68:	e7e6      	b.n	1a000b38 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000b6a:	2b02      	cmp	r3, #2
1a000b6c:	d009      	beq.n	1a000b82 <xQueueGenericSendFromISR+0x56>
1a000b6e:	b968      	cbnz	r0, 1a000b8c <xQueueGenericSendFromISR+0x60>
1a000b70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b74:	f383 8811 	msr	BASEPRI, r3
1a000b78:	f3bf 8f6f 	isb	sy
1a000b7c:	f3bf 8f4f 	dsb	sy
1a000b80:	e7fe      	b.n	1a000b80 <xQueueGenericSendFromISR+0x54>
1a000b82:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a000b84:	2d01      	cmp	r5, #1
1a000b86:	d0f2      	beq.n	1a000b6e <xQueueGenericSendFromISR+0x42>
1a000b88:	2000      	movs	r0, #0
1a000b8a:	e7f0      	b.n	1a000b6e <xQueueGenericSendFromISR+0x42>
1a000b8c:	461f      	mov	r7, r3
1a000b8e:	4690      	mov	r8, r2
1a000b90:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000b92:	f001 fb09 	bl	1a0021a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000b96:	f3ef 8611 	mrs	r6, BASEPRI
1a000b9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b9e:	f383 8811 	msr	BASEPRI, r3
1a000ba2:	f3bf 8f6f 	isb	sy
1a000ba6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000baa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000bac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000bae:	429a      	cmp	r2, r3
1a000bb0:	d301      	bcc.n	1a000bb6 <xQueueGenericSendFromISR+0x8a>
1a000bb2:	2f02      	cmp	r7, #2
1a000bb4:	d121      	bne.n	1a000bfa <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000bb6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000bba:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000bbc:	463a      	mov	r2, r7
1a000bbe:	4649      	mov	r1, r9
1a000bc0:	4620      	mov	r0, r4
1a000bc2:	f7ff fdc9 	bl	1a000758 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000bc6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000bca:	d110      	bne.n	1a000bee <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000bce:	b1b3      	cbz	r3, 1a000bfe <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000bd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bd4:	f000 fe20 	bl	1a001818 <xTaskRemoveFromEventList>
1a000bd8:	b198      	cbz	r0, 1a000c02 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000bda:	f1b8 0f00 	cmp.w	r8, #0
1a000bde:	d012      	beq.n	1a000c06 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000be0:	2001      	movs	r0, #1
1a000be2:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000be6:	f386 8811 	msr	BASEPRI, r6
}
1a000bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000bee:	1c6b      	adds	r3, r5, #1
1a000bf0:	b25b      	sxtb	r3, r3
1a000bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000bf6:	2001      	movs	r0, #1
1a000bf8:	e7f5      	b.n	1a000be6 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
1a000bfa:	2000      	movs	r0, #0
1a000bfc:	e7f3      	b.n	1a000be6 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
1a000bfe:	2001      	movs	r0, #1
1a000c00:	e7f1      	b.n	1a000be6 <xQueueGenericSendFromISR+0xba>
1a000c02:	2001      	movs	r0, #1
1a000c04:	e7ef      	b.n	1a000be6 <xQueueGenericSendFromISR+0xba>
1a000c06:	2001      	movs	r0, #1
1a000c08:	e7ed      	b.n	1a000be6 <xQueueGenericSendFromISR+0xba>
1a000c0a:	Address 0x000000001a000c0a is out of bounds.


1a000c0c <xQueueReceive>:
{
1a000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c0e:	b085      	sub	sp, #20
1a000c10:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000c12:	b160      	cbz	r0, 1a000c2e <xQueueReceive+0x22>
1a000c14:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c16:	b199      	cbz	r1, 1a000c40 <xQueueReceive+0x34>
1a000c18:	2501      	movs	r5, #1
1a000c1a:	b9bd      	cbnz	r5, 1a000c4c <xQueueReceive+0x40>
	__asm volatile
1a000c1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c20:	f383 8811 	msr	BASEPRI, r3
1a000c24:	f3bf 8f6f 	isb	sy
1a000c28:	f3bf 8f4f 	dsb	sy
1a000c2c:	e7fe      	b.n	1a000c2c <xQueueReceive+0x20>
1a000c2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c32:	f383 8811 	msr	BASEPRI, r3
1a000c36:	f3bf 8f6f 	isb	sy
1a000c3a:	f3bf 8f4f 	dsb	sy
1a000c3e:	e7fe      	b.n	1a000c3e <xQueueReceive+0x32>
1a000c40:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000c42:	b90b      	cbnz	r3, 1a000c48 <xQueueReceive+0x3c>
1a000c44:	2501      	movs	r5, #1
1a000c46:	e7e8      	b.n	1a000c1a <xQueueReceive+0xe>
1a000c48:	2500      	movs	r5, #0
1a000c4a:	e7e6      	b.n	1a000c1a <xQueueReceive+0xe>
1a000c4c:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000c4e:	f000 fe7b 	bl	1a001948 <xTaskGetSchedulerState>
1a000c52:	b910      	cbnz	r0, 1a000c5a <xQueueReceive+0x4e>
1a000c54:	9b01      	ldr	r3, [sp, #4]
1a000c56:	b103      	cbz	r3, 1a000c5a <xQueueReceive+0x4e>
1a000c58:	2500      	movs	r5, #0
1a000c5a:	b945      	cbnz	r5, 1a000c6e <xQueueReceive+0x62>
1a000c5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c60:	f383 8811 	msr	BASEPRI, r3
1a000c64:	f3bf 8f6f 	isb	sy
1a000c68:	f3bf 8f4f 	dsb	sy
1a000c6c:	e7fe      	b.n	1a000c6c <xQueueReceive+0x60>
1a000c6e:	2700      	movs	r7, #0
1a000c70:	e02f      	b.n	1a000cd2 <xQueueReceive+0xc6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000c72:	4631      	mov	r1, r6
1a000c74:	4620      	mov	r0, r4
1a000c76:	f7ff fdaa 	bl	1a0007ce <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000c7a:	3d01      	subs	r5, #1
1a000c7c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c7e:	6923      	ldr	r3, [r4, #16]
1a000c80:	b163      	cbz	r3, 1a000c9c <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c82:	f104 0010 	add.w	r0, r4, #16
1a000c86:	f000 fdc7 	bl	1a001818 <xTaskRemoveFromEventList>
1a000c8a:	b138      	cbz	r0, 1a000c9c <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
1a000c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c90:	4b34      	ldr	r3, [pc, #208]	; (1a000d64 <xQueueReceive+0x158>)
1a000c92:	601a      	str	r2, [r3, #0]
1a000c94:	f3bf 8f4f 	dsb	sy
1a000c98:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000c9c:	f001 f97e 	bl	1a001f9c <vPortExitCritical>
				return pdPASS;
1a000ca0:	2001      	movs	r0, #1
}
1a000ca2:	b005      	add	sp, #20
1a000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000ca6:	f001 f979 	bl	1a001f9c <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000caa:	2000      	movs	r0, #0
1a000cac:	e7f9      	b.n	1a000ca2 <xQueueReceive+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000cae:	a802      	add	r0, sp, #8
1a000cb0:	f000 fdf8 	bl	1a0018a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000cb4:	2701      	movs	r7, #1
1a000cb6:	e016      	b.n	1a000ce6 <xQueueReceive+0xda>
		prvLockQueue( pxQueue );
1a000cb8:	2300      	movs	r3, #0
1a000cba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000cbe:	e01e      	b.n	1a000cfe <xQueueReceive+0xf2>
1a000cc0:	2300      	movs	r3, #0
1a000cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000cc6:	e020      	b.n	1a000d0a <xQueueReceive+0xfe>
				prvUnlockQueue( pxQueue );
1a000cc8:	4620      	mov	r0, r4
1a000cca:	f7ff fd92 	bl	1a0007f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000cce:	f000 fc8b 	bl	1a0015e8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000cd2:	f001 f941 	bl	1a001f58 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000cd6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000cd8:	2d00      	cmp	r5, #0
1a000cda:	d1ca      	bne.n	1a000c72 <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000cdc:	9b01      	ldr	r3, [sp, #4]
1a000cde:	2b00      	cmp	r3, #0
1a000ce0:	d0e1      	beq.n	1a000ca6 <xQueueReceive+0x9a>
				else if( xEntryTimeSet == pdFALSE )
1a000ce2:	2f00      	cmp	r7, #0
1a000ce4:	d0e3      	beq.n	1a000cae <xQueueReceive+0xa2>
		taskEXIT_CRITICAL();
1a000ce6:	f001 f959 	bl	1a001f9c <vPortExitCritical>
		vTaskSuspendAll();
1a000cea:	f000 fbdf 	bl	1a0014ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000cee:	f001 f933 	bl	1a001f58 <vPortEnterCritical>
1a000cf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000cf6:	b25b      	sxtb	r3, r3
1a000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000cfc:	d0dc      	beq.n	1a000cb8 <xQueueReceive+0xac>
1a000cfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000d02:	b25b      	sxtb	r3, r3
1a000d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d08:	d0da      	beq.n	1a000cc0 <xQueueReceive+0xb4>
1a000d0a:	f001 f947 	bl	1a001f9c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000d0e:	a901      	add	r1, sp, #4
1a000d10:	a802      	add	r0, sp, #8
1a000d12:	f000 fdd3 	bl	1a0018bc <xTaskCheckForTimeOut>
1a000d16:	b9c8      	cbnz	r0, 1a000d4c <xQueueReceive+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000d18:	4620      	mov	r0, r4
1a000d1a:	f7ff fd10 	bl	1a00073e <prvIsQueueEmpty>
1a000d1e:	2800      	cmp	r0, #0
1a000d20:	d0d2      	beq.n	1a000cc8 <xQueueReceive+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000d22:	9901      	ldr	r1, [sp, #4]
1a000d24:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d28:	f000 fd42 	bl	1a0017b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000d2c:	4620      	mov	r0, r4
1a000d2e:	f7ff fd60 	bl	1a0007f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000d32:	f000 fc59 	bl	1a0015e8 <xTaskResumeAll>
1a000d36:	2800      	cmp	r0, #0
1a000d38:	d1cb      	bne.n	1a000cd2 <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
1a000d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d3e:	4b09      	ldr	r3, [pc, #36]	; (1a000d64 <xQueueReceive+0x158>)
1a000d40:	601a      	str	r2, [r3, #0]
1a000d42:	f3bf 8f4f 	dsb	sy
1a000d46:	f3bf 8f6f 	isb	sy
1a000d4a:	e7c2      	b.n	1a000cd2 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
1a000d4c:	4620      	mov	r0, r4
1a000d4e:	f7ff fd50 	bl	1a0007f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000d52:	f000 fc49 	bl	1a0015e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000d56:	4620      	mov	r0, r4
1a000d58:	f7ff fcf1 	bl	1a00073e <prvIsQueueEmpty>
1a000d5c:	2800      	cmp	r0, #0
1a000d5e:	d0b8      	beq.n	1a000cd2 <xQueueReceive+0xc6>
				return errQUEUE_EMPTY;
1a000d60:	2000      	movs	r0, #0
1a000d62:	e79e      	b.n	1a000ca2 <xQueueReceive+0x96>
1a000d64:	e000ed04 	.word	0xe000ed04

1a000d68 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000d68:	2300      	movs	r3, #0
1a000d6a:	2b07      	cmp	r3, #7
1a000d6c:	d80c      	bhi.n	1a000d88 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000d6e:	4a07      	ldr	r2, [pc, #28]	; (1a000d8c <vQueueAddToRegistry+0x24>)
1a000d70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000d74:	b10a      	cbz	r2, 1a000d7a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000d76:	3301      	adds	r3, #1
1a000d78:	e7f7      	b.n	1a000d6a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000d7a:	4a04      	ldr	r2, [pc, #16]	; (1a000d8c <vQueueAddToRegistry+0x24>)
1a000d7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000d80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000d84:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000d86:	4770      	bx	lr
1a000d88:	4770      	bx	lr
1a000d8a:	bf00      	nop
1a000d8c:	10002bcc 	.word	0x10002bcc

1a000d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000d90:	b570      	push	{r4, r5, r6, lr}
1a000d92:	4604      	mov	r4, r0
1a000d94:	460d      	mov	r5, r1
1a000d96:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000d98:	f001 f8de 	bl	1a001f58 <vPortEnterCritical>
1a000d9c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000da0:	b25b      	sxtb	r3, r3
1a000da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000da6:	d00d      	beq.n	1a000dc4 <vQueueWaitForMessageRestricted+0x34>
1a000da8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000dac:	b25b      	sxtb	r3, r3
1a000dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000db2:	d00b      	beq.n	1a000dcc <vQueueWaitForMessageRestricted+0x3c>
1a000db4:	f001 f8f2 	bl	1a001f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000dba:	b15b      	cbz	r3, 1a000dd4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000dbc:	4620      	mov	r0, r4
1a000dbe:	f7ff fd18 	bl	1a0007f2 <prvUnlockQueue>
1a000dc2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000dc4:	2300      	movs	r3, #0
1a000dc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000dca:	e7ed      	b.n	1a000da8 <vQueueWaitForMessageRestricted+0x18>
1a000dcc:	2300      	movs	r3, #0
1a000dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dd2:	e7ef      	b.n	1a000db4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000dd4:	4632      	mov	r2, r6
1a000dd6:	4629      	mov	r1, r5
1a000dd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ddc:	f000 fd00 	bl	1a0017e0 <vTaskPlaceOnEventListRestricted>
1a000de0:	e7ec      	b.n	1a000dbc <vQueueWaitForMessageRestricted+0x2c>

1a000de2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000de2:	f100 0308 	add.w	r3, r0, #8
1a000de6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000dec:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000dee:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000df0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000df2:	2300      	movs	r3, #0
1a000df4:	6003      	str	r3, [r0, #0]
1a000df6:	4770      	bx	lr

1a000df8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000df8:	2300      	movs	r3, #0
1a000dfa:	6103      	str	r3, [r0, #16]
1a000dfc:	4770      	bx	lr

1a000dfe <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000dfe:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000e00:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000e02:	689a      	ldr	r2, [r3, #8]
1a000e04:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000e06:	689a      	ldr	r2, [r3, #8]
1a000e08:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000e0a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000e0c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000e0e:	6803      	ldr	r3, [r0, #0]
1a000e10:	3301      	adds	r3, #1
1a000e12:	6003      	str	r3, [r0, #0]
1a000e14:	4770      	bx	lr

1a000e16 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000e16:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000e18:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000e1a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000e1e:	d002      	beq.n	1a000e26 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000e20:	f100 0208 	add.w	r2, r0, #8
1a000e24:	e002      	b.n	1a000e2c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000e26:	6902      	ldr	r2, [r0, #16]
1a000e28:	e004      	b.n	1a000e34 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000e2a:	461a      	mov	r2, r3
1a000e2c:	6853      	ldr	r3, [r2, #4]
1a000e2e:	681c      	ldr	r4, [r3, #0]
1a000e30:	42a5      	cmp	r5, r4
1a000e32:	d2fa      	bcs.n	1a000e2a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000e34:	6853      	ldr	r3, [r2, #4]
1a000e36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000e38:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000e3a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000e3c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000e3e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000e40:	6803      	ldr	r3, [r0, #0]
1a000e42:	3301      	adds	r3, #1
1a000e44:	6003      	str	r3, [r0, #0]
}
1a000e46:	bc30      	pop	{r4, r5}
1a000e48:	4770      	bx	lr

1a000e4a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000e4a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000e4c:	6842      	ldr	r2, [r0, #4]
1a000e4e:	6881      	ldr	r1, [r0, #8]
1a000e50:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000e52:	6882      	ldr	r2, [r0, #8]
1a000e54:	6841      	ldr	r1, [r0, #4]
1a000e56:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000e58:	685a      	ldr	r2, [r3, #4]
1a000e5a:	4290      	cmp	r0, r2
1a000e5c:	d006      	beq.n	1a000e6c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000e5e:	2200      	movs	r2, #0
1a000e60:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000e62:	681a      	ldr	r2, [r3, #0]
1a000e64:	3a01      	subs	r2, #1
1a000e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000e68:	6818      	ldr	r0, [r3, #0]
}
1a000e6a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000e6c:	6882      	ldr	r2, [r0, #8]
1a000e6e:	605a      	str	r2, [r3, #4]
1a000e70:	e7f5      	b.n	1a000e5e <uxListRemove+0x14>
1a000e72:	Address 0x000000001a000e72 is out of bounds.


1a000e74 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000e74:	4b03      	ldr	r3, [pc, #12]	; (1a000e84 <vApplicationGetIdleTaskMemory+0x10>)
1a000e76:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000e78:	4b03      	ldr	r3, [pc, #12]	; (1a000e88 <vApplicationGetIdleTaskMemory+0x14>)
1a000e7a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000e7c:	2364      	movs	r3, #100	; 0x64
1a000e7e:	6013      	str	r3, [r2, #0]
1a000e80:	4770      	bx	lr
1a000e82:	bf00      	nop
1a000e84:	10002894 	.word	0x10002894
1a000e88:	100020c4 	.word	0x100020c4

1a000e8c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000e8c:	4b03      	ldr	r3, [pc, #12]	; (1a000e9c <vApplicationGetTimerTaskMemory+0x10>)
1a000e8e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000e90:	4b03      	ldr	r3, [pc, #12]	; (1a000ea0 <vApplicationGetTimerTaskMemory+0x14>)
1a000e92:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000e94:	f44f 73c8 	mov.w	r3, #400	; 0x190
1a000e98:	6013      	str	r3, [r2, #0]
1a000e9a:	4770      	bx	lr
1a000e9c:	100028f4 	.word	0x100028f4
1a000ea0:	10002254 	.word	0x10002254

1a000ea4 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a000ea4:	b510      	push	{r4, lr}
1a000ea6:	b082      	sub	sp, #8
1a000ea8:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a000eaa:	9001      	str	r0, [sp, #4]
1a000eac:	2300      	movs	r3, #0
1a000eae:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a000eb0:	f001 f852 	bl	1a001f58 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a000eb4:	9901      	ldr	r1, [sp, #4]
1a000eb6:	4622      	mov	r2, r4
1a000eb8:	4804      	ldr	r0, [pc, #16]	; (1a000ecc <vAssertCalled+0x28>)
1a000eba:	f003 fa13 	bl	1a0042e4 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a000ebe:	9b00      	ldr	r3, [sp, #0]
1a000ec0:	2b00      	cmp	r3, #0
1a000ec2:	d0fc      	beq.n	1a000ebe <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a000ec4:	f001 f86a 	bl	1a001f9c <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a000ec8:	b002      	add	sp, #8
1a000eca:	bd10      	pop	{r4, pc}
1a000ecc:	1a004c98 	.word	0x1a004c98

1a000ed0 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a000ed0:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a000ed2:	4804      	ldr	r0, [pc, #16]	; (1a000ee4 <vApplicationMallocFailedHook+0x14>)
1a000ed4:	f003 fa90 	bl	1a0043f8 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a000ed8:	4903      	ldr	r1, [pc, #12]	; (1a000ee8 <vApplicationMallocFailedHook+0x18>)
1a000eda:	202c      	movs	r0, #44	; 0x2c
1a000edc:	f7ff ffe2 	bl	1a000ea4 <vAssertCalled>
1a000ee0:	bd08      	pop	{r3, pc}
1a000ee2:	bf00      	nop
1a000ee4:	1a004c24 	.word	0x1a004c24
1a000ee8:	1a004c48 	.word	0x1a004c48

1a000eec <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a000eec:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a000eee:	4804      	ldr	r0, [pc, #16]	; (1a000f00 <vApplicationStackOverflowHook+0x14>)
1a000ef0:	f003 f9f8 	bl	1a0042e4 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a000ef4:	4903      	ldr	r1, [pc, #12]	; (1a000f04 <vApplicationStackOverflowHook+0x18>)
1a000ef6:	2050      	movs	r0, #80	; 0x50
1a000ef8:	f7ff ffd4 	bl	1a000ea4 <vAssertCalled>
1a000efc:	bd08      	pop	{r3, pc}
1a000efe:	bf00      	nop
1a000f00:	1a004c68 	.word	0x1a004c68
1a000f04:	1a004c48 	.word	0x1a004c48

1a000f08 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000f08:	4b0a      	ldr	r3, [pc, #40]	; (1a000f34 <prvResetNextTaskUnblockTime+0x2c>)
1a000f0a:	681b      	ldr	r3, [r3, #0]
1a000f0c:	681b      	ldr	r3, [r3, #0]
1a000f0e:	b94b      	cbnz	r3, 1a000f24 <prvResetNextTaskUnblockTime+0x1c>
1a000f10:	2301      	movs	r3, #1
1a000f12:	b94b      	cbnz	r3, 1a000f28 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000f14:	4b07      	ldr	r3, [pc, #28]	; (1a000f34 <prvResetNextTaskUnblockTime+0x2c>)
1a000f16:	681b      	ldr	r3, [r3, #0]
1a000f18:	68db      	ldr	r3, [r3, #12]
1a000f1a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000f1c:	685a      	ldr	r2, [r3, #4]
1a000f1e:	4b06      	ldr	r3, [pc, #24]	; (1a000f38 <prvResetNextTaskUnblockTime+0x30>)
1a000f20:	601a      	str	r2, [r3, #0]
1a000f22:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000f24:	2300      	movs	r3, #0
1a000f26:	e7f4      	b.n	1a000f12 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
1a000f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000f2c:	4b02      	ldr	r3, [pc, #8]	; (1a000f38 <prvResetNextTaskUnblockTime+0x30>)
1a000f2e:	601a      	str	r2, [r3, #0]
1a000f30:	4770      	bx	lr
1a000f32:	bf00      	nop
1a000f34:	10002958 	.word	0x10002958
1a000f38:	10002a2c 	.word	0x10002a2c

1a000f3c <prvInitialiseNewTask>:
{
1a000f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000f40:	4681      	mov	r9, r0
1a000f42:	460d      	mov	r5, r1
1a000f44:	4617      	mov	r7, r2
1a000f46:	469a      	mov	sl, r3
1a000f48:	9e08      	ldr	r6, [sp, #32]
1a000f4a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000f4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000f50:	0092      	lsls	r2, r2, #2
1a000f52:	21a5      	movs	r1, #165	; 0xa5
1a000f54:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000f56:	f002 fd55 	bl	1a003a04 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000f5c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000f60:	3a01      	subs	r2, #1
1a000f62:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000f66:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000f6a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000f6c:	2300      	movs	r3, #0
1a000f6e:	2b0f      	cmp	r3, #15
1a000f70:	d807      	bhi.n	1a000f82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000f72:	5ce9      	ldrb	r1, [r5, r3]
1a000f74:	18e2      	adds	r2, r4, r3
1a000f76:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000f7a:	5cea      	ldrb	r2, [r5, r3]
1a000f7c:	b10a      	cbz	r2, 1a000f82 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000f7e:	3301      	adds	r3, #1
1a000f80:	e7f5      	b.n	1a000f6e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000f82:	2300      	movs	r3, #0
1a000f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000f88:	2e06      	cmp	r6, #6
1a000f8a:	d900      	bls.n	1a000f8e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000f8c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000f8e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000f90:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000f92:	2500      	movs	r5, #0
1a000f94:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000f96:	1d20      	adds	r0, r4, #4
1a000f98:	f7ff ff2e 	bl	1a000df8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000f9c:	f104 0018 	add.w	r0, r4, #24
1a000fa0:	f7ff ff2a 	bl	1a000df8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000fa4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000fa6:	f1c6 0607 	rsb	r6, r6, #7
1a000faa:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000fac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a000fae:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000fb0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000fb4:	4652      	mov	r2, sl
1a000fb6:	4649      	mov	r1, r9
1a000fb8:	4638      	mov	r0, r7
1a000fba:	f000 ff8d 	bl	1a001ed8 <pxPortInitialiseStack>
1a000fbe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000fc0:	f1b8 0f00 	cmp.w	r8, #0
1a000fc4:	d001      	beq.n	1a000fca <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000fc6:	f8c8 4000 	str.w	r4, [r8]
1a000fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000fce:	Address 0x000000001a000fce is out of bounds.


1a000fd0 <prvInitialiseTaskLists>:
{
1a000fd0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000fd2:	2400      	movs	r4, #0
1a000fd4:	e007      	b.n	1a000fe6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000fd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000fda:	0093      	lsls	r3, r2, #2
1a000fdc:	480e      	ldr	r0, [pc, #56]	; (1a001018 <prvInitialiseTaskLists+0x48>)
1a000fde:	4418      	add	r0, r3
1a000fe0:	f7ff feff 	bl	1a000de2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000fe4:	3401      	adds	r4, #1
1a000fe6:	2c06      	cmp	r4, #6
1a000fe8:	d9f5      	bls.n	1a000fd6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a000fea:	4d0c      	ldr	r5, [pc, #48]	; (1a00101c <prvInitialiseTaskLists+0x4c>)
1a000fec:	4628      	mov	r0, r5
1a000fee:	f7ff fef8 	bl	1a000de2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000ff2:	4c0b      	ldr	r4, [pc, #44]	; (1a001020 <prvInitialiseTaskLists+0x50>)
1a000ff4:	4620      	mov	r0, r4
1a000ff6:	f7ff fef4 	bl	1a000de2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000ffa:	480a      	ldr	r0, [pc, #40]	; (1a001024 <prvInitialiseTaskLists+0x54>)
1a000ffc:	f7ff fef1 	bl	1a000de2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001000:	4809      	ldr	r0, [pc, #36]	; (1a001028 <prvInitialiseTaskLists+0x58>)
1a001002:	f7ff feee 	bl	1a000de2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001006:	4809      	ldr	r0, [pc, #36]	; (1a00102c <prvInitialiseTaskLists+0x5c>)
1a001008:	f7ff feeb 	bl	1a000de2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00100c:	4b08      	ldr	r3, [pc, #32]	; (1a001030 <prvInitialiseTaskLists+0x60>)
1a00100e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001010:	4b08      	ldr	r3, [pc, #32]	; (1a001034 <prvInitialiseTaskLists+0x64>)
1a001012:	601c      	str	r4, [r3, #0]
1a001014:	bd38      	pop	{r3, r4, r5, pc}
1a001016:	bf00      	nop
1a001018:	10002960 	.word	0x10002960
1a00101c:	10002a04 	.word	0x10002a04
1a001020:	10002a18 	.word	0x10002a18
1a001024:	10002a34 	.word	0x10002a34
1a001028:	10002a60 	.word	0x10002a60
1a00102c:	10002a4c 	.word	0x10002a4c
1a001030:	10002958 	.word	0x10002958
1a001034:	1000295c 	.word	0x1000295c

1a001038 <prvAddNewTaskToReadyList>:
{
1a001038:	b510      	push	{r4, lr}
1a00103a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00103c:	f000 ff8c 	bl	1a001f58 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001040:	4a21      	ldr	r2, [pc, #132]	; (1a0010c8 <prvAddNewTaskToReadyList+0x90>)
1a001042:	6813      	ldr	r3, [r2, #0]
1a001044:	3301      	adds	r3, #1
1a001046:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001048:	4b20      	ldr	r3, [pc, #128]	; (1a0010cc <prvAddNewTaskToReadyList+0x94>)
1a00104a:	681b      	ldr	r3, [r3, #0]
1a00104c:	2b00      	cmp	r3, #0
1a00104e:	d032      	beq.n	1a0010b6 <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
1a001050:	4b1f      	ldr	r3, [pc, #124]	; (1a0010d0 <prvAddNewTaskToReadyList+0x98>)
1a001052:	681b      	ldr	r3, [r3, #0]
1a001054:	b93b      	cbnz	r3, 1a001066 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001056:	4b1d      	ldr	r3, [pc, #116]	; (1a0010cc <prvAddNewTaskToReadyList+0x94>)
1a001058:	681b      	ldr	r3, [r3, #0]
1a00105a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00105c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00105e:	429a      	cmp	r2, r3
1a001060:	d801      	bhi.n	1a001066 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
1a001062:	4b1a      	ldr	r3, [pc, #104]	; (1a0010cc <prvAddNewTaskToReadyList+0x94>)
1a001064:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
1a001066:	4a1b      	ldr	r2, [pc, #108]	; (1a0010d4 <prvAddNewTaskToReadyList+0x9c>)
1a001068:	6813      	ldr	r3, [r2, #0]
1a00106a:	3301      	adds	r3, #1
1a00106c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a00106e:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001072:	2201      	movs	r2, #1
1a001074:	409a      	lsls	r2, r3
1a001076:	4918      	ldr	r1, [pc, #96]	; (1a0010d8 <prvAddNewTaskToReadyList+0xa0>)
1a001078:	6808      	ldr	r0, [r1, #0]
1a00107a:	4302      	orrs	r2, r0
1a00107c:	600a      	str	r2, [r1, #0]
1a00107e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001082:	009a      	lsls	r2, r3, #2
1a001084:	1d21      	adds	r1, r4, #4
1a001086:	4815      	ldr	r0, [pc, #84]	; (1a0010dc <prvAddNewTaskToReadyList+0xa4>)
1a001088:	4410      	add	r0, r2
1a00108a:	f7ff feb8 	bl	1a000dfe <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00108e:	f000 ff85 	bl	1a001f9c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001092:	4b0f      	ldr	r3, [pc, #60]	; (1a0010d0 <prvAddNewTaskToReadyList+0x98>)
1a001094:	681b      	ldr	r3, [r3, #0]
1a001096:	b16b      	cbz	r3, 1a0010b4 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001098:	4b0c      	ldr	r3, [pc, #48]	; (1a0010cc <prvAddNewTaskToReadyList+0x94>)
1a00109a:	681b      	ldr	r3, [r3, #0]
1a00109c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00109e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010a0:	429a      	cmp	r2, r3
1a0010a2:	d207      	bcs.n	1a0010b4 <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
1a0010a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010a8:	4b0d      	ldr	r3, [pc, #52]	; (1a0010e0 <prvAddNewTaskToReadyList+0xa8>)
1a0010aa:	601a      	str	r2, [r3, #0]
1a0010ac:	f3bf 8f4f 	dsb	sy
1a0010b0:	f3bf 8f6f 	isb	sy
1a0010b4:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
1a0010b6:	4b05      	ldr	r3, [pc, #20]	; (1a0010cc <prvAddNewTaskToReadyList+0x94>)
1a0010b8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0010ba:	6813      	ldr	r3, [r2, #0]
1a0010bc:	2b01      	cmp	r3, #1
1a0010be:	d1d2      	bne.n	1a001066 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
1a0010c0:	f7ff ff86 	bl	1a000fd0 <prvInitialiseTaskLists>
1a0010c4:	e7cf      	b.n	1a001066 <prvAddNewTaskToReadyList+0x2e>
1a0010c6:	bf00      	nop
1a0010c8:	100029ec 	.word	0x100029ec
1a0010cc:	10002954 	.word	0x10002954
1a0010d0:	10002a48 	.word	0x10002a48
1a0010d4:	100029fc 	.word	0x100029fc
1a0010d8:	10002a00 	.word	0x10002a00
1a0010dc:	10002960 	.word	0x10002960
1a0010e0:	e000ed04 	.word	0xe000ed04

1a0010e4 <prvDeleteTCB>:
	{
1a0010e4:	b510      	push	{r4, lr}
1a0010e6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0010e8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0010ec:	b163      	cbz	r3, 1a001108 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0010ee:	2b01      	cmp	r3, #1
1a0010f0:	d011      	beq.n	1a001116 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0010f2:	2b02      	cmp	r3, #2
1a0010f4:	d012      	beq.n	1a00111c <prvDeleteTCB+0x38>
1a0010f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010fa:	f383 8811 	msr	BASEPRI, r3
1a0010fe:	f3bf 8f6f 	isb	sy
1a001102:	f3bf 8f4f 	dsb	sy
1a001106:	e7fe      	b.n	1a001106 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a001108:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00110a:	f7ff fad1 	bl	1a0006b0 <vPortFree>
				vPortFree( pxTCB );
1a00110e:	4620      	mov	r0, r4
1a001110:	f7ff face 	bl	1a0006b0 <vPortFree>
1a001114:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a001116:	f7ff facb 	bl	1a0006b0 <vPortFree>
1a00111a:	bd10      	pop	{r4, pc}
1a00111c:	bd10      	pop	{r4, pc}
1a00111e:	Address 0x000000001a00111e is out of bounds.


1a001120 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001120:	4b0f      	ldr	r3, [pc, #60]	; (1a001160 <prvCheckTasksWaitingTermination+0x40>)
1a001122:	681b      	ldr	r3, [r3, #0]
1a001124:	b1d3      	cbz	r3, 1a00115c <prvCheckTasksWaitingTermination+0x3c>
{
1a001126:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001128:	f000 ff16 	bl	1a001f58 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00112c:	4b0d      	ldr	r3, [pc, #52]	; (1a001164 <prvCheckTasksWaitingTermination+0x44>)
1a00112e:	68db      	ldr	r3, [r3, #12]
1a001130:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001132:	1d20      	adds	r0, r4, #4
1a001134:	f7ff fe89 	bl	1a000e4a <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001138:	4a0b      	ldr	r2, [pc, #44]	; (1a001168 <prvCheckTasksWaitingTermination+0x48>)
1a00113a:	6813      	ldr	r3, [r2, #0]
1a00113c:	3b01      	subs	r3, #1
1a00113e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001140:	4a07      	ldr	r2, [pc, #28]	; (1a001160 <prvCheckTasksWaitingTermination+0x40>)
1a001142:	6813      	ldr	r3, [r2, #0]
1a001144:	3b01      	subs	r3, #1
1a001146:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001148:	f000 ff28 	bl	1a001f9c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a00114c:	4620      	mov	r0, r4
1a00114e:	f7ff ffc9 	bl	1a0010e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001152:	4b03      	ldr	r3, [pc, #12]	; (1a001160 <prvCheckTasksWaitingTermination+0x40>)
1a001154:	681b      	ldr	r3, [r3, #0]
1a001156:	2b00      	cmp	r3, #0
1a001158:	d1e6      	bne.n	1a001128 <prvCheckTasksWaitingTermination+0x8>
}
1a00115a:	bd10      	pop	{r4, pc}
1a00115c:	4770      	bx	lr
1a00115e:	bf00      	nop
1a001160:	100029f0 	.word	0x100029f0
1a001164:	10002a60 	.word	0x10002a60
1a001168:	100029ec 	.word	0x100029ec

1a00116c <prvIdleTask>:
{
1a00116c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00116e:	f7ff ffd7 	bl	1a001120 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001172:	4b06      	ldr	r3, [pc, #24]	; (1a00118c <prvIdleTask+0x20>)
1a001174:	681b      	ldr	r3, [r3, #0]
1a001176:	2b01      	cmp	r3, #1
1a001178:	d9f9      	bls.n	1a00116e <prvIdleTask+0x2>
				taskYIELD();
1a00117a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00117e:	4b04      	ldr	r3, [pc, #16]	; (1a001190 <prvIdleTask+0x24>)
1a001180:	601a      	str	r2, [r3, #0]
1a001182:	f3bf 8f4f 	dsb	sy
1a001186:	f3bf 8f6f 	isb	sy
1a00118a:	e7f0      	b.n	1a00116e <prvIdleTask+0x2>
1a00118c:	10002960 	.word	0x10002960
1a001190:	e000ed04 	.word	0xe000ed04

1a001194 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001194:	b570      	push	{r4, r5, r6, lr}
1a001196:	4604      	mov	r4, r0
1a001198:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00119a:	4b1d      	ldr	r3, [pc, #116]	; (1a001210 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00119c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00119e:	4b1d      	ldr	r3, [pc, #116]	; (1a001214 <prvAddCurrentTaskToDelayedList+0x80>)
1a0011a0:	6818      	ldr	r0, [r3, #0]
1a0011a2:	3004      	adds	r0, #4
1a0011a4:	f7ff fe51 	bl	1a000e4a <uxListRemove>
1a0011a8:	b950      	cbnz	r0, 1a0011c0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0011aa:	4b1a      	ldr	r3, [pc, #104]	; (1a001214 <prvAddCurrentTaskToDelayedList+0x80>)
1a0011ac:	681b      	ldr	r3, [r3, #0]
1a0011ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0011b0:	2301      	movs	r3, #1
1a0011b2:	fa03 f202 	lsl.w	r2, r3, r2
1a0011b6:	4918      	ldr	r1, [pc, #96]	; (1a001218 <prvAddCurrentTaskToDelayedList+0x84>)
1a0011b8:	680b      	ldr	r3, [r1, #0]
1a0011ba:	ea23 0302 	bic.w	r3, r3, r2
1a0011be:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0011c0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0011c4:	d013      	beq.n	1a0011ee <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0011c6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0011c8:	4b12      	ldr	r3, [pc, #72]	; (1a001214 <prvAddCurrentTaskToDelayedList+0x80>)
1a0011ca:	681b      	ldr	r3, [r3, #0]
1a0011cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0011ce:	42a5      	cmp	r5, r4
1a0011d0:	d816      	bhi.n	1a001200 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0011d2:	4b12      	ldr	r3, [pc, #72]	; (1a00121c <prvAddCurrentTaskToDelayedList+0x88>)
1a0011d4:	6818      	ldr	r0, [r3, #0]
1a0011d6:	4b0f      	ldr	r3, [pc, #60]	; (1a001214 <prvAddCurrentTaskToDelayedList+0x80>)
1a0011d8:	6819      	ldr	r1, [r3, #0]
1a0011da:	3104      	adds	r1, #4
1a0011dc:	f7ff fe1b 	bl	1a000e16 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0011e0:	4b0f      	ldr	r3, [pc, #60]	; (1a001220 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0011e2:	681b      	ldr	r3, [r3, #0]
1a0011e4:	429c      	cmp	r4, r3
1a0011e6:	d201      	bcs.n	1a0011ec <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0011e8:	4b0d      	ldr	r3, [pc, #52]	; (1a001220 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0011ea:	601c      	str	r4, [r3, #0]
1a0011ec:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0011ee:	2e00      	cmp	r6, #0
1a0011f0:	d0e9      	beq.n	1a0011c6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0011f2:	4b08      	ldr	r3, [pc, #32]	; (1a001214 <prvAddCurrentTaskToDelayedList+0x80>)
1a0011f4:	6819      	ldr	r1, [r3, #0]
1a0011f6:	3104      	adds	r1, #4
1a0011f8:	480a      	ldr	r0, [pc, #40]	; (1a001224 <prvAddCurrentTaskToDelayedList+0x90>)
1a0011fa:	f7ff fe00 	bl	1a000dfe <vListInsertEnd>
1a0011fe:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001200:	4b09      	ldr	r3, [pc, #36]	; (1a001228 <prvAddCurrentTaskToDelayedList+0x94>)
1a001202:	6818      	ldr	r0, [r3, #0]
1a001204:	4b03      	ldr	r3, [pc, #12]	; (1a001214 <prvAddCurrentTaskToDelayedList+0x80>)
1a001206:	6819      	ldr	r1, [r3, #0]
1a001208:	3104      	adds	r1, #4
1a00120a:	f7ff fe04 	bl	1a000e16 <vListInsert>
1a00120e:	bd70      	pop	{r4, r5, r6, pc}
1a001210:	10002a74 	.word	0x10002a74
1a001214:	10002954 	.word	0x10002954
1a001218:	10002a00 	.word	0x10002a00
1a00121c:	10002958 	.word	0x10002958
1a001220:	10002a2c 	.word	0x10002a2c
1a001224:	10002a4c 	.word	0x10002a4c
1a001228:	1000295c 	.word	0x1000295c

1a00122c <xTaskCreateStatic>:
	{
1a00122c:	b570      	push	{r4, r5, r6, lr}
1a00122e:	b086      	sub	sp, #24
1a001230:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001232:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001234:	b175      	cbz	r5, 1a001254 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001236:	b1b4      	cbz	r4, 1a001266 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001238:	2660      	movs	r6, #96	; 0x60
1a00123a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00123c:	9e04      	ldr	r6, [sp, #16]
1a00123e:	2e60      	cmp	r6, #96	; 0x60
1a001240:	d01a      	beq.n	1a001278 <xTaskCreateStatic+0x4c>
1a001242:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001246:	f383 8811 	msr	BASEPRI, r3
1a00124a:	f3bf 8f6f 	isb	sy
1a00124e:	f3bf 8f4f 	dsb	sy
1a001252:	e7fe      	b.n	1a001252 <xTaskCreateStatic+0x26>
1a001254:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001258:	f383 8811 	msr	BASEPRI, r3
1a00125c:	f3bf 8f6f 	isb	sy
1a001260:	f3bf 8f4f 	dsb	sy
1a001264:	e7fe      	b.n	1a001264 <xTaskCreateStatic+0x38>
1a001266:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00126a:	f383 8811 	msr	BASEPRI, r3
1a00126e:	f3bf 8f6f 	isb	sy
1a001272:	f3bf 8f4f 	dsb	sy
1a001276:	e7fe      	b.n	1a001276 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001278:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00127a:	2502      	movs	r5, #2
1a00127c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001280:	2500      	movs	r5, #0
1a001282:	9503      	str	r5, [sp, #12]
1a001284:	9402      	str	r4, [sp, #8]
1a001286:	ad05      	add	r5, sp, #20
1a001288:	9501      	str	r5, [sp, #4]
1a00128a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00128c:	9500      	str	r5, [sp, #0]
1a00128e:	f7ff fe55 	bl	1a000f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001292:	4620      	mov	r0, r4
1a001294:	f7ff fed0 	bl	1a001038 <prvAddNewTaskToReadyList>
	}
1a001298:	9805      	ldr	r0, [sp, #20]
1a00129a:	b006      	add	sp, #24
1a00129c:	bd70      	pop	{r4, r5, r6, pc}

1a00129e <xTaskCreate>:
	{
1a00129e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0012a2:	b085      	sub	sp, #20
1a0012a4:	4606      	mov	r6, r0
1a0012a6:	460f      	mov	r7, r1
1a0012a8:	4615      	mov	r5, r2
1a0012aa:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0012ac:	0090      	lsls	r0, r2, #2
1a0012ae:	f7ff f977 	bl	1a0005a0 <pvPortMalloc>
			if( pxStack != NULL )
1a0012b2:	b310      	cbz	r0, 1a0012fa <xTaskCreate+0x5c>
1a0012b4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0012b6:	2060      	movs	r0, #96	; 0x60
1a0012b8:	f7ff f972 	bl	1a0005a0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0012bc:	4604      	mov	r4, r0
1a0012be:	b1c0      	cbz	r0, 1a0012f2 <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
1a0012c0:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0012c4:	b1dc      	cbz	r4, 1a0012fe <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0012c6:	2300      	movs	r3, #0
1a0012c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0012cc:	9303      	str	r3, [sp, #12]
1a0012ce:	9402      	str	r4, [sp, #8]
1a0012d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0012d2:	9301      	str	r3, [sp, #4]
1a0012d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0012d6:	9300      	str	r3, [sp, #0]
1a0012d8:	4643      	mov	r3, r8
1a0012da:	462a      	mov	r2, r5
1a0012dc:	4639      	mov	r1, r7
1a0012de:	4630      	mov	r0, r6
1a0012e0:	f7ff fe2c 	bl	1a000f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0012e4:	4620      	mov	r0, r4
1a0012e6:	f7ff fea7 	bl	1a001038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0012ea:	2001      	movs	r0, #1
	}
1a0012ec:	b005      	add	sp, #20
1a0012ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0012f2:	4648      	mov	r0, r9
1a0012f4:	f7ff f9dc 	bl	1a0006b0 <vPortFree>
1a0012f8:	e7e4      	b.n	1a0012c4 <xTaskCreate+0x26>
				pxNewTCB = NULL;
1a0012fa:	2400      	movs	r4, #0
1a0012fc:	e7e2      	b.n	1a0012c4 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0012fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001302:	e7f3      	b.n	1a0012ec <xTaskCreate+0x4e>

1a001304 <vTaskPrioritySet>:
	{
1a001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1a001306:	2906      	cmp	r1, #6
1a001308:	d908      	bls.n	1a00131c <vTaskPrioritySet+0x18>
1a00130a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00130e:	f383 8811 	msr	BASEPRI, r3
1a001312:	f3bf 8f6f 	isb	sy
1a001316:	f3bf 8f4f 	dsb	sy
1a00131a:	e7fe      	b.n	1a00131a <vTaskPrioritySet+0x16>
1a00131c:	460d      	mov	r5, r1
1a00131e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a001320:	f000 fe1a 	bl	1a001f58 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
1a001324:	b90c      	cbnz	r4, 1a00132a <vTaskPrioritySet+0x26>
1a001326:	4b2d      	ldr	r3, [pc, #180]	; (1a0013dc <vTaskPrioritySet+0xd8>)
1a001328:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
1a00132a:	6d23      	ldr	r3, [r4, #80]	; 0x50
			if( uxCurrentBasePriority != uxNewPriority )
1a00132c:	429d      	cmp	r5, r3
1a00132e:	d044      	beq.n	1a0013ba <vTaskPrioritySet+0xb6>
				if( uxNewPriority > uxCurrentBasePriority )
1a001330:	d946      	bls.n	1a0013c0 <vTaskPrioritySet+0xbc>
					if( pxTCB != pxCurrentTCB )
1a001332:	4a2a      	ldr	r2, [pc, #168]	; (1a0013dc <vTaskPrioritySet+0xd8>)
1a001334:	6812      	ldr	r2, [r2, #0]
1a001336:	4294      	cmp	r4, r2
1a001338:	d048      	beq.n	1a0013cc <vTaskPrioritySet+0xc8>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1a00133a:	4a28      	ldr	r2, [pc, #160]	; (1a0013dc <vTaskPrioritySet+0xd8>)
1a00133c:	6812      	ldr	r2, [r2, #0]
1a00133e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001340:	4295      	cmp	r5, r2
1a001342:	d245      	bcs.n	1a0013d0 <vTaskPrioritySet+0xcc>
	BaseType_t xYieldRequired = pdFALSE;
1a001344:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1a001346:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1a001348:	42bb      	cmp	r3, r7
1a00134a:	d100      	bne.n	1a00134e <vTaskPrioritySet+0x4a>
						pxTCB->uxPriority = uxNewPriority;
1a00134c:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
1a00134e:	6525      	str	r5, [r4, #80]	; 0x50
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001350:	69a3      	ldr	r3, [r4, #24]
1a001352:	2b00      	cmp	r3, #0
1a001354:	db02      	blt.n	1a00135c <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001356:	f1c5 0507 	rsb	r5, r5, #7
1a00135a:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a00135c:	6961      	ldr	r1, [r4, #20]
1a00135e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
1a001362:	009a      	lsls	r2, r3, #2
1a001364:	4b1e      	ldr	r3, [pc, #120]	; (1a0013e0 <vTaskPrioritySet+0xdc>)
1a001366:	4413      	add	r3, r2
1a001368:	4299      	cmp	r1, r3
1a00136a:	d135      	bne.n	1a0013d8 <vTaskPrioritySet+0xd4>
1a00136c:	2301      	movs	r3, #1
1a00136e:	b1db      	cbz	r3, 1a0013a8 <vTaskPrioritySet+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001370:	1d25      	adds	r5, r4, #4
1a001372:	4628      	mov	r0, r5
1a001374:	f7ff fd69 	bl	1a000e4a <uxListRemove>
1a001378:	b938      	cbnz	r0, 1a00138a <vTaskPrioritySet+0x86>
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1a00137a:	2301      	movs	r3, #1
1a00137c:	fa03 f707 	lsl.w	r7, r3, r7
1a001380:	4a18      	ldr	r2, [pc, #96]	; (1a0013e4 <vTaskPrioritySet+0xe0>)
1a001382:	6813      	ldr	r3, [r2, #0]
1a001384:	ea23 0307 	bic.w	r3, r3, r7
1a001388:	6013      	str	r3, [r2, #0]
					prvAddTaskToReadyList( pxTCB );
1a00138a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00138c:	2201      	movs	r2, #1
1a00138e:	409a      	lsls	r2, r3
1a001390:	4914      	ldr	r1, [pc, #80]	; (1a0013e4 <vTaskPrioritySet+0xe0>)
1a001392:	6808      	ldr	r0, [r1, #0]
1a001394:	4302      	orrs	r2, r0
1a001396:	600a      	str	r2, [r1, #0]
1a001398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00139c:	009a      	lsls	r2, r3, #2
1a00139e:	4629      	mov	r1, r5
1a0013a0:	480f      	ldr	r0, [pc, #60]	; (1a0013e0 <vTaskPrioritySet+0xdc>)
1a0013a2:	4410      	add	r0, r2
1a0013a4:	f7ff fd2b 	bl	1a000dfe <vListInsertEnd>
				if( xYieldRequired != pdFALSE )
1a0013a8:	b13e      	cbz	r6, 1a0013ba <vTaskPrioritySet+0xb6>
					taskYIELD_IF_USING_PREEMPTION();
1a0013aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013ae:	4b0e      	ldr	r3, [pc, #56]	; (1a0013e8 <vTaskPrioritySet+0xe4>)
1a0013b0:	601a      	str	r2, [r3, #0]
1a0013b2:	f3bf 8f4f 	dsb	sy
1a0013b6:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
1a0013ba:	f000 fdef 	bl	1a001f9c <vPortExitCritical>
1a0013be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else if( pxTCB == pxCurrentTCB )
1a0013c0:	4a06      	ldr	r2, [pc, #24]	; (1a0013dc <vTaskPrioritySet+0xd8>)
1a0013c2:	6812      	ldr	r2, [r2, #0]
1a0013c4:	4294      	cmp	r4, r2
1a0013c6:	d005      	beq.n	1a0013d4 <vTaskPrioritySet+0xd0>
	BaseType_t xYieldRequired = pdFALSE;
1a0013c8:	2600      	movs	r6, #0
1a0013ca:	e7bc      	b.n	1a001346 <vTaskPrioritySet+0x42>
1a0013cc:	2600      	movs	r6, #0
1a0013ce:	e7ba      	b.n	1a001346 <vTaskPrioritySet+0x42>
							xYieldRequired = pdTRUE;
1a0013d0:	2601      	movs	r6, #1
1a0013d2:	e7b8      	b.n	1a001346 <vTaskPrioritySet+0x42>
					xYieldRequired = pdTRUE;
1a0013d4:	2601      	movs	r6, #1
1a0013d6:	e7b6      	b.n	1a001346 <vTaskPrioritySet+0x42>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0013d8:	2300      	movs	r3, #0
1a0013da:	e7c8      	b.n	1a00136e <vTaskPrioritySet+0x6a>
1a0013dc:	10002954 	.word	0x10002954
1a0013e0:	10002960 	.word	0x10002960
1a0013e4:	10002a00 	.word	0x10002a00
1a0013e8:	e000ed04 	.word	0xe000ed04

1a0013ec <vTaskStartScheduler>:
{
1a0013ec:	b510      	push	{r4, lr}
1a0013ee:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0013f0:	2400      	movs	r4, #0
1a0013f2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0013f4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0013f6:	aa07      	add	r2, sp, #28
1a0013f8:	a906      	add	r1, sp, #24
1a0013fa:	a805      	add	r0, sp, #20
1a0013fc:	f7ff fd3a 	bl	1a000e74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001400:	9b05      	ldr	r3, [sp, #20]
1a001402:	9302      	str	r3, [sp, #8]
1a001404:	9b06      	ldr	r3, [sp, #24]
1a001406:	9301      	str	r3, [sp, #4]
1a001408:	9400      	str	r4, [sp, #0]
1a00140a:	4623      	mov	r3, r4
1a00140c:	9a07      	ldr	r2, [sp, #28]
1a00140e:	4919      	ldr	r1, [pc, #100]	; (1a001474 <vTaskStartScheduler+0x88>)
1a001410:	4819      	ldr	r0, [pc, #100]	; (1a001478 <vTaskStartScheduler+0x8c>)
1a001412:	f7ff ff0b 	bl	1a00122c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001416:	b148      	cbz	r0, 1a00142c <vTaskStartScheduler+0x40>
			xReturn = pdPASS;
1a001418:	2001      	movs	r0, #1
		if( xReturn == pdPASS )
1a00141a:	2801      	cmp	r0, #1
1a00141c:	d008      	beq.n	1a001430 <vTaskStartScheduler+0x44>
	if( xReturn == pdPASS )
1a00141e:	2801      	cmp	r0, #1
1a001420:	d009      	beq.n	1a001436 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001422:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001426:	d01b      	beq.n	1a001460 <vTaskStartScheduler+0x74>
}
1a001428:	b008      	add	sp, #32
1a00142a:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00142c:	2000      	movs	r0, #0
1a00142e:	e7f4      	b.n	1a00141a <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
1a001430:	f000 fb60 	bl	1a001af4 <xTimerCreateTimerTask>
1a001434:	e7f3      	b.n	1a00141e <vTaskStartScheduler+0x32>
1a001436:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00143a:	f383 8811 	msr	BASEPRI, r3
1a00143e:	f3bf 8f6f 	isb	sy
1a001442:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00144a:	4b0c      	ldr	r3, [pc, #48]	; (1a00147c <vTaskStartScheduler+0x90>)
1a00144c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00144e:	2201      	movs	r2, #1
1a001450:	4b0b      	ldr	r3, [pc, #44]	; (1a001480 <vTaskStartScheduler+0x94>)
1a001452:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001454:	2200      	movs	r2, #0
1a001456:	4b0b      	ldr	r3, [pc, #44]	; (1a001484 <vTaskStartScheduler+0x98>)
1a001458:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00145a:	f000 fe1d 	bl	1a002098 <xPortStartScheduler>
1a00145e:	e7e3      	b.n	1a001428 <vTaskStartScheduler+0x3c>
1a001460:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001464:	f383 8811 	msr	BASEPRI, r3
1a001468:	f3bf 8f6f 	isb	sy
1a00146c:	f3bf 8f4f 	dsb	sy
1a001470:	e7fe      	b.n	1a001470 <vTaskStartScheduler+0x84>
1a001472:	bf00      	nop
1a001474:	1a004cd8 	.word	0x1a004cd8
1a001478:	1a00116d 	.word	0x1a00116d
1a00147c:	10002a2c 	.word	0x10002a2c
1a001480:	10002a48 	.word	0x10002a48
1a001484:	10002a74 	.word	0x10002a74

1a001488 <vTaskEndScheduler>:
{
1a001488:	b508      	push	{r3, lr}
1a00148a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00148e:	f383 8811 	msr	BASEPRI, r3
1a001492:	f3bf 8f6f 	isb	sy
1a001496:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
1a00149a:	2200      	movs	r2, #0
1a00149c:	4b02      	ldr	r3, [pc, #8]	; (1a0014a8 <vTaskEndScheduler+0x20>)
1a00149e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
1a0014a0:	f000 fd48 	bl	1a001f34 <vPortEndScheduler>
1a0014a4:	bd08      	pop	{r3, pc}
1a0014a6:	bf00      	nop
1a0014a8:	10002a48 	.word	0x10002a48

1a0014ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0014ac:	4a02      	ldr	r2, [pc, #8]	; (1a0014b8 <vTaskSuspendAll+0xc>)
1a0014ae:	6813      	ldr	r3, [r2, #0]
1a0014b0:	3301      	adds	r3, #1
1a0014b2:	6013      	str	r3, [r2, #0]
1a0014b4:	4770      	bx	lr
1a0014b6:	bf00      	nop
1a0014b8:	100029f8 	.word	0x100029f8

1a0014bc <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0014bc:	4b01      	ldr	r3, [pc, #4]	; (1a0014c4 <xTaskGetTickCount+0x8>)
1a0014be:	6818      	ldr	r0, [r3, #0]
}
1a0014c0:	4770      	bx	lr
1a0014c2:	bf00      	nop
1a0014c4:	10002a74 	.word	0x10002a74

1a0014c8 <xTaskIncrementTick>:
{
1a0014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0014ca:	4b3c      	ldr	r3, [pc, #240]	; (1a0015bc <xTaskIncrementTick+0xf4>)
1a0014cc:	681b      	ldr	r3, [r3, #0]
1a0014ce:	2b00      	cmp	r3, #0
1a0014d0:	d168      	bne.n	1a0015a4 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0014d2:	4b3b      	ldr	r3, [pc, #236]	; (1a0015c0 <xTaskIncrementTick+0xf8>)
1a0014d4:	681d      	ldr	r5, [r3, #0]
1a0014d6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0014d8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0014da:	b9c5      	cbnz	r5, 1a00150e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0014dc:	4b39      	ldr	r3, [pc, #228]	; (1a0015c4 <xTaskIncrementTick+0xfc>)
1a0014de:	681b      	ldr	r3, [r3, #0]
1a0014e0:	681b      	ldr	r3, [r3, #0]
1a0014e2:	b143      	cbz	r3, 1a0014f6 <xTaskIncrementTick+0x2e>
1a0014e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014e8:	f383 8811 	msr	BASEPRI, r3
1a0014ec:	f3bf 8f6f 	isb	sy
1a0014f0:	f3bf 8f4f 	dsb	sy
1a0014f4:	e7fe      	b.n	1a0014f4 <xTaskIncrementTick+0x2c>
1a0014f6:	4a33      	ldr	r2, [pc, #204]	; (1a0015c4 <xTaskIncrementTick+0xfc>)
1a0014f8:	6811      	ldr	r1, [r2, #0]
1a0014fa:	4b33      	ldr	r3, [pc, #204]	; (1a0015c8 <xTaskIncrementTick+0x100>)
1a0014fc:	6818      	ldr	r0, [r3, #0]
1a0014fe:	6010      	str	r0, [r2, #0]
1a001500:	6019      	str	r1, [r3, #0]
1a001502:	4a32      	ldr	r2, [pc, #200]	; (1a0015cc <xTaskIncrementTick+0x104>)
1a001504:	6813      	ldr	r3, [r2, #0]
1a001506:	3301      	adds	r3, #1
1a001508:	6013      	str	r3, [r2, #0]
1a00150a:	f7ff fcfd 	bl	1a000f08 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00150e:	4b30      	ldr	r3, [pc, #192]	; (1a0015d0 <xTaskIncrementTick+0x108>)
1a001510:	681b      	ldr	r3, [r3, #0]
1a001512:	429d      	cmp	r5, r3
1a001514:	d23a      	bcs.n	1a00158c <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
1a001516:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001518:	4b2e      	ldr	r3, [pc, #184]	; (1a0015d4 <xTaskIncrementTick+0x10c>)
1a00151a:	681b      	ldr	r3, [r3, #0]
1a00151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00151e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001522:	009a      	lsls	r2, r3, #2
1a001524:	4b2c      	ldr	r3, [pc, #176]	; (1a0015d8 <xTaskIncrementTick+0x110>)
1a001526:	589b      	ldr	r3, [r3, r2]
1a001528:	2b01      	cmp	r3, #1
1a00152a:	d940      	bls.n	1a0015ae <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
1a00152c:	2401      	movs	r4, #1
1a00152e:	e03e      	b.n	1a0015ae <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
1a001530:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001532:	4b24      	ldr	r3, [pc, #144]	; (1a0015c4 <xTaskIncrementTick+0xfc>)
1a001534:	681b      	ldr	r3, [r3, #0]
1a001536:	681b      	ldr	r3, [r3, #0]
1a001538:	b353      	cbz	r3, 1a001590 <xTaskIncrementTick+0xc8>
1a00153a:	2300      	movs	r3, #0
1a00153c:	bb53      	cbnz	r3, 1a001594 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00153e:	4b21      	ldr	r3, [pc, #132]	; (1a0015c4 <xTaskIncrementTick+0xfc>)
1a001540:	681b      	ldr	r3, [r3, #0]
1a001542:	68db      	ldr	r3, [r3, #12]
1a001544:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001546:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001548:	429d      	cmp	r5, r3
1a00154a:	d328      	bcc.n	1a00159e <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00154c:	1d37      	adds	r7, r6, #4
1a00154e:	4638      	mov	r0, r7
1a001550:	f7ff fc7b 	bl	1a000e4a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001554:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001556:	b11b      	cbz	r3, 1a001560 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001558:	f106 0018 	add.w	r0, r6, #24
1a00155c:	f7ff fc75 	bl	1a000e4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001560:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001562:	2201      	movs	r2, #1
1a001564:	409a      	lsls	r2, r3
1a001566:	491d      	ldr	r1, [pc, #116]	; (1a0015dc <xTaskIncrementTick+0x114>)
1a001568:	6808      	ldr	r0, [r1, #0]
1a00156a:	4302      	orrs	r2, r0
1a00156c:	600a      	str	r2, [r1, #0]
1a00156e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001572:	009a      	lsls	r2, r3, #2
1a001574:	4639      	mov	r1, r7
1a001576:	4818      	ldr	r0, [pc, #96]	; (1a0015d8 <xTaskIncrementTick+0x110>)
1a001578:	4410      	add	r0, r2
1a00157a:	f7ff fc40 	bl	1a000dfe <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00157e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001580:	4b14      	ldr	r3, [pc, #80]	; (1a0015d4 <xTaskIncrementTick+0x10c>)
1a001582:	681b      	ldr	r3, [r3, #0]
1a001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001586:	429a      	cmp	r2, r3
1a001588:	d2d2      	bcs.n	1a001530 <xTaskIncrementTick+0x68>
1a00158a:	e7d2      	b.n	1a001532 <xTaskIncrementTick+0x6a>
1a00158c:	2400      	movs	r4, #0
1a00158e:	e7d0      	b.n	1a001532 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001590:	2301      	movs	r3, #1
1a001592:	e7d3      	b.n	1a00153c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001598:	4b0d      	ldr	r3, [pc, #52]	; (1a0015d0 <xTaskIncrementTick+0x108>)
1a00159a:	601a      	str	r2, [r3, #0]
					break;
1a00159c:	e7bc      	b.n	1a001518 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00159e:	4a0c      	ldr	r2, [pc, #48]	; (1a0015d0 <xTaskIncrementTick+0x108>)
1a0015a0:	6013      	str	r3, [r2, #0]
						break;
1a0015a2:	e7b9      	b.n	1a001518 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0015a4:	4a0e      	ldr	r2, [pc, #56]	; (1a0015e0 <xTaskIncrementTick+0x118>)
1a0015a6:	6813      	ldr	r3, [r2, #0]
1a0015a8:	3301      	adds	r3, #1
1a0015aa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0015ac:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0015ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0015e4 <xTaskIncrementTick+0x11c>)
1a0015b0:	681b      	ldr	r3, [r3, #0]
1a0015b2:	b103      	cbz	r3, 1a0015b6 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
1a0015b4:	2401      	movs	r4, #1
}
1a0015b6:	4620      	mov	r0, r4
1a0015b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0015ba:	bf00      	nop
1a0015bc:	100029f8 	.word	0x100029f8
1a0015c0:	10002a74 	.word	0x10002a74
1a0015c4:	10002958 	.word	0x10002958
1a0015c8:	1000295c 	.word	0x1000295c
1a0015cc:	10002a30 	.word	0x10002a30
1a0015d0:	10002a2c 	.word	0x10002a2c
1a0015d4:	10002954 	.word	0x10002954
1a0015d8:	10002960 	.word	0x10002960
1a0015dc:	10002a00 	.word	0x10002a00
1a0015e0:	100029f4 	.word	0x100029f4
1a0015e4:	10002a78 	.word	0x10002a78

1a0015e8 <xTaskResumeAll>:
{
1a0015e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0015ea:	4b35      	ldr	r3, [pc, #212]	; (1a0016c0 <xTaskResumeAll+0xd8>)
1a0015ec:	681b      	ldr	r3, [r3, #0]
1a0015ee:	b943      	cbnz	r3, 1a001602 <xTaskResumeAll+0x1a>
1a0015f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015f4:	f383 8811 	msr	BASEPRI, r3
1a0015f8:	f3bf 8f6f 	isb	sy
1a0015fc:	f3bf 8f4f 	dsb	sy
1a001600:	e7fe      	b.n	1a001600 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001602:	f000 fca9 	bl	1a001f58 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001606:	4b2e      	ldr	r3, [pc, #184]	; (1a0016c0 <xTaskResumeAll+0xd8>)
1a001608:	681a      	ldr	r2, [r3, #0]
1a00160a:	3a01      	subs	r2, #1
1a00160c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00160e:	681b      	ldr	r3, [r3, #0]
1a001610:	2b00      	cmp	r3, #0
1a001612:	d150      	bne.n	1a0016b6 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001614:	4b2b      	ldr	r3, [pc, #172]	; (1a0016c4 <xTaskResumeAll+0xdc>)
1a001616:	681b      	ldr	r3, [r3, #0]
1a001618:	b923      	cbnz	r3, 1a001624 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00161a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00161c:	f000 fcbe 	bl	1a001f9c <vPortExitCritical>
}
1a001620:	4620      	mov	r0, r4
1a001622:	bd38      	pop	{r3, r4, r5, pc}
1a001624:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001626:	4b28      	ldr	r3, [pc, #160]	; (1a0016c8 <xTaskResumeAll+0xe0>)
1a001628:	681b      	ldr	r3, [r3, #0]
1a00162a:	b31b      	cbz	r3, 1a001674 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00162c:	4b26      	ldr	r3, [pc, #152]	; (1a0016c8 <xTaskResumeAll+0xe0>)
1a00162e:	68db      	ldr	r3, [r3, #12]
1a001630:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001632:	f104 0018 	add.w	r0, r4, #24
1a001636:	f7ff fc08 	bl	1a000e4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00163a:	1d25      	adds	r5, r4, #4
1a00163c:	4628      	mov	r0, r5
1a00163e:	f7ff fc04 	bl	1a000e4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001644:	2201      	movs	r2, #1
1a001646:	409a      	lsls	r2, r3
1a001648:	4920      	ldr	r1, [pc, #128]	; (1a0016cc <xTaskResumeAll+0xe4>)
1a00164a:	6808      	ldr	r0, [r1, #0]
1a00164c:	4302      	orrs	r2, r0
1a00164e:	600a      	str	r2, [r1, #0]
1a001650:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001654:	009a      	lsls	r2, r3, #2
1a001656:	4629      	mov	r1, r5
1a001658:	481d      	ldr	r0, [pc, #116]	; (1a0016d0 <xTaskResumeAll+0xe8>)
1a00165a:	4410      	add	r0, r2
1a00165c:	f7ff fbcf 	bl	1a000dfe <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001660:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001662:	4b1c      	ldr	r3, [pc, #112]	; (1a0016d4 <xTaskResumeAll+0xec>)
1a001664:	681b      	ldr	r3, [r3, #0]
1a001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001668:	429a      	cmp	r2, r3
1a00166a:	d3dc      	bcc.n	1a001626 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a00166c:	2201      	movs	r2, #1
1a00166e:	4b1a      	ldr	r3, [pc, #104]	; (1a0016d8 <xTaskResumeAll+0xf0>)
1a001670:	601a      	str	r2, [r3, #0]
1a001672:	e7d8      	b.n	1a001626 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001674:	b10c      	cbz	r4, 1a00167a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001676:	f7ff fc47 	bl	1a000f08 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00167a:	4b18      	ldr	r3, [pc, #96]	; (1a0016dc <xTaskResumeAll+0xf4>)
1a00167c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00167e:	b974      	cbnz	r4, 1a00169e <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
1a001680:	4b15      	ldr	r3, [pc, #84]	; (1a0016d8 <xTaskResumeAll+0xf0>)
1a001682:	681b      	ldr	r3, [r3, #0]
1a001684:	b1cb      	cbz	r3, 1a0016ba <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a001686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00168a:	4b15      	ldr	r3, [pc, #84]	; (1a0016e0 <xTaskResumeAll+0xf8>)
1a00168c:	601a      	str	r2, [r3, #0]
1a00168e:	f3bf 8f4f 	dsb	sy
1a001692:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001696:	2401      	movs	r4, #1
1a001698:	e7c0      	b.n	1a00161c <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00169a:	3c01      	subs	r4, #1
1a00169c:	d007      	beq.n	1a0016ae <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
1a00169e:	f7ff ff13 	bl	1a0014c8 <xTaskIncrementTick>
1a0016a2:	2800      	cmp	r0, #0
1a0016a4:	d0f9      	beq.n	1a00169a <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
1a0016a6:	2201      	movs	r2, #1
1a0016a8:	4b0b      	ldr	r3, [pc, #44]	; (1a0016d8 <xTaskResumeAll+0xf0>)
1a0016aa:	601a      	str	r2, [r3, #0]
1a0016ac:	e7f5      	b.n	1a00169a <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
1a0016ae:	2200      	movs	r2, #0
1a0016b0:	4b0a      	ldr	r3, [pc, #40]	; (1a0016dc <xTaskResumeAll+0xf4>)
1a0016b2:	601a      	str	r2, [r3, #0]
1a0016b4:	e7e4      	b.n	1a001680 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
1a0016b6:	2400      	movs	r4, #0
1a0016b8:	e7b0      	b.n	1a00161c <xTaskResumeAll+0x34>
1a0016ba:	2400      	movs	r4, #0
1a0016bc:	e7ae      	b.n	1a00161c <xTaskResumeAll+0x34>
1a0016be:	bf00      	nop
1a0016c0:	100029f8 	.word	0x100029f8
1a0016c4:	100029ec 	.word	0x100029ec
1a0016c8:	10002a34 	.word	0x10002a34
1a0016cc:	10002a00 	.word	0x10002a00
1a0016d0:	10002960 	.word	0x10002960
1a0016d4:	10002954 	.word	0x10002954
1a0016d8:	10002a78 	.word	0x10002a78
1a0016dc:	100029f4 	.word	0x100029f4
1a0016e0:	e000ed04 	.word	0xe000ed04

1a0016e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0016e4:	4b2d      	ldr	r3, [pc, #180]	; (1a00179c <vTaskSwitchContext+0xb8>)
1a0016e6:	681b      	ldr	r3, [r3, #0]
1a0016e8:	bb53      	cbnz	r3, 1a001740 <vTaskSwitchContext+0x5c>
{
1a0016ea:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0016ec:	2200      	movs	r2, #0
1a0016ee:	4b2c      	ldr	r3, [pc, #176]	; (1a0017a0 <vTaskSwitchContext+0xbc>)
1a0016f0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0016f2:	4b2c      	ldr	r3, [pc, #176]	; (1a0017a4 <vTaskSwitchContext+0xc0>)
1a0016f4:	681b      	ldr	r3, [r3, #0]
1a0016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0016f8:	681a      	ldr	r2, [r3, #0]
1a0016fa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0016fe:	d103      	bne.n	1a001708 <vTaskSwitchContext+0x24>
1a001700:	685a      	ldr	r2, [r3, #4]
1a001702:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001706:	d01f      	beq.n	1a001748 <vTaskSwitchContext+0x64>
1a001708:	4b26      	ldr	r3, [pc, #152]	; (1a0017a4 <vTaskSwitchContext+0xc0>)
1a00170a:	6818      	ldr	r0, [r3, #0]
1a00170c:	6819      	ldr	r1, [r3, #0]
1a00170e:	3134      	adds	r1, #52	; 0x34
1a001710:	f7ff fbec 	bl	1a000eec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001714:	4b24      	ldr	r3, [pc, #144]	; (1a0017a8 <vTaskSwitchContext+0xc4>)
1a001716:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001718:	fab3 f383 	clz	r3, r3
1a00171c:	b2db      	uxtb	r3, r3
1a00171e:	f1c3 031f 	rsb	r3, r3, #31
1a001722:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001726:	008a      	lsls	r2, r1, #2
1a001728:	4920      	ldr	r1, [pc, #128]	; (1a0017ac <vTaskSwitchContext+0xc8>)
1a00172a:	588a      	ldr	r2, [r1, r2]
1a00172c:	b9aa      	cbnz	r2, 1a00175a <vTaskSwitchContext+0x76>
	__asm volatile
1a00172e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001732:	f383 8811 	msr	BASEPRI, r3
1a001736:	f3bf 8f6f 	isb	sy
1a00173a:	f3bf 8f4f 	dsb	sy
1a00173e:	e7fe      	b.n	1a00173e <vTaskSwitchContext+0x5a>
		xYieldPending = pdTRUE;
1a001740:	2201      	movs	r2, #1
1a001742:	4b17      	ldr	r3, [pc, #92]	; (1a0017a0 <vTaskSwitchContext+0xbc>)
1a001744:	601a      	str	r2, [r3, #0]
1a001746:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
1a001748:	689a      	ldr	r2, [r3, #8]
1a00174a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00174e:	d1db      	bne.n	1a001708 <vTaskSwitchContext+0x24>
1a001750:	68db      	ldr	r3, [r3, #12]
1a001752:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001756:	d1d7      	bne.n	1a001708 <vTaskSwitchContext+0x24>
1a001758:	e7dc      	b.n	1a001714 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00175a:	4814      	ldr	r0, [pc, #80]	; (1a0017ac <vTaskSwitchContext+0xc8>)
1a00175c:	009a      	lsls	r2, r3, #2
1a00175e:	18d4      	adds	r4, r2, r3
1a001760:	00a1      	lsls	r1, r4, #2
1a001762:	4401      	add	r1, r0
1a001764:	684c      	ldr	r4, [r1, #4]
1a001766:	6864      	ldr	r4, [r4, #4]
1a001768:	604c      	str	r4, [r1, #4]
1a00176a:	441a      	add	r2, r3
1a00176c:	0091      	lsls	r1, r2, #2
1a00176e:	3108      	adds	r1, #8
1a001770:	4408      	add	r0, r1
1a001772:	4284      	cmp	r4, r0
1a001774:	d009      	beq.n	1a00178a <vTaskSwitchContext+0xa6>
1a001776:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00177a:	009a      	lsls	r2, r3, #2
1a00177c:	4b0b      	ldr	r3, [pc, #44]	; (1a0017ac <vTaskSwitchContext+0xc8>)
1a00177e:	4413      	add	r3, r2
1a001780:	685b      	ldr	r3, [r3, #4]
1a001782:	68da      	ldr	r2, [r3, #12]
1a001784:	4b07      	ldr	r3, [pc, #28]	; (1a0017a4 <vTaskSwitchContext+0xc0>)
1a001786:	601a      	str	r2, [r3, #0]
1a001788:	bd10      	pop	{r4, pc}
1a00178a:	6860      	ldr	r0, [r4, #4]
1a00178c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001790:	0091      	lsls	r1, r2, #2
1a001792:	4a06      	ldr	r2, [pc, #24]	; (1a0017ac <vTaskSwitchContext+0xc8>)
1a001794:	440a      	add	r2, r1
1a001796:	6050      	str	r0, [r2, #4]
1a001798:	e7ed      	b.n	1a001776 <vTaskSwitchContext+0x92>
1a00179a:	bf00      	nop
1a00179c:	100029f8 	.word	0x100029f8
1a0017a0:	10002a78 	.word	0x10002a78
1a0017a4:	10002954 	.word	0x10002954
1a0017a8:	10002a00 	.word	0x10002a00
1a0017ac:	10002960 	.word	0x10002960

1a0017b0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0017b0:	b940      	cbnz	r0, 1a0017c4 <vTaskPlaceOnEventList+0x14>
1a0017b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017b6:	f383 8811 	msr	BASEPRI, r3
1a0017ba:	f3bf 8f6f 	isb	sy
1a0017be:	f3bf 8f4f 	dsb	sy
1a0017c2:	e7fe      	b.n	1a0017c2 <vTaskPlaceOnEventList+0x12>
{
1a0017c4:	b510      	push	{r4, lr}
1a0017c6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017c8:	4b04      	ldr	r3, [pc, #16]	; (1a0017dc <vTaskPlaceOnEventList+0x2c>)
1a0017ca:	6819      	ldr	r1, [r3, #0]
1a0017cc:	3118      	adds	r1, #24
1a0017ce:	f7ff fb22 	bl	1a000e16 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0017d2:	2101      	movs	r1, #1
1a0017d4:	4620      	mov	r0, r4
1a0017d6:	f7ff fcdd 	bl	1a001194 <prvAddCurrentTaskToDelayedList>
1a0017da:	bd10      	pop	{r4, pc}
1a0017dc:	10002954 	.word	0x10002954

1a0017e0 <vTaskPlaceOnEventListRestricted>:
	{
1a0017e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0017e2:	b170      	cbz	r0, 1a001802 <vTaskPlaceOnEventListRestricted+0x22>
1a0017e4:	460c      	mov	r4, r1
1a0017e6:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017e8:	4a0a      	ldr	r2, [pc, #40]	; (1a001814 <vTaskPlaceOnEventListRestricted+0x34>)
1a0017ea:	6811      	ldr	r1, [r2, #0]
1a0017ec:	3118      	adds	r1, #24
1a0017ee:	f7ff fb06 	bl	1a000dfe <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0017f2:	b10d      	cbz	r5, 1a0017f8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a0017f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0017f8:	4629      	mov	r1, r5
1a0017fa:	4620      	mov	r0, r4
1a0017fc:	f7ff fcca 	bl	1a001194 <prvAddCurrentTaskToDelayedList>
1a001800:	bd38      	pop	{r3, r4, r5, pc}
1a001802:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001806:	f383 8811 	msr	BASEPRI, r3
1a00180a:	f3bf 8f6f 	isb	sy
1a00180e:	f3bf 8f4f 	dsb	sy
1a001812:	e7fe      	b.n	1a001812 <vTaskPlaceOnEventListRestricted+0x32>
1a001814:	10002954 	.word	0x10002954

1a001818 <xTaskRemoveFromEventList>:
{
1a001818:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00181a:	68c3      	ldr	r3, [r0, #12]
1a00181c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00181e:	b324      	cbz	r4, 1a00186a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001820:	f104 0518 	add.w	r5, r4, #24
1a001824:	4628      	mov	r0, r5
1a001826:	f7ff fb10 	bl	1a000e4a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00182a:	4b18      	ldr	r3, [pc, #96]	; (1a00188c <xTaskRemoveFromEventList+0x74>)
1a00182c:	681b      	ldr	r3, [r3, #0]
1a00182e:	bb2b      	cbnz	r3, 1a00187c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001830:	1d25      	adds	r5, r4, #4
1a001832:	4628      	mov	r0, r5
1a001834:	f7ff fb09 	bl	1a000e4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001838:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00183a:	2201      	movs	r2, #1
1a00183c:	409a      	lsls	r2, r3
1a00183e:	4914      	ldr	r1, [pc, #80]	; (1a001890 <xTaskRemoveFromEventList+0x78>)
1a001840:	6808      	ldr	r0, [r1, #0]
1a001842:	4302      	orrs	r2, r0
1a001844:	600a      	str	r2, [r1, #0]
1a001846:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00184a:	009a      	lsls	r2, r3, #2
1a00184c:	4629      	mov	r1, r5
1a00184e:	4811      	ldr	r0, [pc, #68]	; (1a001894 <xTaskRemoveFromEventList+0x7c>)
1a001850:	4410      	add	r0, r2
1a001852:	f7ff fad4 	bl	1a000dfe <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001856:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001858:	4b0f      	ldr	r3, [pc, #60]	; (1a001898 <xTaskRemoveFromEventList+0x80>)
1a00185a:	681b      	ldr	r3, [r3, #0]
1a00185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00185e:	429a      	cmp	r2, r3
1a001860:	d911      	bls.n	1a001886 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001862:	2001      	movs	r0, #1
1a001864:	4b0d      	ldr	r3, [pc, #52]	; (1a00189c <xTaskRemoveFromEventList+0x84>)
1a001866:	6018      	str	r0, [r3, #0]
1a001868:	bd38      	pop	{r3, r4, r5, pc}
1a00186a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00186e:	f383 8811 	msr	BASEPRI, r3
1a001872:	f3bf 8f6f 	isb	sy
1a001876:	f3bf 8f4f 	dsb	sy
1a00187a:	e7fe      	b.n	1a00187a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a00187c:	4629      	mov	r1, r5
1a00187e:	4808      	ldr	r0, [pc, #32]	; (1a0018a0 <xTaskRemoveFromEventList+0x88>)
1a001880:	f7ff fabd 	bl	1a000dfe <vListInsertEnd>
1a001884:	e7e7      	b.n	1a001856 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a001886:	2000      	movs	r0, #0
}
1a001888:	bd38      	pop	{r3, r4, r5, pc}
1a00188a:	bf00      	nop
1a00188c:	100029f8 	.word	0x100029f8
1a001890:	10002a00 	.word	0x10002a00
1a001894:	10002960 	.word	0x10002960
1a001898:	10002954 	.word	0x10002954
1a00189c:	10002a78 	.word	0x10002a78
1a0018a0:	10002a34 	.word	0x10002a34

1a0018a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0018a4:	4b03      	ldr	r3, [pc, #12]	; (1a0018b4 <vTaskInternalSetTimeOutState+0x10>)
1a0018a6:	681b      	ldr	r3, [r3, #0]
1a0018a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0018aa:	4b03      	ldr	r3, [pc, #12]	; (1a0018b8 <vTaskInternalSetTimeOutState+0x14>)
1a0018ac:	681b      	ldr	r3, [r3, #0]
1a0018ae:	6043      	str	r3, [r0, #4]
1a0018b0:	4770      	bx	lr
1a0018b2:	bf00      	nop
1a0018b4:	10002a30 	.word	0x10002a30
1a0018b8:	10002a74 	.word	0x10002a74

1a0018bc <xTaskCheckForTimeOut>:
{
1a0018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0018be:	b1e0      	cbz	r0, 1a0018fa <xTaskCheckForTimeOut+0x3e>
1a0018c0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0018c2:	b319      	cbz	r1, 1a00190c <xTaskCheckForTimeOut+0x50>
1a0018c4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0018c6:	f000 fb47 	bl	1a001f58 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0018ca:	4b1a      	ldr	r3, [pc, #104]	; (1a001934 <xTaskCheckForTimeOut+0x78>)
1a0018cc:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0018ce:	6869      	ldr	r1, [r5, #4]
1a0018d0:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
1a0018d2:	6823      	ldr	r3, [r4, #0]
1a0018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018d8:	d028      	beq.n	1a00192c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0018da:	682f      	ldr	r7, [r5, #0]
1a0018dc:	4e16      	ldr	r6, [pc, #88]	; (1a001938 <xTaskCheckForTimeOut+0x7c>)
1a0018de:	6836      	ldr	r6, [r6, #0]
1a0018e0:	42b7      	cmp	r7, r6
1a0018e2:	d001      	beq.n	1a0018e8 <xTaskCheckForTimeOut+0x2c>
1a0018e4:	4288      	cmp	r0, r1
1a0018e6:	d223      	bcs.n	1a001930 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0018e8:	429a      	cmp	r2, r3
1a0018ea:	d318      	bcc.n	1a00191e <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
1a0018ec:	2300      	movs	r3, #0
1a0018ee:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0018f0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a0018f2:	f000 fb53 	bl	1a001f9c <vPortExitCritical>
}
1a0018f6:	4620      	mov	r0, r4
1a0018f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0018fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018fe:	f383 8811 	msr	BASEPRI, r3
1a001902:	f3bf 8f6f 	isb	sy
1a001906:	f3bf 8f4f 	dsb	sy
1a00190a:	e7fe      	b.n	1a00190a <xTaskCheckForTimeOut+0x4e>
1a00190c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001910:	f383 8811 	msr	BASEPRI, r3
1a001914:	f3bf 8f6f 	isb	sy
1a001918:	f3bf 8f4f 	dsb	sy
1a00191c:	e7fe      	b.n	1a00191c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
1a00191e:	1a9b      	subs	r3, r3, r2
1a001920:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001922:	4628      	mov	r0, r5
1a001924:	f7ff ffbe 	bl	1a0018a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001928:	2400      	movs	r4, #0
1a00192a:	e7e2      	b.n	1a0018f2 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
1a00192c:	2400      	movs	r4, #0
1a00192e:	e7e0      	b.n	1a0018f2 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
1a001930:	2401      	movs	r4, #1
1a001932:	e7de      	b.n	1a0018f2 <xTaskCheckForTimeOut+0x36>
1a001934:	10002a74 	.word	0x10002a74
1a001938:	10002a30 	.word	0x10002a30

1a00193c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a00193c:	2201      	movs	r2, #1
1a00193e:	4b01      	ldr	r3, [pc, #4]	; (1a001944 <vTaskMissedYield+0x8>)
1a001940:	601a      	str	r2, [r3, #0]
1a001942:	4770      	bx	lr
1a001944:	10002a78 	.word	0x10002a78

1a001948 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001948:	4b05      	ldr	r3, [pc, #20]	; (1a001960 <xTaskGetSchedulerState+0x18>)
1a00194a:	681b      	ldr	r3, [r3, #0]
1a00194c:	b123      	cbz	r3, 1a001958 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00194e:	4b05      	ldr	r3, [pc, #20]	; (1a001964 <xTaskGetSchedulerState+0x1c>)
1a001950:	681b      	ldr	r3, [r3, #0]
1a001952:	b91b      	cbnz	r3, 1a00195c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
1a001954:	2002      	movs	r0, #2
1a001956:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001958:	2001      	movs	r0, #1
1a00195a:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
1a00195c:	2000      	movs	r0, #0
	}
1a00195e:	4770      	bx	lr
1a001960:	10002a48 	.word	0x10002a48
1a001964:	100029f8 	.word	0x100029f8

1a001968 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001968:	2800      	cmp	r0, #0
1a00196a:	d04a      	beq.n	1a001a02 <xTaskPriorityDisinherit+0x9a>
	{
1a00196c:	b538      	push	{r3, r4, r5, lr}
1a00196e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001970:	4a27      	ldr	r2, [pc, #156]	; (1a001a10 <xTaskPriorityDisinherit+0xa8>)
1a001972:	6812      	ldr	r2, [r2, #0]
1a001974:	4290      	cmp	r0, r2
1a001976:	d008      	beq.n	1a00198a <xTaskPriorityDisinherit+0x22>
1a001978:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00197c:	f383 8811 	msr	BASEPRI, r3
1a001980:	f3bf 8f6f 	isb	sy
1a001984:	f3bf 8f4f 	dsb	sy
1a001988:	e7fe      	b.n	1a001988 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00198a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a00198c:	b942      	cbnz	r2, 1a0019a0 <xTaskPriorityDisinherit+0x38>
1a00198e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001992:	f383 8811 	msr	BASEPRI, r3
1a001996:	f3bf 8f6f 	isb	sy
1a00199a:	f3bf 8f4f 	dsb	sy
1a00199e:	e7fe      	b.n	1a00199e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0019a0:	3a01      	subs	r2, #1
1a0019a2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0019a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0019a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0019a8:	4288      	cmp	r0, r1
1a0019aa:	d02c      	beq.n	1a001a06 <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0019ac:	bb6a      	cbnz	r2, 1a001a0a <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019ae:	1d25      	adds	r5, r4, #4
1a0019b0:	4628      	mov	r0, r5
1a0019b2:	f7ff fa4a 	bl	1a000e4a <uxListRemove>
1a0019b6:	b970      	cbnz	r0, 1a0019d6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0019b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0019ba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0019be:	008b      	lsls	r3, r1, #2
1a0019c0:	4914      	ldr	r1, [pc, #80]	; (1a001a14 <xTaskPriorityDisinherit+0xac>)
1a0019c2:	58cb      	ldr	r3, [r1, r3]
1a0019c4:	b93b      	cbnz	r3, 1a0019d6 <xTaskPriorityDisinherit+0x6e>
1a0019c6:	2301      	movs	r3, #1
1a0019c8:	fa03 f202 	lsl.w	r2, r3, r2
1a0019cc:	4912      	ldr	r1, [pc, #72]	; (1a001a18 <xTaskPriorityDisinherit+0xb0>)
1a0019ce:	680b      	ldr	r3, [r1, #0]
1a0019d0:	ea23 0302 	bic.w	r3, r3, r2
1a0019d4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0019d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0019d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0019da:	f1c3 0207 	rsb	r2, r3, #7
1a0019de:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0019e0:	2401      	movs	r4, #1
1a0019e2:	fa04 f203 	lsl.w	r2, r4, r3
1a0019e6:	490c      	ldr	r1, [pc, #48]	; (1a001a18 <xTaskPriorityDisinherit+0xb0>)
1a0019e8:	6808      	ldr	r0, [r1, #0]
1a0019ea:	4302      	orrs	r2, r0
1a0019ec:	600a      	str	r2, [r1, #0]
1a0019ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0019f2:	009a      	lsls	r2, r3, #2
1a0019f4:	4629      	mov	r1, r5
1a0019f6:	4807      	ldr	r0, [pc, #28]	; (1a001a14 <xTaskPriorityDisinherit+0xac>)
1a0019f8:	4410      	add	r0, r2
1a0019fa:	f7ff fa00 	bl	1a000dfe <vListInsertEnd>
					xReturn = pdTRUE;
1a0019fe:	4620      	mov	r0, r4
1a001a00:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001a02:	2000      	movs	r0, #0
1a001a04:	4770      	bx	lr
1a001a06:	2000      	movs	r0, #0
1a001a08:	bd38      	pop	{r3, r4, r5, pc}
1a001a0a:	2000      	movs	r0, #0
	}
1a001a0c:	bd38      	pop	{r3, r4, r5, pc}
1a001a0e:	bf00      	nop
1a001a10:	10002954 	.word	0x10002954
1a001a14:	10002960 	.word	0x10002960
1a001a18:	10002a00 	.word	0x10002a00

1a001a1c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001a1c:	4b06      	ldr	r3, [pc, #24]	; (1a001a38 <prvGetNextExpireTime+0x1c>)
1a001a1e:	681a      	ldr	r2, [r3, #0]
1a001a20:	6813      	ldr	r3, [r2, #0]
1a001a22:	fab3 f383 	clz	r3, r3
1a001a26:	095b      	lsrs	r3, r3, #5
1a001a28:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001a2a:	b913      	cbnz	r3, 1a001a32 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001a2c:	68d3      	ldr	r3, [r2, #12]
1a001a2e:	6818      	ldr	r0, [r3, #0]
1a001a30:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001a32:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001a34:	4770      	bx	lr
1a001a36:	bf00      	nop
1a001a38:	10002a7c 	.word	0x10002a7c

1a001a3c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001a3c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001a3e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001a40:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001a42:	4291      	cmp	r1, r2
1a001a44:	d80c      	bhi.n	1a001a60 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a46:	1ad2      	subs	r2, r2, r3
1a001a48:	6983      	ldr	r3, [r0, #24]
1a001a4a:	429a      	cmp	r2, r3
1a001a4c:	d301      	bcc.n	1a001a52 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001a4e:	2001      	movs	r0, #1
1a001a50:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001a52:	1d01      	adds	r1, r0, #4
1a001a54:	4b09      	ldr	r3, [pc, #36]	; (1a001a7c <prvInsertTimerInActiveList+0x40>)
1a001a56:	6818      	ldr	r0, [r3, #0]
1a001a58:	f7ff f9dd 	bl	1a000e16 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a5c:	2000      	movs	r0, #0
1a001a5e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001a60:	429a      	cmp	r2, r3
1a001a62:	d201      	bcs.n	1a001a68 <prvInsertTimerInActiveList+0x2c>
1a001a64:	4299      	cmp	r1, r3
1a001a66:	d206      	bcs.n	1a001a76 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001a68:	1d01      	adds	r1, r0, #4
1a001a6a:	4b05      	ldr	r3, [pc, #20]	; (1a001a80 <prvInsertTimerInActiveList+0x44>)
1a001a6c:	6818      	ldr	r0, [r3, #0]
1a001a6e:	f7ff f9d2 	bl	1a000e16 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a72:	2000      	movs	r0, #0
1a001a74:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001a76:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
1a001a78:	bd08      	pop	{r3, pc}
1a001a7a:	bf00      	nop
1a001a7c:	10002a80 	.word	0x10002a80
1a001a80:	10002a7c 	.word	0x10002a7c

1a001a84 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001a84:	b530      	push	{r4, r5, lr}
1a001a86:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001a88:	f000 fa66 	bl	1a001f58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001a8c:	4b11      	ldr	r3, [pc, #68]	; (1a001ad4 <prvCheckForValidListAndQueue+0x50>)
1a001a8e:	681b      	ldr	r3, [r3, #0]
1a001a90:	b11b      	cbz	r3, 1a001a9a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001a92:	f000 fa83 	bl	1a001f9c <vPortExitCritical>
}
1a001a96:	b003      	add	sp, #12
1a001a98:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001a9a:	4d0f      	ldr	r5, [pc, #60]	; (1a001ad8 <prvCheckForValidListAndQueue+0x54>)
1a001a9c:	4628      	mov	r0, r5
1a001a9e:	f7ff f9a0 	bl	1a000de2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001aa2:	4c0e      	ldr	r4, [pc, #56]	; (1a001adc <prvCheckForValidListAndQueue+0x58>)
1a001aa4:	4620      	mov	r0, r4
1a001aa6:	f7ff f99c 	bl	1a000de2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001aaa:	4b0d      	ldr	r3, [pc, #52]	; (1a001ae0 <prvCheckForValidListAndQueue+0x5c>)
1a001aac:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001aae:	4b0d      	ldr	r3, [pc, #52]	; (1a001ae4 <prvCheckForValidListAndQueue+0x60>)
1a001ab0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001ab2:	2300      	movs	r3, #0
1a001ab4:	9300      	str	r3, [sp, #0]
1a001ab6:	4b0c      	ldr	r3, [pc, #48]	; (1a001ae8 <prvCheckForValidListAndQueue+0x64>)
1a001ab8:	4a0c      	ldr	r2, [pc, #48]	; (1a001aec <prvCheckForValidListAndQueue+0x68>)
1a001aba:	2110      	movs	r1, #16
1a001abc:	200a      	movs	r0, #10
1a001abe:	f7fe ff20 	bl	1a000902 <xQueueGenericCreateStatic>
1a001ac2:	4b04      	ldr	r3, [pc, #16]	; (1a001ad4 <prvCheckForValidListAndQueue+0x50>)
1a001ac4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001ac6:	2800      	cmp	r0, #0
1a001ac8:	d0e3      	beq.n	1a001a92 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001aca:	4909      	ldr	r1, [pc, #36]	; (1a001af0 <prvCheckForValidListAndQueue+0x6c>)
1a001acc:	f7ff f94c 	bl	1a000d68 <vQueueAddToRegistry>
1a001ad0:	e7df      	b.n	1a001a92 <prvCheckForValidListAndQueue+0xe>
1a001ad2:	bf00      	nop
1a001ad4:	10002ba0 	.word	0x10002ba0
1a001ad8:	10002b24 	.word	0x10002b24
1a001adc:	10002b38 	.word	0x10002b38
1a001ae0:	10002a7c 	.word	0x10002a7c
1a001ae4:	10002a80 	.word	0x10002a80
1a001ae8:	10002b50 	.word	0x10002b50
1a001aec:	10002a84 	.word	0x10002a84
1a001af0:	1a004ce0 	.word	0x1a004ce0

1a001af4 <xTimerCreateTimerTask>:
{
1a001af4:	b510      	push	{r4, lr}
1a001af6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001af8:	f7ff ffc4 	bl	1a001a84 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001afc:	4b15      	ldr	r3, [pc, #84]	; (1a001b54 <xTimerCreateTimerTask+0x60>)
1a001afe:	681b      	ldr	r3, [r3, #0]
1a001b00:	b31b      	cbz	r3, 1a001b4a <xTimerCreateTimerTask+0x56>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001b02:	2400      	movs	r4, #0
1a001b04:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001b06:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001b08:	aa07      	add	r2, sp, #28
1a001b0a:	a906      	add	r1, sp, #24
1a001b0c:	a805      	add	r0, sp, #20
1a001b0e:	f7ff f9bd 	bl	1a000e8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001b12:	9b05      	ldr	r3, [sp, #20]
1a001b14:	9302      	str	r3, [sp, #8]
1a001b16:	9b06      	ldr	r3, [sp, #24]
1a001b18:	9301      	str	r3, [sp, #4]
1a001b1a:	2304      	movs	r3, #4
1a001b1c:	9300      	str	r3, [sp, #0]
1a001b1e:	4623      	mov	r3, r4
1a001b20:	9a07      	ldr	r2, [sp, #28]
1a001b22:	490d      	ldr	r1, [pc, #52]	; (1a001b58 <xTimerCreateTimerTask+0x64>)
1a001b24:	480d      	ldr	r0, [pc, #52]	; (1a001b5c <xTimerCreateTimerTask+0x68>)
1a001b26:	f7ff fb81 	bl	1a00122c <xTaskCreateStatic>
1a001b2a:	4b0d      	ldr	r3, [pc, #52]	; (1a001b60 <xTimerCreateTimerTask+0x6c>)
1a001b2c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001b2e:	b150      	cbz	r0, 1a001b46 <xTimerCreateTimerTask+0x52>
				xReturn = pdPASS;
1a001b30:	2001      	movs	r0, #1
	configASSERT( xReturn );
1a001b32:	b960      	cbnz	r0, 1a001b4e <xTimerCreateTimerTask+0x5a>
1a001b34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b38:	f383 8811 	msr	BASEPRI, r3
1a001b3c:	f3bf 8f6f 	isb	sy
1a001b40:	f3bf 8f4f 	dsb	sy
1a001b44:	e7fe      	b.n	1a001b44 <xTimerCreateTimerTask+0x50>
BaseType_t xReturn = pdFAIL;
1a001b46:	4620      	mov	r0, r4
1a001b48:	e7f3      	b.n	1a001b32 <xTimerCreateTimerTask+0x3e>
1a001b4a:	2000      	movs	r0, #0
1a001b4c:	e7f1      	b.n	1a001b32 <xTimerCreateTimerTask+0x3e>
}
1a001b4e:	b008      	add	sp, #32
1a001b50:	bd10      	pop	{r4, pc}
1a001b52:	bf00      	nop
1a001b54:	10002ba0 	.word	0x10002ba0
1a001b58:	1a004ce8 	.word	0x1a004ce8
1a001b5c:	1a001e45 	.word	0x1a001e45
1a001b60:	10002ba4 	.word	0x10002ba4

1a001b64 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001b64:	b1c0      	cbz	r0, 1a001b98 <xTimerGenericCommand+0x34>
{
1a001b66:	b530      	push	{r4, r5, lr}
1a001b68:	b085      	sub	sp, #20
1a001b6a:	4615      	mov	r5, r2
1a001b6c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001b6e:	4a17      	ldr	r2, [pc, #92]	; (1a001bcc <xTimerGenericCommand+0x68>)
1a001b70:	6810      	ldr	r0, [r2, #0]
1a001b72:	b340      	cbz	r0, 1a001bc6 <xTimerGenericCommand+0x62>
1a001b74:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001b76:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001b78:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001b7a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001b7c:	2905      	cmp	r1, #5
1a001b7e:	dc1c      	bgt.n	1a001bba <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001b80:	f7ff fee2 	bl	1a001948 <xTaskGetSchedulerState>
1a001b84:	2802      	cmp	r0, #2
1a001b86:	d010      	beq.n	1a001baa <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001b88:	2300      	movs	r3, #0
1a001b8a:	461a      	mov	r2, r3
1a001b8c:	4669      	mov	r1, sp
1a001b8e:	480f      	ldr	r0, [pc, #60]	; (1a001bcc <xTimerGenericCommand+0x68>)
1a001b90:	6800      	ldr	r0, [r0, #0]
1a001b92:	f7fe ff07 	bl	1a0009a4 <xQueueGenericSend>
1a001b96:	e014      	b.n	1a001bc2 <xTimerGenericCommand+0x5e>
1a001b98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b9c:	f383 8811 	msr	BASEPRI, r3
1a001ba0:	f3bf 8f6f 	isb	sy
1a001ba4:	f3bf 8f4f 	dsb	sy
1a001ba8:	e7fe      	b.n	1a001ba8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001baa:	2300      	movs	r3, #0
1a001bac:	9a08      	ldr	r2, [sp, #32]
1a001bae:	4669      	mov	r1, sp
1a001bb0:	4806      	ldr	r0, [pc, #24]	; (1a001bcc <xTimerGenericCommand+0x68>)
1a001bb2:	6800      	ldr	r0, [r0, #0]
1a001bb4:	f7fe fef6 	bl	1a0009a4 <xQueueGenericSend>
1a001bb8:	e003      	b.n	1a001bc2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001bba:	2300      	movs	r3, #0
1a001bbc:	4669      	mov	r1, sp
1a001bbe:	f7fe ffb5 	bl	1a000b2c <xQueueGenericSendFromISR>
}
1a001bc2:	b005      	add	sp, #20
1a001bc4:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a001bc6:	2000      	movs	r0, #0
	return xReturn;
1a001bc8:	e7fb      	b.n	1a001bc2 <xTimerGenericCommand+0x5e>
1a001bca:	bf00      	nop
1a001bcc:	10002ba0 	.word	0x10002ba0

1a001bd0 <prvSwitchTimerLists>:
{
1a001bd0:	b570      	push	{r4, r5, r6, lr}
1a001bd2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001bd4:	4b1a      	ldr	r3, [pc, #104]	; (1a001c40 <prvSwitchTimerLists+0x70>)
1a001bd6:	681b      	ldr	r3, [r3, #0]
1a001bd8:	681a      	ldr	r2, [r3, #0]
1a001bda:	b352      	cbz	r2, 1a001c32 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001bdc:	68db      	ldr	r3, [r3, #12]
1a001bde:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001be0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001be2:	1d25      	adds	r5, r4, #4
1a001be4:	4628      	mov	r0, r5
1a001be6:	f7ff f930 	bl	1a000e4a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001bec:	4620      	mov	r0, r4
1a001bee:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001bf0:	69e3      	ldr	r3, [r4, #28]
1a001bf2:	2b01      	cmp	r3, #1
1a001bf4:	d1ee      	bne.n	1a001bd4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001bf6:	69a3      	ldr	r3, [r4, #24]
1a001bf8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001bfa:	429e      	cmp	r6, r3
1a001bfc:	d207      	bcs.n	1a001c0e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001bfe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001c00:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001c02:	4629      	mov	r1, r5
1a001c04:	4b0e      	ldr	r3, [pc, #56]	; (1a001c40 <prvSwitchTimerLists+0x70>)
1a001c06:	6818      	ldr	r0, [r3, #0]
1a001c08:	f7ff f905 	bl	1a000e16 <vListInsert>
1a001c0c:	e7e2      	b.n	1a001bd4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001c0e:	2100      	movs	r1, #0
1a001c10:	9100      	str	r1, [sp, #0]
1a001c12:	460b      	mov	r3, r1
1a001c14:	4632      	mov	r2, r6
1a001c16:	4620      	mov	r0, r4
1a001c18:	f7ff ffa4 	bl	1a001b64 <xTimerGenericCommand>
				configASSERT( xResult );
1a001c1c:	2800      	cmp	r0, #0
1a001c1e:	d1d9      	bne.n	1a001bd4 <prvSwitchTimerLists+0x4>
1a001c20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c24:	f383 8811 	msr	BASEPRI, r3
1a001c28:	f3bf 8f6f 	isb	sy
1a001c2c:	f3bf 8f4f 	dsb	sy
1a001c30:	e7fe      	b.n	1a001c30 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001c32:	4a04      	ldr	r2, [pc, #16]	; (1a001c44 <prvSwitchTimerLists+0x74>)
1a001c34:	6810      	ldr	r0, [r2, #0]
1a001c36:	4902      	ldr	r1, [pc, #8]	; (1a001c40 <prvSwitchTimerLists+0x70>)
1a001c38:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001c3a:	6013      	str	r3, [r2, #0]
}
1a001c3c:	b002      	add	sp, #8
1a001c3e:	bd70      	pop	{r4, r5, r6, pc}
1a001c40:	10002a7c 	.word	0x10002a7c
1a001c44:	10002a80 	.word	0x10002a80

1a001c48 <prvSampleTimeNow>:
{
1a001c48:	b538      	push	{r3, r4, r5, lr}
1a001c4a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001c4c:	f7ff fc36 	bl	1a0014bc <xTaskGetTickCount>
1a001c50:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001c52:	4b07      	ldr	r3, [pc, #28]	; (1a001c70 <prvSampleTimeNow+0x28>)
1a001c54:	681b      	ldr	r3, [r3, #0]
1a001c56:	4298      	cmp	r0, r3
1a001c58:	d305      	bcc.n	1a001c66 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001c5a:	2300      	movs	r3, #0
1a001c5c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001c5e:	4b04      	ldr	r3, [pc, #16]	; (1a001c70 <prvSampleTimeNow+0x28>)
1a001c60:	601c      	str	r4, [r3, #0]
}
1a001c62:	4620      	mov	r0, r4
1a001c64:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001c66:	f7ff ffb3 	bl	1a001bd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001c6a:	2301      	movs	r3, #1
1a001c6c:	602b      	str	r3, [r5, #0]
1a001c6e:	e7f6      	b.n	1a001c5e <prvSampleTimeNow+0x16>
1a001c70:	10002b4c 	.word	0x10002b4c

1a001c74 <prvProcessExpiredTimer>:
{
1a001c74:	b570      	push	{r4, r5, r6, lr}
1a001c76:	b082      	sub	sp, #8
1a001c78:	4605      	mov	r5, r0
1a001c7a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c7c:	4b14      	ldr	r3, [pc, #80]	; (1a001cd0 <prvProcessExpiredTimer+0x5c>)
1a001c7e:	681b      	ldr	r3, [r3, #0]
1a001c80:	68db      	ldr	r3, [r3, #12]
1a001c82:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001c84:	1d20      	adds	r0, r4, #4
1a001c86:	f7ff f8e0 	bl	1a000e4a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001c8a:	69e3      	ldr	r3, [r4, #28]
1a001c8c:	2b01      	cmp	r3, #1
1a001c8e:	d004      	beq.n	1a001c9a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001c92:	4620      	mov	r0, r4
1a001c94:	4798      	blx	r3
}
1a001c96:	b002      	add	sp, #8
1a001c98:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001c9a:	69a1      	ldr	r1, [r4, #24]
1a001c9c:	462b      	mov	r3, r5
1a001c9e:	4632      	mov	r2, r6
1a001ca0:	4429      	add	r1, r5
1a001ca2:	4620      	mov	r0, r4
1a001ca4:	f7ff feca 	bl	1a001a3c <prvInsertTimerInActiveList>
1a001ca8:	2800      	cmp	r0, #0
1a001caa:	d0f1      	beq.n	1a001c90 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001cac:	2100      	movs	r1, #0
1a001cae:	9100      	str	r1, [sp, #0]
1a001cb0:	460b      	mov	r3, r1
1a001cb2:	462a      	mov	r2, r5
1a001cb4:	4620      	mov	r0, r4
1a001cb6:	f7ff ff55 	bl	1a001b64 <xTimerGenericCommand>
			configASSERT( xResult );
1a001cba:	2800      	cmp	r0, #0
1a001cbc:	d1e8      	bne.n	1a001c90 <prvProcessExpiredTimer+0x1c>
1a001cbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cc2:	f383 8811 	msr	BASEPRI, r3
1a001cc6:	f3bf 8f6f 	isb	sy
1a001cca:	f3bf 8f4f 	dsb	sy
1a001cce:	e7fe      	b.n	1a001cce <prvProcessExpiredTimer+0x5a>
1a001cd0:	10002a7c 	.word	0x10002a7c

1a001cd4 <prvProcessTimerOrBlockTask>:
{
1a001cd4:	b570      	push	{r4, r5, r6, lr}
1a001cd6:	b082      	sub	sp, #8
1a001cd8:	4606      	mov	r6, r0
1a001cda:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001cdc:	f7ff fbe6 	bl	1a0014ac <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001ce0:	a801      	add	r0, sp, #4
1a001ce2:	f7ff ffb1 	bl	1a001c48 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001ce6:	9b01      	ldr	r3, [sp, #4]
1a001ce8:	bb23      	cbnz	r3, 1a001d34 <prvProcessTimerOrBlockTask+0x60>
1a001cea:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001cec:	b90c      	cbnz	r4, 1a001cf2 <prvProcessTimerOrBlockTask+0x1e>
1a001cee:	42b0      	cmp	r0, r6
1a001cf0:	d219      	bcs.n	1a001d26 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
1a001cf2:	b12c      	cbz	r4, 1a001d00 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001cf4:	4b11      	ldr	r3, [pc, #68]	; (1a001d3c <prvProcessTimerOrBlockTask+0x68>)
1a001cf6:	681b      	ldr	r3, [r3, #0]
1a001cf8:	681c      	ldr	r4, [r3, #0]
1a001cfa:	fab4 f484 	clz	r4, r4
1a001cfe:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001d00:	4622      	mov	r2, r4
1a001d02:	1b71      	subs	r1, r6, r5
1a001d04:	4b0e      	ldr	r3, [pc, #56]	; (1a001d40 <prvProcessTimerOrBlockTask+0x6c>)
1a001d06:	6818      	ldr	r0, [r3, #0]
1a001d08:	f7ff f842 	bl	1a000d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001d0c:	f7ff fc6c 	bl	1a0015e8 <xTaskResumeAll>
1a001d10:	b938      	cbnz	r0, 1a001d22 <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
1a001d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d16:	4b0b      	ldr	r3, [pc, #44]	; (1a001d44 <prvProcessTimerOrBlockTask+0x70>)
1a001d18:	601a      	str	r2, [r3, #0]
1a001d1a:	f3bf 8f4f 	dsb	sy
1a001d1e:	f3bf 8f6f 	isb	sy
}
1a001d22:	b002      	add	sp, #8
1a001d24:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
1a001d26:	f7ff fc5f 	bl	1a0015e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001d2a:	4629      	mov	r1, r5
1a001d2c:	4630      	mov	r0, r6
1a001d2e:	f7ff ffa1 	bl	1a001c74 <prvProcessExpiredTimer>
1a001d32:	e7f6      	b.n	1a001d22 <prvProcessTimerOrBlockTask+0x4e>
			( void ) xTaskResumeAll();
1a001d34:	f7ff fc58 	bl	1a0015e8 <xTaskResumeAll>
}
1a001d38:	e7f3      	b.n	1a001d22 <prvProcessTimerOrBlockTask+0x4e>
1a001d3a:	bf00      	nop
1a001d3c:	10002a80 	.word	0x10002a80
1a001d40:	10002ba0 	.word	0x10002ba0
1a001d44:	e000ed04 	.word	0xe000ed04

1a001d48 <prvProcessReceivedCommands>:
{
1a001d48:	b530      	push	{r4, r5, lr}
1a001d4a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d4c:	e002      	b.n	1a001d54 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001d4e:	9b04      	ldr	r3, [sp, #16]
1a001d50:	2b00      	cmp	r3, #0
1a001d52:	da0f      	bge.n	1a001d74 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d54:	2200      	movs	r2, #0
1a001d56:	a904      	add	r1, sp, #16
1a001d58:	4b39      	ldr	r3, [pc, #228]	; (1a001e40 <prvProcessReceivedCommands+0xf8>)
1a001d5a:	6818      	ldr	r0, [r3, #0]
1a001d5c:	f7fe ff56 	bl	1a000c0c <xQueueReceive>
1a001d60:	2800      	cmp	r0, #0
1a001d62:	d06a      	beq.n	1a001e3a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001d64:	9b04      	ldr	r3, [sp, #16]
1a001d66:	2b00      	cmp	r3, #0
1a001d68:	daf1      	bge.n	1a001d4e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001d6a:	9907      	ldr	r1, [sp, #28]
1a001d6c:	9806      	ldr	r0, [sp, #24]
1a001d6e:	9b05      	ldr	r3, [sp, #20]
1a001d70:	4798      	blx	r3
1a001d72:	e7ec      	b.n	1a001d4e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001d74:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001d76:	6963      	ldr	r3, [r4, #20]
1a001d78:	b113      	cbz	r3, 1a001d80 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d7a:	1d20      	adds	r0, r4, #4
1a001d7c:	f7ff f865 	bl	1a000e4a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001d80:	a803      	add	r0, sp, #12
1a001d82:	f7ff ff61 	bl	1a001c48 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001d86:	9b04      	ldr	r3, [sp, #16]
1a001d88:	2b09      	cmp	r3, #9
1a001d8a:	d8e3      	bhi.n	1a001d54 <prvProcessReceivedCommands+0xc>
1a001d8c:	a201      	add	r2, pc, #4	; (adr r2, 1a001d94 <prvProcessReceivedCommands+0x4c>)
1a001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001d92:	bf00      	nop
1a001d94:	1a001dbd 	.word	0x1a001dbd
1a001d98:	1a001dbd 	.word	0x1a001dbd
1a001d9c:	1a001dbd 	.word	0x1a001dbd
1a001da0:	1a001d55 	.word	0x1a001d55
1a001da4:	1a001e05 	.word	0x1a001e05
1a001da8:	1a001e2b 	.word	0x1a001e2b
1a001dac:	1a001dbd 	.word	0x1a001dbd
1a001db0:	1a001dbd 	.word	0x1a001dbd
1a001db4:	1a001d55 	.word	0x1a001d55
1a001db8:	1a001e05 	.word	0x1a001e05
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001dbc:	9905      	ldr	r1, [sp, #20]
1a001dbe:	69a5      	ldr	r5, [r4, #24]
1a001dc0:	460b      	mov	r3, r1
1a001dc2:	4602      	mov	r2, r0
1a001dc4:	4429      	add	r1, r5
1a001dc6:	4620      	mov	r0, r4
1a001dc8:	f7ff fe38 	bl	1a001a3c <prvInsertTimerInActiveList>
1a001dcc:	2800      	cmp	r0, #0
1a001dce:	d0c1      	beq.n	1a001d54 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001dd2:	4620      	mov	r0, r4
1a001dd4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001dd6:	69e3      	ldr	r3, [r4, #28]
1a001dd8:	2b01      	cmp	r3, #1
1a001dda:	d1bb      	bne.n	1a001d54 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001ddc:	69a2      	ldr	r2, [r4, #24]
1a001dde:	2100      	movs	r1, #0
1a001de0:	9100      	str	r1, [sp, #0]
1a001de2:	460b      	mov	r3, r1
1a001de4:	9805      	ldr	r0, [sp, #20]
1a001de6:	4402      	add	r2, r0
1a001de8:	4620      	mov	r0, r4
1a001dea:	f7ff febb 	bl	1a001b64 <xTimerGenericCommand>
							configASSERT( xResult );
1a001dee:	2800      	cmp	r0, #0
1a001df0:	d1b0      	bne.n	1a001d54 <prvProcessReceivedCommands+0xc>
1a001df2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001df6:	f383 8811 	msr	BASEPRI, r3
1a001dfa:	f3bf 8f6f 	isb	sy
1a001dfe:	f3bf 8f4f 	dsb	sy
1a001e02:	e7fe      	b.n	1a001e02 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001e04:	9905      	ldr	r1, [sp, #20]
1a001e06:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001e08:	b131      	cbz	r1, 1a001e18 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001e0a:	4603      	mov	r3, r0
1a001e0c:	4602      	mov	r2, r0
1a001e0e:	4401      	add	r1, r0
1a001e10:	4620      	mov	r0, r4
1a001e12:	f7ff fe13 	bl	1a001a3c <prvInsertTimerInActiveList>
					break;
1a001e16:	e79d      	b.n	1a001d54 <prvProcessReceivedCommands+0xc>
1a001e18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e1c:	f383 8811 	msr	BASEPRI, r3
1a001e20:	f3bf 8f6f 	isb	sy
1a001e24:	f3bf 8f4f 	dsb	sy
1a001e28:	e7fe      	b.n	1a001e28 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001e2a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001e2e:	2b00      	cmp	r3, #0
1a001e30:	d190      	bne.n	1a001d54 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001e32:	4620      	mov	r0, r4
1a001e34:	f7fe fc3c 	bl	1a0006b0 <vPortFree>
1a001e38:	e78c      	b.n	1a001d54 <prvProcessReceivedCommands+0xc>
}
1a001e3a:	b009      	add	sp, #36	; 0x24
1a001e3c:	bd30      	pop	{r4, r5, pc}
1a001e3e:	bf00      	nop
1a001e40:	10002ba0 	.word	0x10002ba0

1a001e44 <prvTimerTask>:
{
1a001e44:	b500      	push	{lr}
1a001e46:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001e48:	a801      	add	r0, sp, #4
1a001e4a:	f7ff fde7 	bl	1a001a1c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001e4e:	9901      	ldr	r1, [sp, #4]
1a001e50:	f7ff ff40 	bl	1a001cd4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001e54:	f7ff ff78 	bl	1a001d48 <prvProcessReceivedCommands>
1a001e58:	e7f6      	b.n	1a001e48 <prvTimerTask+0x4>
1a001e5a:	Address 0x000000001a001e5a is out of bounds.


1a001e5c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001e5c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001e5e:	2300      	movs	r3, #0
1a001e60:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001e62:	4b0d      	ldr	r3, [pc, #52]	; (1a001e98 <prvTaskExitError+0x3c>)
1a001e64:	681b      	ldr	r3, [r3, #0]
1a001e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001e6a:	d008      	beq.n	1a001e7e <prvTaskExitError+0x22>
1a001e6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e70:	f383 8811 	msr	BASEPRI, r3
1a001e74:	f3bf 8f6f 	isb	sy
1a001e78:	f3bf 8f4f 	dsb	sy
1a001e7c:	e7fe      	b.n	1a001e7c <prvTaskExitError+0x20>
1a001e7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e82:	f383 8811 	msr	BASEPRI, r3
1a001e86:	f3bf 8f6f 	isb	sy
1a001e8a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001e8e:	9b01      	ldr	r3, [sp, #4]
1a001e90:	2b00      	cmp	r3, #0
1a001e92:	d0fc      	beq.n	1a001e8e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001e94:	b002      	add	sp, #8
1a001e96:	4770      	bx	lr
1a001e98:	10000000 	.word	0x10000000

1a001e9c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001e9c:	4808      	ldr	r0, [pc, #32]	; (1a001ec0 <prvPortStartFirstTask+0x24>)
1a001e9e:	6800      	ldr	r0, [r0, #0]
1a001ea0:	6800      	ldr	r0, [r0, #0]
1a001ea2:	f380 8808 	msr	MSP, r0
1a001ea6:	f04f 0000 	mov.w	r0, #0
1a001eaa:	f380 8814 	msr	CONTROL, r0
1a001eae:	b662      	cpsie	i
1a001eb0:	b661      	cpsie	f
1a001eb2:	f3bf 8f4f 	dsb	sy
1a001eb6:	f3bf 8f6f 	isb	sy
1a001eba:	df00      	svc	0
1a001ebc:	bf00      	nop
1a001ebe:	0000      	.short	0x0000
1a001ec0:	e000ed08 	.word	0xe000ed08

1a001ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001ed4 <vPortEnableVFP+0x10>
1a001ec8:	6801      	ldr	r1, [r0, #0]
1a001eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001ece:	6001      	str	r1, [r0, #0]
1a001ed0:	4770      	bx	lr
1a001ed2:	0000      	.short	0x0000
1a001ed4:	e000ed88 	.word	0xe000ed88

1a001ed8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001edc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001ee0:	f021 0101 	bic.w	r1, r1, #1
1a001ee4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001ee8:	4b05      	ldr	r3, [pc, #20]	; (1a001f00 <pxPortInitialiseStack+0x28>)
1a001eea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001eee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001ef2:	f06f 0302 	mvn.w	r3, #2
1a001ef6:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001efa:	3844      	subs	r0, #68	; 0x44
1a001efc:	4770      	bx	lr
1a001efe:	bf00      	nop
1a001f00:	1a001e5d 	.word	0x1a001e5d
1a001f04:	ffffffff 	.word	0xffffffff
1a001f08:	ffffffff 	.word	0xffffffff
1a001f0c:	ffffffff 	.word	0xffffffff

1a001f10 <SVC_Handler>:
	__asm volatile (
1a001f10:	4b07      	ldr	r3, [pc, #28]	; (1a001f30 <pxCurrentTCBConst2>)
1a001f12:	6819      	ldr	r1, [r3, #0]
1a001f14:	6808      	ldr	r0, [r1, #0]
1a001f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001f1a:	f380 8809 	msr	PSP, r0
1a001f1e:	f3bf 8f6f 	isb	sy
1a001f22:	f04f 0000 	mov.w	r0, #0
1a001f26:	f380 8811 	msr	BASEPRI, r0
1a001f2a:	4770      	bx	lr
1a001f2c:	f3af 8000 	nop.w

1a001f30 <pxCurrentTCBConst2>:
1a001f30:	10002954 	.word	0x10002954

1a001f34 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
1a001f34:	4b07      	ldr	r3, [pc, #28]	; (1a001f54 <vPortEndScheduler+0x20>)
1a001f36:	681b      	ldr	r3, [r3, #0]
1a001f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a001f3c:	d008      	beq.n	1a001f50 <vPortEndScheduler+0x1c>
1a001f3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f42:	f383 8811 	msr	BASEPRI, r3
1a001f46:	f3bf 8f6f 	isb	sy
1a001f4a:	f3bf 8f4f 	dsb	sy
1a001f4e:	e7fe      	b.n	1a001f4e <vPortEndScheduler+0x1a>
1a001f50:	4770      	bx	lr
1a001f52:	bf00      	nop
1a001f54:	10000000 	.word	0x10000000

1a001f58 <vPortEnterCritical>:
1a001f58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f5c:	f383 8811 	msr	BASEPRI, r3
1a001f60:	f3bf 8f6f 	isb	sy
1a001f64:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001f68:	4a0a      	ldr	r2, [pc, #40]	; (1a001f94 <vPortEnterCritical+0x3c>)
1a001f6a:	6813      	ldr	r3, [r2, #0]
1a001f6c:	3301      	adds	r3, #1
1a001f6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001f70:	2b01      	cmp	r3, #1
1a001f72:	d10d      	bne.n	1a001f90 <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001f74:	4b08      	ldr	r3, [pc, #32]	; (1a001f98 <vPortEnterCritical+0x40>)
1a001f76:	681b      	ldr	r3, [r3, #0]
1a001f78:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001f7c:	d008      	beq.n	1a001f90 <vPortEnterCritical+0x38>
1a001f7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f82:	f383 8811 	msr	BASEPRI, r3
1a001f86:	f3bf 8f6f 	isb	sy
1a001f8a:	f3bf 8f4f 	dsb	sy
1a001f8e:	e7fe      	b.n	1a001f8e <vPortEnterCritical+0x36>
1a001f90:	4770      	bx	lr
1a001f92:	bf00      	nop
1a001f94:	10000000 	.word	0x10000000
1a001f98:	e000ed04 	.word	0xe000ed04

1a001f9c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001f9c:	4b09      	ldr	r3, [pc, #36]	; (1a001fc4 <vPortExitCritical+0x28>)
1a001f9e:	681b      	ldr	r3, [r3, #0]
1a001fa0:	b943      	cbnz	r3, 1a001fb4 <vPortExitCritical+0x18>
1a001fa2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fa6:	f383 8811 	msr	BASEPRI, r3
1a001faa:	f3bf 8f6f 	isb	sy
1a001fae:	f3bf 8f4f 	dsb	sy
1a001fb2:	e7fe      	b.n	1a001fb2 <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001fb4:	3b01      	subs	r3, #1
1a001fb6:	4a03      	ldr	r2, [pc, #12]	; (1a001fc4 <vPortExitCritical+0x28>)
1a001fb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001fba:	b90b      	cbnz	r3, 1a001fc0 <vPortExitCritical+0x24>
	__asm volatile
1a001fbc:	f383 8811 	msr	BASEPRI, r3
1a001fc0:	4770      	bx	lr
1a001fc2:	bf00      	nop
1a001fc4:	10000000 	.word	0x10000000
1a001fc8:	ffffffff 	.word	0xffffffff
1a001fcc:	ffffffff 	.word	0xffffffff

1a001fd0 <PendSV_Handler>:
	__asm volatile
1a001fd0:	f3ef 8009 	mrs	r0, PSP
1a001fd4:	f3bf 8f6f 	isb	sy
1a001fd8:	4b15      	ldr	r3, [pc, #84]	; (1a002030 <pxCurrentTCBConst>)
1a001fda:	681a      	ldr	r2, [r3, #0]
1a001fdc:	f01e 0f10 	tst.w	lr, #16
1a001fe0:	bf08      	it	eq
1a001fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001fea:	6010      	str	r0, [r2, #0]
1a001fec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001ff0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001ff4:	f380 8811 	msr	BASEPRI, r0
1a001ff8:	f3bf 8f4f 	dsb	sy
1a001ffc:	f3bf 8f6f 	isb	sy
1a002000:	f7ff fb70 	bl	1a0016e4 <vTaskSwitchContext>
1a002004:	f04f 0000 	mov.w	r0, #0
1a002008:	f380 8811 	msr	BASEPRI, r0
1a00200c:	bc09      	pop	{r0, r3}
1a00200e:	6819      	ldr	r1, [r3, #0]
1a002010:	6808      	ldr	r0, [r1, #0]
1a002012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002016:	f01e 0f10 	tst.w	lr, #16
1a00201a:	bf08      	it	eq
1a00201c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002020:	f380 8809 	msr	PSP, r0
1a002024:	f3bf 8f6f 	isb	sy
1a002028:	4770      	bx	lr
1a00202a:	bf00      	nop
1a00202c:	f3af 8000 	nop.w

1a002030 <pxCurrentTCBConst>:
1a002030:	10002954 	.word	0x10002954

1a002034 <SysTick_Handler>:
{
1a002034:	b508      	push	{r3, lr}
	__asm volatile
1a002036:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00203a:	f383 8811 	msr	BASEPRI, r3
1a00203e:	f3bf 8f6f 	isb	sy
1a002042:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002046:	f7ff fa3f 	bl	1a0014c8 <xTaskIncrementTick>
1a00204a:	b118      	cbz	r0, 1a002054 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00204c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002050:	4b02      	ldr	r3, [pc, #8]	; (1a00205c <SysTick_Handler+0x28>)
1a002052:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002054:	2300      	movs	r3, #0
1a002056:	f383 8811 	msr	BASEPRI, r3
1a00205a:	bd08      	pop	{r3, pc}
1a00205c:	e000ed04 	.word	0xe000ed04

1a002060 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002060:	4a08      	ldr	r2, [pc, #32]	; (1a002084 <vPortSetupTimerInterrupt+0x24>)
1a002062:	2300      	movs	r3, #0
1a002064:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002066:	4908      	ldr	r1, [pc, #32]	; (1a002088 <vPortSetupTimerInterrupt+0x28>)
1a002068:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00206a:	4b08      	ldr	r3, [pc, #32]	; (1a00208c <vPortSetupTimerInterrupt+0x2c>)
1a00206c:	681b      	ldr	r3, [r3, #0]
1a00206e:	4908      	ldr	r1, [pc, #32]	; (1a002090 <vPortSetupTimerInterrupt+0x30>)
1a002070:	fba1 1303 	umull	r1, r3, r1, r3
1a002074:	095b      	lsrs	r3, r3, #5
1a002076:	3b01      	subs	r3, #1
1a002078:	4906      	ldr	r1, [pc, #24]	; (1a002094 <vPortSetupTimerInterrupt+0x34>)
1a00207a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00207c:	2307      	movs	r3, #7
1a00207e:	6013      	str	r3, [r2, #0]
1a002080:	4770      	bx	lr
1a002082:	bf00      	nop
1a002084:	e000e010 	.word	0xe000e010
1a002088:	e000e018 	.word	0xe000e018
1a00208c:	10002c0c 	.word	0x10002c0c
1a002090:	51eb851f 	.word	0x51eb851f
1a002094:	e000e014 	.word	0xe000e014

1a002098 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002098:	4b3a      	ldr	r3, [pc, #232]	; (1a002184 <xPortStartScheduler+0xec>)
1a00209a:	681a      	ldr	r2, [r3, #0]
1a00209c:	4b3a      	ldr	r3, [pc, #232]	; (1a002188 <xPortStartScheduler+0xf0>)
1a00209e:	429a      	cmp	r2, r3
1a0020a0:	d108      	bne.n	1a0020b4 <xPortStartScheduler+0x1c>
	__asm volatile
1a0020a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020a6:	f383 8811 	msr	BASEPRI, r3
1a0020aa:	f3bf 8f6f 	isb	sy
1a0020ae:	f3bf 8f4f 	dsb	sy
1a0020b2:	e7fe      	b.n	1a0020b2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0020b4:	4b33      	ldr	r3, [pc, #204]	; (1a002184 <xPortStartScheduler+0xec>)
1a0020b6:	681a      	ldr	r2, [r3, #0]
1a0020b8:	4b34      	ldr	r3, [pc, #208]	; (1a00218c <xPortStartScheduler+0xf4>)
1a0020ba:	429a      	cmp	r2, r3
1a0020bc:	d108      	bne.n	1a0020d0 <xPortStartScheduler+0x38>
1a0020be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020c2:	f383 8811 	msr	BASEPRI, r3
1a0020c6:	f3bf 8f6f 	isb	sy
1a0020ca:	f3bf 8f4f 	dsb	sy
1a0020ce:	e7fe      	b.n	1a0020ce <xPortStartScheduler+0x36>
{
1a0020d0:	b510      	push	{r4, lr}
1a0020d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0020d4:	4b2e      	ldr	r3, [pc, #184]	; (1a002190 <xPortStartScheduler+0xf8>)
1a0020d6:	781a      	ldrb	r2, [r3, #0]
1a0020d8:	b2d2      	uxtb	r2, r2
1a0020da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0020dc:	22ff      	movs	r2, #255	; 0xff
1a0020de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0020e0:	781b      	ldrb	r3, [r3, #0]
1a0020e2:	b2db      	uxtb	r3, r3
1a0020e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0020e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0020ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0020f0:	4a28      	ldr	r2, [pc, #160]	; (1a002194 <xPortStartScheduler+0xfc>)
1a0020f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0020f4:	2207      	movs	r2, #7
1a0020f6:	4b28      	ldr	r3, [pc, #160]	; (1a002198 <xPortStartScheduler+0x100>)
1a0020f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0020fa:	e009      	b.n	1a002110 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0020fc:	4a26      	ldr	r2, [pc, #152]	; (1a002198 <xPortStartScheduler+0x100>)
1a0020fe:	6813      	ldr	r3, [r2, #0]
1a002100:	3b01      	subs	r3, #1
1a002102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002104:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002108:	005b      	lsls	r3, r3, #1
1a00210a:	b2db      	uxtb	r3, r3
1a00210c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002110:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002114:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002118:	d1f0      	bne.n	1a0020fc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00211a:	4b1f      	ldr	r3, [pc, #124]	; (1a002198 <xPortStartScheduler+0x100>)
1a00211c:	681b      	ldr	r3, [r3, #0]
1a00211e:	2b04      	cmp	r3, #4
1a002120:	d008      	beq.n	1a002134 <xPortStartScheduler+0x9c>
1a002122:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002126:	f383 8811 	msr	BASEPRI, r3
1a00212a:	f3bf 8f6f 	isb	sy
1a00212e:	f3bf 8f4f 	dsb	sy
1a002132:	e7fe      	b.n	1a002132 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002134:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00213a:	4a17      	ldr	r2, [pc, #92]	; (1a002198 <xPortStartScheduler+0x100>)
1a00213c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00213e:	9b01      	ldr	r3, [sp, #4]
1a002140:	b2db      	uxtb	r3, r3
1a002142:	4a13      	ldr	r2, [pc, #76]	; (1a002190 <xPortStartScheduler+0xf8>)
1a002144:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002146:	4b15      	ldr	r3, [pc, #84]	; (1a00219c <xPortStartScheduler+0x104>)
1a002148:	681a      	ldr	r2, [r3, #0]
1a00214a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00214e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002150:	681a      	ldr	r2, [r3, #0]
1a002152:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002156:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002158:	f7ff ff82 	bl	1a002060 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00215c:	2400      	movs	r4, #0
1a00215e:	4b10      	ldr	r3, [pc, #64]	; (1a0021a0 <xPortStartScheduler+0x108>)
1a002160:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002162:	f7ff feaf 	bl	1a001ec4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002166:	4a0f      	ldr	r2, [pc, #60]	; (1a0021a4 <xPortStartScheduler+0x10c>)
1a002168:	6813      	ldr	r3, [r2, #0]
1a00216a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00216e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002170:	f7ff fe94 	bl	1a001e9c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002174:	f7ff fab6 	bl	1a0016e4 <vTaskSwitchContext>
	prvTaskExitError();
1a002178:	f7ff fe70 	bl	1a001e5c <prvTaskExitError>
}
1a00217c:	4620      	mov	r0, r4
1a00217e:	b002      	add	sp, #8
1a002180:	bd10      	pop	{r4, pc}
1a002182:	bf00      	nop
1a002184:	e000ed00 	.word	0xe000ed00
1a002188:	410fc271 	.word	0x410fc271
1a00218c:	410fc270 	.word	0x410fc270
1a002190:	e000e400 	.word	0xe000e400
1a002194:	10002ba8 	.word	0x10002ba8
1a002198:	10002bac 	.word	0x10002bac
1a00219c:	e000ed20 	.word	0xe000ed20
1a0021a0:	10000000 	.word	0x10000000
1a0021a4:	e000ef34 	.word	0xe000ef34

1a0021a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0021a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0021ac:	2b0f      	cmp	r3, #15
1a0021ae:	d90f      	bls.n	1a0021d0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0021b0:	4a10      	ldr	r2, [pc, #64]	; (1a0021f4 <vPortValidateInterruptPriority+0x4c>)
1a0021b2:	5c9b      	ldrb	r3, [r3, r2]
1a0021b4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0021b6:	4a10      	ldr	r2, [pc, #64]	; (1a0021f8 <vPortValidateInterruptPriority+0x50>)
1a0021b8:	7812      	ldrb	r2, [r2, #0]
1a0021ba:	4293      	cmp	r3, r2
1a0021bc:	d208      	bcs.n	1a0021d0 <vPortValidateInterruptPriority+0x28>
1a0021be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021c2:	f383 8811 	msr	BASEPRI, r3
1a0021c6:	f3bf 8f6f 	isb	sy
1a0021ca:	f3bf 8f4f 	dsb	sy
1a0021ce:	e7fe      	b.n	1a0021ce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0021d0:	4b0a      	ldr	r3, [pc, #40]	; (1a0021fc <vPortValidateInterruptPriority+0x54>)
1a0021d2:	681b      	ldr	r3, [r3, #0]
1a0021d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0021d8:	4a09      	ldr	r2, [pc, #36]	; (1a002200 <vPortValidateInterruptPriority+0x58>)
1a0021da:	6812      	ldr	r2, [r2, #0]
1a0021dc:	4293      	cmp	r3, r2
1a0021de:	d908      	bls.n	1a0021f2 <vPortValidateInterruptPriority+0x4a>
1a0021e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021e4:	f383 8811 	msr	BASEPRI, r3
1a0021e8:	f3bf 8f6f 	isb	sy
1a0021ec:	f3bf 8f4f 	dsb	sy
1a0021f0:	e7fe      	b.n	1a0021f0 <vPortValidateInterruptPriority+0x48>
1a0021f2:	4770      	bx	lr
1a0021f4:	e000e3f0 	.word	0xe000e3f0
1a0021f8:	10002ba8 	.word	0x10002ba8
1a0021fc:	e000ed0c 	.word	0xe000ed0c
1a002200:	10002bac 	.word	0x10002bac

1a002204 <_kbhit>:
#endif

static int keyIdx;

int _kbhit()
{
1a002204:	b510      	push	{r4, lr}
   for ( int i=0; i<CONIO_KEYS; i++ )
1a002206:	2400      	movs	r4, #0
1a002208:	2c03      	cmp	r4, #3
1a00220a:	dc0a      	bgt.n	1a002222 <_kbhit+0x1e>
      if ( gpioRead(keys[i]) == 0 ) {
1a00220c:	4b06      	ldr	r3, [pc, #24]	; (1a002228 <_kbhit+0x24>)
1a00220e:	5718      	ldrsb	r0, [r3, r4]
1a002210:	f000 ff2c 	bl	1a00306c <gpioRead>
1a002214:	b108      	cbz	r0, 1a00221a <_kbhit+0x16>
   for ( int i=0; i<CONIO_KEYS; i++ )
1a002216:	3401      	adds	r4, #1
1a002218:	e7f6      	b.n	1a002208 <_kbhit+0x4>
         keyIdx = i;
1a00221a:	4b04      	ldr	r3, [pc, #16]	; (1a00222c <_kbhit+0x28>)
1a00221c:	601c      	str	r4, [r3, #0]
         return 1;
1a00221e:	2001      	movs	r0, #1
1a002220:	bd10      	pop	{r4, pc}
      }
   return 0;
1a002222:	2000      	movs	r0, #0
}
1a002224:	bd10      	pop	{r4, pc}
1a002226:	bf00      	nop
1a002228:	1a004cf0 	.word	0x1a004cf0
1a00222c:	10002bb0 	.word	0x10002bb0

1a002230 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002230:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002232:	2201      	movs	r2, #1
1a002234:	4b04      	ldr	r3, [pc, #16]	; (1a002248 <DAC_IRQHandler+0x18>)
1a002236:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00223a:	4b04      	ldr	r3, [pc, #16]	; (1a00224c <DAC_IRQHandler+0x1c>)
1a00223c:	681b      	ldr	r3, [r3, #0]
1a00223e:	b113      	cbz	r3, 1a002246 <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002240:	4b02      	ldr	r3, [pc, #8]	; (1a00224c <DAC_IRQHandler+0x1c>)
1a002242:	681b      	ldr	r3, [r3, #0]
1a002244:	4798      	blx	r3
1a002246:	bd08      	pop	{r3, pc}
1a002248:	e000e100 	.word	0xe000e100
1a00224c:	10002bb4 	.word	0x10002bb4

1a002250 <vPrintString>:
BaseType_t xKeyPressesStopApplication = pdTRUE;

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
1a002250:	b510      	push	{r4, lr}
1a002252:	4604      	mov	r4, r0
   BaseType_t xKeyHit = pdFALSE;

   // Print the string, using a critical section as a crude method of mutual
   // exclusion.
   taskENTER_CRITICAL();
1a002254:	f7ff fe80 	bl	1a001f58 <vPortEnterCritical>
   {
      printf( "%s", pcString );
1a002258:	4621      	mov	r1, r4
1a00225a:	480c      	ldr	r0, [pc, #48]	; (1a00228c <vPrintString+0x3c>)
1a00225c:	f002 f842 	bl	1a0042e4 <iprintf>
      fflush( stdout );
1a002260:	4b0b      	ldr	r3, [pc, #44]	; (1a002290 <vPrintString+0x40>)
1a002262:	681b      	ldr	r3, [r3, #0]
1a002264:	6898      	ldr	r0, [r3, #8]
1a002266:	f001 f991 	bl	1a00358c <fflush>

      // Allow any key to stop the application.
      if( xKeyPressesStopApplication == pdTRUE ) {
1a00226a:	4b0a      	ldr	r3, [pc, #40]	; (1a002294 <vPrintString+0x44>)
1a00226c:	681b      	ldr	r3, [r3, #0]
1a00226e:	2b01      	cmp	r3, #1
1a002270:	d004      	beq.n	1a00227c <vPrintString+0x2c>
   BaseType_t xKeyHit = pdFALSE;
1a002272:	2400      	movs	r4, #0
         xKeyHit = _kbhit();
      }
   }
   taskEXIT_CRITICAL();
1a002274:	f7ff fe92 	bl	1a001f9c <vPortExitCritical>

   // Allow any key to stop the application running. A real application that
   // actually used the key value should protect access to the keyboard too.
   if( xKeyHit != pdFALSE ) {
1a002278:	b924      	cbnz	r4, 1a002284 <vPrintString+0x34>
1a00227a:	bd10      	pop	{r4, pc}
         xKeyHit = _kbhit();
1a00227c:	f7ff ffc2 	bl	1a002204 <_kbhit>
1a002280:	4604      	mov	r4, r0
1a002282:	e7f7      	b.n	1a002274 <vPrintString+0x24>
      vTaskEndScheduler();
1a002284:	f7ff f900 	bl	1a001488 <vTaskEndScheduler>
   }
}
1a002288:	e7f7      	b.n	1a00227a <vPrintString+0x2a>
1a00228a:	bf00      	nop
1a00228c:	1a004cf4 	.word	0x1a004cf4
1a002290:	10000040 	.word	0x10000040
1a002294:	10000004 	.word	0x10000004

1a002298 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002298:	2200      	movs	r2, #0
1a00229a:	2a05      	cmp	r2, #5
1a00229c:	d819      	bhi.n	1a0022d2 <Board_LED_Init+0x3a>
{
1a00229e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0022a0:	490c      	ldr	r1, [pc, #48]	; (1a0022d4 <Board_LED_Init+0x3c>)
1a0022a2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0022a6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0022aa:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0022ac:	4b0a      	ldr	r3, [pc, #40]	; (1a0022d8 <Board_LED_Init+0x40>)
1a0022ae:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0022b2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0022b6:	2001      	movs	r0, #1
1a0022b8:	40a0      	lsls	r0, r4
1a0022ba:	4301      	orrs	r1, r0
1a0022bc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0022c0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0022c4:	2100      	movs	r1, #0
1a0022c6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0022c8:	3201      	adds	r2, #1
1a0022ca:	2a05      	cmp	r2, #5
1a0022cc:	d9e8      	bls.n	1a0022a0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0022ce:	bc70      	pop	{r4, r5, r6}
1a0022d0:	4770      	bx	lr
1a0022d2:	4770      	bx	lr
1a0022d4:	1a004d04 	.word	0x1a004d04
1a0022d8:	400f4000 	.word	0x400f4000

1a0022dc <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0022dc:	2300      	movs	r3, #0
1a0022de:	2b03      	cmp	r3, #3
1a0022e0:	d816      	bhi.n	1a002310 <Board_TEC_Init+0x34>
{
1a0022e2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0022e4:	490b      	ldr	r1, [pc, #44]	; (1a002314 <Board_TEC_Init+0x38>)
1a0022e6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0022ea:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0022ee:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0022f0:	4c09      	ldr	r4, [pc, #36]	; (1a002318 <Board_TEC_Init+0x3c>)
1a0022f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0022f6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0022fa:	2001      	movs	r0, #1
1a0022fc:	40a8      	lsls	r0, r5
1a0022fe:	ea21 0100 	bic.w	r1, r1, r0
1a002302:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002306:	3301      	adds	r3, #1
1a002308:	2b03      	cmp	r3, #3
1a00230a:	d9eb      	bls.n	1a0022e4 <Board_TEC_Init+0x8>
   }
}
1a00230c:	bc30      	pop	{r4, r5}
1a00230e:	4770      	bx	lr
1a002310:	4770      	bx	lr
1a002312:	bf00      	nop
1a002314:	1a004cfc 	.word	0x1a004cfc
1a002318:	400f4000 	.word	0x400f4000

1a00231c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00231c:	2300      	movs	r3, #0
1a00231e:	2b08      	cmp	r3, #8
1a002320:	d816      	bhi.n	1a002350 <Board_GPIO_Init+0x34>
{
1a002322:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002324:	490b      	ldr	r1, [pc, #44]	; (1a002354 <Board_GPIO_Init+0x38>)
1a002326:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00232a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00232e:	784d      	ldrb	r5, [r1, #1]
1a002330:	4c09      	ldr	r4, [pc, #36]	; (1a002358 <Board_GPIO_Init+0x3c>)
1a002332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002336:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00233a:	2001      	movs	r0, #1
1a00233c:	40a8      	lsls	r0, r5
1a00233e:	ea21 0100 	bic.w	r1, r1, r0
1a002342:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002346:	3301      	adds	r3, #1
1a002348:	2b08      	cmp	r3, #8
1a00234a:	d9eb      	bls.n	1a002324 <Board_GPIO_Init+0x8>
   }
}
1a00234c:	bc30      	pop	{r4, r5}
1a00234e:	4770      	bx	lr
1a002350:	4770      	bx	lr
1a002352:	bf00      	nop
1a002354:	1a004d10 	.word	0x1a004d10
1a002358:	400f4000 	.word	0x400f4000

1a00235c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00235c:	b510      	push	{r4, lr}
1a00235e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002360:	4c08      	ldr	r4, [pc, #32]	; (1a002384 <Board_ADC_Init+0x28>)
1a002362:	4669      	mov	r1, sp
1a002364:	4620      	mov	r0, r4
1a002366:	f000 f9f3 	bl	1a002750 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00236a:	4a07      	ldr	r2, [pc, #28]	; (1a002388 <Board_ADC_Init+0x2c>)
1a00236c:	4669      	mov	r1, sp
1a00236e:	4620      	mov	r0, r4
1a002370:	f000 fa0e 	bl	1a002790 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002374:	2200      	movs	r2, #0
1a002376:	4669      	mov	r1, sp
1a002378:	4620      	mov	r0, r4
1a00237a:	f000 fa22 	bl	1a0027c2 <Chip_ADC_SetResolution>
}
1a00237e:	b002      	add	sp, #8
1a002380:	bd10      	pop	{r4, pc}
1a002382:	bf00      	nop
1a002384:	400e3000 	.word	0x400e3000
1a002388:	00061a80 	.word	0x00061a80

1a00238c <Board_SPI_Init>:
{
1a00238c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00238e:	4c0b      	ldr	r4, [pc, #44]	; (1a0023bc <Board_SPI_Init+0x30>)
1a002390:	4620      	mov	r0, r4
1a002392:	f000 fe15 	bl	1a002fc0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002396:	6863      	ldr	r3, [r4, #4]
1a002398:	f023 0304 	bic.w	r3, r3, #4
1a00239c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00239e:	6823      	ldr	r3, [r4, #0]
1a0023a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0023a4:	f043 0307 	orr.w	r3, r3, #7
1a0023a8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0023aa:	4905      	ldr	r1, [pc, #20]	; (1a0023c0 <Board_SPI_Init+0x34>)
1a0023ac:	4620      	mov	r0, r4
1a0023ae:	f000 fde8 	bl	1a002f82 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0023b2:	6863      	ldr	r3, [r4, #4]
1a0023b4:	f043 0302 	orr.w	r3, r3, #2
1a0023b8:	6063      	str	r3, [r4, #4]
1a0023ba:	bd10      	pop	{r4, pc}
1a0023bc:	400c5000 	.word	0x400c5000
1a0023c0:	000186a0 	.word	0x000186a0

1a0023c4 <Board_I2C_Init>:
{
1a0023c4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0023c6:	2000      	movs	r0, #0
1a0023c8:	f000 fd8e 	bl	1a002ee8 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0023cc:	f640 0208 	movw	r2, #2056	; 0x808
1a0023d0:	4b03      	ldr	r3, [pc, #12]	; (1a0023e0 <Board_I2C_Init+0x1c>)
1a0023d2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0023d6:	4903      	ldr	r1, [pc, #12]	; (1a0023e4 <Board_I2C_Init+0x20>)
1a0023d8:	2000      	movs	r0, #0
1a0023da:	f000 fd97 	bl	1a002f0c <Chip_I2C_SetClockRate>
1a0023de:	bd08      	pop	{r3, pc}
1a0023e0:	40086000 	.word	0x40086000
1a0023e4:	000f4240 	.word	0x000f4240

1a0023e8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0023e8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0023ea:	4c07      	ldr	r4, [pc, #28]	; (1a002408 <Board_Debug_Init+0x20>)
1a0023ec:	4620      	mov	r0, r4
1a0023ee:	f000 f8ed 	bl	1a0025cc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0023f2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0023f6:	4620      	mov	r0, r4
1a0023f8:	f000 f912 	bl	1a002620 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0023fc:	2303      	movs	r3, #3
1a0023fe:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002400:	2301      	movs	r3, #1
1a002402:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002404:	bd10      	pop	{r4, pc}
1a002406:	bf00      	nop
1a002408:	400c1000 	.word	0x400c1000

1a00240c <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00240c:	4b03      	ldr	r3, [pc, #12]	; (1a00241c <Board_UARTPutChar+0x10>)
1a00240e:	695b      	ldr	r3, [r3, #20]
}


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002410:	f013 0f20 	tst.w	r3, #32
1a002414:	d0fa      	beq.n	1a00240c <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002416:	4b01      	ldr	r3, [pc, #4]	; (1a00241c <Board_UARTPutChar+0x10>)
1a002418:	6018      	str	r0, [r3, #0]
1a00241a:	4770      	bx	lr
1a00241c:	400c1000 	.word	0x400c1000

1a002420 <Board_UARTGetChar>:
	return pUART->LSR;
1a002420:	4b05      	ldr	r3, [pc, #20]	; (1a002438 <Board_UARTGetChar+0x18>)
1a002422:	695b      	ldr	r3, [r3, #20]
}


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002424:	f013 0f01 	tst.w	r3, #1
1a002428:	d003      	beq.n	1a002432 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00242a:	4b03      	ldr	r3, [pc, #12]	; (1a002438 <Board_UARTGetChar+0x18>)
1a00242c:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00242e:	b2c0      	uxtb	r0, r0
1a002430:	4770      	bx	lr
   }
   return EOF;
1a002432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002436:	4770      	bx	lr
1a002438:	400c1000 	.word	0x400c1000

1a00243c <Board_LED_Set>:
}


void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a00243c:	2805      	cmp	r0, #5
1a00243e:	d80b      	bhi.n	1a002458 <Board_LED_Set+0x1c>
      return;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, On);
1a002440:	4a06      	ldr	r2, [pc, #24]	; (1a00245c <Board_LED_Set+0x20>)
1a002442:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a002446:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a00244a:	7842      	ldrb	r2, [r0, #1]
	pGPIO->B[port][pin] = setting;
1a00244c:	015b      	lsls	r3, r3, #5
1a00244e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002452:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002456:	5499      	strb	r1, [r3, r2]
1a002458:	4770      	bx	lr
1a00245a:	bf00      	nop
1a00245c:	1a004d04 	.word	0x1a004d04

1a002460 <Board_LED_Test>:
}


bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a002460:	2805      	cmp	r0, #5
1a002462:	d80f      	bhi.n	1a002484 <Board_LED_Test+0x24>
      return false;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   return Chip_GPIO_GetPinState(LPC_GPIO_PORT, io->port, io->pin);
1a002464:	4a08      	ldr	r2, [pc, #32]	; (1a002488 <Board_LED_Test+0x28>)
1a002466:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a00246a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a00246e:	7842      	ldrb	r2, [r0, #1]
	return (bool) pGPIO->B[port][pin];
1a002470:	015b      	lsls	r3, r3, #5
1a002472:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002476:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00247a:	5c98      	ldrb	r0, [r3, r2]
1a00247c:	3000      	adds	r0, #0
1a00247e:	bf18      	it	ne
1a002480:	2001      	movne	r0, #1
1a002482:	4770      	bx	lr
      return false;
1a002484:	2000      	movs	r0, #0
}
1a002486:	4770      	bx	lr
1a002488:	1a004d04 	.word	0x1a004d04

1a00248c <Board_LED_Toggle>:


void Board_LED_Toggle(uint8_t LEDNumber)
{
1a00248c:	b510      	push	{r4, lr}
1a00248e:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a002490:	f7ff ffe6 	bl	1a002460 <Board_LED_Test>
1a002494:	f080 0101 	eor.w	r1, r0, #1
1a002498:	b2c9      	uxtb	r1, r1
1a00249a:	4620      	mov	r0, r4
1a00249c:	f7ff ffce 	bl	1a00243c <Board_LED_Set>
1a0024a0:	bd10      	pop	{r4, pc}
1a0024a2:	Address 0x000000001a0024a2 is out of bounds.


1a0024a4 <Board_Init>:
}


void Board_Init(void)
{
1a0024a4:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0024a6:	f7ff ff9f 	bl	1a0023e8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0024aa:	4809      	ldr	r0, [pc, #36]	; (1a0024d0 <Board_Init+0x2c>)
1a0024ac:	f000 fd0a 	bl	1a002ec4 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0024b0:	f7ff ff34 	bl	1a00231c <Board_GPIO_Init>
   Board_ADC_Init();
1a0024b4:	f7ff ff52 	bl	1a00235c <Board_ADC_Init>
   Board_SPI_Init();
1a0024b8:	f7ff ff68 	bl	1a00238c <Board_SPI_Init>
   Board_I2C_Init();
1a0024bc:	f7ff ff82 	bl	1a0023c4 <Board_I2C_Init>

   Board_LED_Init();
1a0024c0:	f7ff feea 	bl	1a002298 <Board_LED_Init>
   Board_TEC_Init();
1a0024c4:	f7ff ff0a 	bl	1a0022dc <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0024c8:	f000 f982 	bl	1a0027d0 <SystemCoreClockUpdate>
1a0024cc:	bd08      	pop	{r3, pc}
1a0024ce:	bf00      	nop
1a0024d0:	400f4000 	.word	0x400f4000

1a0024d4 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0024d4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0024d6:	b2c0      	uxtb	r0, r0
1a0024d8:	f7ff ff98 	bl	1a00240c <Board_UARTPutChar>
1a0024dc:	bd08      	pop	{r3, pc}

1a0024de <__stdio_getchar>:
}

int __stdio_getchar()
{
1a0024de:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0024e0:	f7ff ff9e 	bl	1a002420 <Board_UARTGetChar>
}
1a0024e4:	bd08      	pop	{r3, pc}

1a0024e6 <__stdio_init>:

void __stdio_init()
{
1a0024e6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0024e8:	f7ff ff7e 	bl	1a0023e8 <Board_Debug_Init>
1a0024ec:	bd08      	pop	{r3, pc}
1a0024ee:	Address 0x000000001a0024ee is out of bounds.


1a0024f0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0024f0:	2300      	movs	r3, #0
1a0024f2:	2b1c      	cmp	r3, #28
1a0024f4:	d812      	bhi.n	1a00251c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0024f6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0024f8:	4a09      	ldr	r2, [pc, #36]	; (1a002520 <Board_SetupMuxing+0x30>)
1a0024fa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0024fe:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002502:	784a      	ldrb	r2, [r1, #1]
1a002504:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002506:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00250a:	4906      	ldr	r1, [pc, #24]	; (1a002524 <Board_SetupMuxing+0x34>)
1a00250c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002510:	3301      	adds	r3, #1
1a002512:	2b1c      	cmp	r3, #28
1a002514:	d9f0      	bls.n	1a0024f8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002516:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00251a:	4770      	bx	lr
1a00251c:	4770      	bx	lr
1a00251e:	bf00      	nop
1a002520:	1a004d2c 	.word	0x1a004d2c
1a002524:	40086000 	.word	0x40086000

1a002528 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002528:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00252a:	4a17      	ldr	r2, [pc, #92]	; (1a002588 <Board_SetupClocking+0x60>)
1a00252c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002534:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002538:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00253c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002544:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002548:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00254c:	2201      	movs	r2, #1
1a00254e:	490f      	ldr	r1, [pc, #60]	; (1a00258c <Board_SetupClocking+0x64>)
1a002550:	2006      	movs	r0, #6
1a002552:	f000 fc0d 	bl	1a002d70 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002556:	2400      	movs	r4, #0
1a002558:	b14c      	cbz	r4, 1a00256e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00255a:	4b0b      	ldr	r3, [pc, #44]	; (1a002588 <Board_SetupClocking+0x60>)
1a00255c:	685a      	ldr	r2, [r3, #4]
1a00255e:	f022 020c 	bic.w	r2, r2, #12
1a002562:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002564:	685a      	ldr	r2, [r3, #4]
1a002566:	f042 0203 	orr.w	r2, r2, #3
1a00256a:	605a      	str	r2, [r3, #4]
1a00256c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00256e:	4808      	ldr	r0, [pc, #32]	; (1a002590 <Board_SetupClocking+0x68>)
1a002570:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002574:	2301      	movs	r3, #1
1a002576:	788a      	ldrb	r2, [r1, #2]
1a002578:	7849      	ldrb	r1, [r1, #1]
1a00257a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00257e:	f000 fb53 	bl	1a002c28 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002582:	3401      	adds	r4, #1
1a002584:	e7e8      	b.n	1a002558 <Board_SetupClocking+0x30>
1a002586:	bf00      	nop
1a002588:	40043000 	.word	0x40043000
1a00258c:	0c28cb00 	.word	0x0c28cb00
1a002590:	1a004d28 	.word	0x1a004d28

1a002594 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002594:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002596:	f7ff ffab 	bl	1a0024f0 <Board_SetupMuxing>
    Board_SetupClocking();
1a00259a:	f7ff ffc5 	bl	1a002528 <Board_SetupClocking>
1a00259e:	bd08      	pop	{r3, pc}

1a0025a0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0025a0:	4b09      	ldr	r3, [pc, #36]	; (1a0025c8 <Chip_UART_GetIndex+0x28>)
1a0025a2:	4298      	cmp	r0, r3
1a0025a4:	d009      	beq.n	1a0025ba <Chip_UART_GetIndex+0x1a>
1a0025a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0025aa:	4298      	cmp	r0, r3
1a0025ac:	d007      	beq.n	1a0025be <Chip_UART_GetIndex+0x1e>
1a0025ae:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0025b2:	4298      	cmp	r0, r3
1a0025b4:	d005      	beq.n	1a0025c2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0025b6:	2000      	movs	r0, #0
1a0025b8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0025ba:	2002      	movs	r0, #2
1a0025bc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0025be:	2003      	movs	r0, #3
1a0025c0:	4770      	bx	lr
			return 1;
1a0025c2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0025c4:	4770      	bx	lr
1a0025c6:	bf00      	nop
1a0025c8:	400c1000 	.word	0x400c1000

1a0025cc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0025cc:	b530      	push	{r4, r5, lr}
1a0025ce:	b083      	sub	sp, #12
1a0025d0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0025d2:	f7ff ffe5 	bl	1a0025a0 <Chip_UART_GetIndex>
1a0025d6:	2301      	movs	r3, #1
1a0025d8:	461a      	mov	r2, r3
1a0025da:	4619      	mov	r1, r3
1a0025dc:	4d0e      	ldr	r5, [pc, #56]	; (1a002618 <Chip_UART_Init+0x4c>)
1a0025de:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0025e2:	f000 fb67 	bl	1a002cb4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0025e6:	2307      	movs	r3, #7
1a0025e8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0025ea:	2300      	movs	r3, #0
1a0025ec:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0025ee:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0025f0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0025f2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0025f4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0025f6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0025f8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0025fa:	4b08      	ldr	r3, [pc, #32]	; (1a00261c <Chip_UART_Init+0x50>)
1a0025fc:	429c      	cmp	r4, r3
1a0025fe:	d006      	beq.n	1a00260e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002600:	2303      	movs	r3, #3
1a002602:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002604:	2310      	movs	r3, #16
1a002606:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002608:	9b01      	ldr	r3, [sp, #4]
}
1a00260a:	b003      	add	sp, #12
1a00260c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00260e:	2300      	movs	r3, #0
1a002610:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002612:	69a3      	ldr	r3, [r4, #24]
1a002614:	9301      	str	r3, [sp, #4]
1a002616:	e7f3      	b.n	1a002600 <Chip_UART_Init+0x34>
1a002618:	1a004da8 	.word	0x1a004da8
1a00261c:	40082000 	.word	0x40082000

1a002620 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002624:	b083      	sub	sp, #12
1a002626:	4683      	mov	fp, r0
1a002628:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00262a:	f7ff ffb9 	bl	1a0025a0 <Chip_UART_GetIndex>
1a00262e:	4b35      	ldr	r3, [pc, #212]	; (1a002704 <Chip_UART_SetBaudFDR+0xe4>)
1a002630:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002634:	f000 fb76 	bl	1a002d24 <Chip_Clock_GetRate>
1a002638:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00263a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00263e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002640:	2300      	movs	r3, #0
1a002642:	9301      	str	r3, [sp, #4]
1a002644:	46a2      	mov	sl, r4
1a002646:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002648:	e02a      	b.n	1a0026a0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00264a:	4243      	negs	r3, r0
				div ++;
1a00264c:	1c4a      	adds	r2, r1, #1
1a00264e:	e017      	b.n	1a002680 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002650:	b30b      	cbz	r3, 1a002696 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002652:	461f      	mov	r7, r3
			sd = d;
1a002654:	9501      	str	r5, [sp, #4]
			sm = m;
1a002656:	46a2      	mov	sl, r4
			sdiv = div;
1a002658:	4691      	mov	r9, r2
		for (d = 0; d < m; d++) {
1a00265a:	3501      	adds	r5, #1
1a00265c:	42ac      	cmp	r4, r5
1a00265e:	d91e      	bls.n	1a00269e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002660:	0933      	lsrs	r3, r6, #4
1a002662:	0730      	lsls	r0, r6, #28
1a002664:	fba4 0100 	umull	r0, r1, r4, r0
1a002668:	fb04 1103 	mla	r1, r4, r3, r1
1a00266c:	1962      	adds	r2, r4, r5
1a00266e:	fb08 f202 	mul.w	r2, r8, r2
1a002672:	2300      	movs	r3, #0
1a002674:	f000 fd3c 	bl	1a0030f0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002678:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a00267a:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a00267c:	2800      	cmp	r0, #0
1a00267e:	dbe4      	blt.n	1a00264a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002680:	429f      	cmp	r7, r3
1a002682:	d3ea      	bcc.n	1a00265a <Chip_UART_SetBaudFDR+0x3a>
1a002684:	2a00      	cmp	r2, #0
1a002686:	d0e8      	beq.n	1a00265a <Chip_UART_SetBaudFDR+0x3a>
1a002688:	0c11      	lsrs	r1, r2, #16
1a00268a:	d1e6      	bne.n	1a00265a <Chip_UART_SetBaudFDR+0x3a>
1a00268c:	2a02      	cmp	r2, #2
1a00268e:	d8df      	bhi.n	1a002650 <Chip_UART_SetBaudFDR+0x30>
1a002690:	2d00      	cmp	r5, #0
1a002692:	d1e2      	bne.n	1a00265a <Chip_UART_SetBaudFDR+0x3a>
1a002694:	e7dc      	b.n	1a002650 <Chip_UART_SetBaudFDR+0x30>
			odiff = diff;
1a002696:	461f      	mov	r7, r3
			sd = d;
1a002698:	9501      	str	r5, [sp, #4]
			sm = m;
1a00269a:	46a2      	mov	sl, r4
			sdiv = div;
1a00269c:	4691      	mov	r9, r2
	for (m = 1; odiff && m < 16; m++) {
1a00269e:	3401      	adds	r4, #1
1a0026a0:	b11f      	cbz	r7, 1a0026aa <Chip_UART_SetBaudFDR+0x8a>
1a0026a2:	2c0f      	cmp	r4, #15
1a0026a4:	d801      	bhi.n	1a0026aa <Chip_UART_SetBaudFDR+0x8a>
1a0026a6:	2500      	movs	r5, #0
1a0026a8:	e7d8      	b.n	1a00265c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0026aa:	f1b9 0f00 	cmp.w	r9, #0
1a0026ae:	d024      	beq.n	1a0026fa <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0026b0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0026b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0026b8:	f8cb 300c 	str.w	r3, [fp, #12]
1a0026bc:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0026c0:	f8cb 3000 	str.w	r3, [fp]
1a0026c4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0026c8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0026cc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0026d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0026d4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0026d8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0026dc:	b2db      	uxtb	r3, r3
1a0026de:	9901      	ldr	r1, [sp, #4]
1a0026e0:	f001 020f 	and.w	r2, r1, #15
1a0026e4:	4313      	orrs	r3, r2
1a0026e6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0026ea:	0933      	lsrs	r3, r6, #4
1a0026ec:	fb03 f30a 	mul.w	r3, r3, sl
1a0026f0:	448a      	add	sl, r1
1a0026f2:	fb0a f909 	mul.w	r9, sl, r9
1a0026f6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0026fa:	4648      	mov	r0, r9
1a0026fc:	b003      	add	sp, #12
1a0026fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002702:	bf00      	nop
1a002704:	1a004da0 	.word	0x1a004da0

1a002708 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002708:	4b03      	ldr	r3, [pc, #12]	; (1a002718 <Chip_ADC_GetClockIndex+0x10>)
1a00270a:	4298      	cmp	r0, r3
1a00270c:	d001      	beq.n	1a002712 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00270e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002710:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002712:	2004      	movs	r0, #4
1a002714:	4770      	bx	lr
1a002716:	bf00      	nop
1a002718:	400e4000 	.word	0x400e4000

1a00271c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00271c:	b570      	push	{r4, r5, r6, lr}
1a00271e:	460d      	mov	r5, r1
1a002720:	4614      	mov	r4, r2
1a002722:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002724:	f7ff fff0 	bl	1a002708 <Chip_ADC_GetClockIndex>
1a002728:	f000 fafc 	bl	1a002d24 <Chip_Clock_GetRate>
	if (burstMode) {
1a00272c:	b965      	cbnz	r5, 1a002748 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00272e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002732:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002736:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00273a:	0064      	lsls	r4, r4, #1
1a00273c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002740:	b2c0      	uxtb	r0, r0
1a002742:	3801      	subs	r0, #1
	return div;
}
1a002744:	b2c0      	uxtb	r0, r0
1a002746:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002748:	fb04 f406 	mul.w	r4, r4, r6
1a00274c:	e7f3      	b.n	1a002736 <getClkDiv+0x1a>
1a00274e:	Address 0x000000001a00274e is out of bounds.


1a002750 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002750:	b538      	push	{r3, r4, r5, lr}
1a002752:	4605      	mov	r5, r0
1a002754:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002756:	f7ff ffd7 	bl	1a002708 <Chip_ADC_GetClockIndex>
1a00275a:	2301      	movs	r3, #1
1a00275c:	461a      	mov	r2, r3
1a00275e:	4619      	mov	r1, r3
1a002760:	f000 faa8 	bl	1a002cb4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002764:	2100      	movs	r1, #0
1a002766:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002768:	4a08      	ldr	r2, [pc, #32]	; (1a00278c <Chip_ADC_Init+0x3c>)
1a00276a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00276c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00276e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002770:	230b      	movs	r3, #11
1a002772:	4628      	mov	r0, r5
1a002774:	f7ff ffd2 	bl	1a00271c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002778:	0200      	lsls	r0, r0, #8
1a00277a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00277e:	7923      	ldrb	r3, [r4, #4]
1a002780:	045b      	lsls	r3, r3, #17
1a002782:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002786:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002788:	6028      	str	r0, [r5, #0]
1a00278a:	bd38      	pop	{r3, r4, r5, pc}
1a00278c:	00061a80 	.word	0x00061a80

1a002790 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002790:	b570      	push	{r4, r5, r6, lr}
1a002792:	4605      	mov	r5, r0
1a002794:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002796:	6804      	ldr	r4, [r0, #0]
1a002798:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00279c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0027a0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0027a2:	790b      	ldrb	r3, [r1, #4]
1a0027a4:	f1c3 030b 	rsb	r3, r3, #11
1a0027a8:	b2db      	uxtb	r3, r3
1a0027aa:	7949      	ldrb	r1, [r1, #5]
1a0027ac:	f7ff ffb6 	bl	1a00271c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0027b0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0027b4:	7934      	ldrb	r4, [r6, #4]
1a0027b6:	0464      	lsls	r4, r4, #17
1a0027b8:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a0027bc:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0027be:	6028      	str	r0, [r5, #0]
1a0027c0:	bd70      	pop	{r4, r5, r6, pc}

1a0027c2 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0027c2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0027c4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0027c6:	680a      	ldr	r2, [r1, #0]
1a0027c8:	f7ff ffe2 	bl	1a002790 <Chip_ADC_SetSampleRate>
1a0027cc:	bd08      	pop	{r3, pc}
1a0027ce:	Address 0x000000001a0027ce is out of bounds.


1a0027d0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0027d0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0027d2:	2069      	movs	r0, #105	; 0x69
1a0027d4:	f000 faa6 	bl	1a002d24 <Chip_Clock_GetRate>
1a0027d8:	4b01      	ldr	r3, [pc, #4]	; (1a0027e0 <SystemCoreClockUpdate+0x10>)
1a0027da:	6018      	str	r0, [r3, #0]
1a0027dc:	bd08      	pop	{r3, pc}
1a0027de:	bf00      	nop
1a0027e0:	10002c0c 	.word	0x10002c0c

1a0027e4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0027e4:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0027e6:	680b      	ldr	r3, [r1, #0]
1a0027e8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0027ec:	d002      	beq.n	1a0027f4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0027ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0027f2:	600b      	str	r3, [r1, #0]
1a0027f4:	4607      	mov	r7, r0
1a0027f6:	2501      	movs	r5, #1
1a0027f8:	e03b      	b.n	1a002872 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0027fa:	694b      	ldr	r3, [r1, #20]
1a0027fc:	fb03 f302 	mul.w	r3, r3, r2
1a002800:	fbb3 f3f5 	udiv	r3, r3, r5
1a002804:	e014      	b.n	1a002830 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002806:	461c      	mov	r4, r3
1a002808:	e020      	b.n	1a00284c <pll_calc_divs+0x68>
		return -val;
1a00280a:	f1ce 0e00 	rsb	lr, lr, #0
1a00280e:	e020      	b.n	1a002852 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002810:	3201      	adds	r2, #1
1a002812:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002816:	dc26      	bgt.n	1a002866 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002818:	680c      	ldr	r4, [r1, #0]
1a00281a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00281e:	d0ec      	beq.n	1a0027fa <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002820:	1c73      	adds	r3, r6, #1
1a002822:	fa02 fe03 	lsl.w	lr, r2, r3
1a002826:	694b      	ldr	r3, [r1, #20]
1a002828:	fb03 f30e 	mul.w	r3, r3, lr
1a00282c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002830:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a00287c <pll_calc_divs+0x98>
1a002834:	4573      	cmp	r3, lr
1a002836:	d9eb      	bls.n	1a002810 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002838:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a002880 <pll_calc_divs+0x9c>
1a00283c:	4573      	cmp	r3, lr
1a00283e:	d812      	bhi.n	1a002866 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002840:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002844:	d1df      	bne.n	1a002806 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002846:	1c74      	adds	r4, r6, #1
1a002848:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a00284c:	ebb0 0e04 	subs.w	lr, r0, r4
1a002850:	d4db      	bmi.n	1a00280a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002852:	4577      	cmp	r7, lr
1a002854:	d9dc      	bls.n	1a002810 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002856:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002858:	1c77      	adds	r7, r6, #1
1a00285a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00285c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00285e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002860:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002862:	4677      	mov	r7, lr
1a002864:	e7d4      	b.n	1a002810 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002866:	3601      	adds	r6, #1
1a002868:	2e03      	cmp	r6, #3
1a00286a:	dc01      	bgt.n	1a002870 <pll_calc_divs+0x8c>
1a00286c:	2201      	movs	r2, #1
1a00286e:	e7d0      	b.n	1a002812 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002870:	3501      	adds	r5, #1
1a002872:	2d04      	cmp	r5, #4
1a002874:	dc01      	bgt.n	1a00287a <pll_calc_divs+0x96>
1a002876:	2600      	movs	r6, #0
1a002878:	e7f6      	b.n	1a002868 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00287c:	094c5eff 	.word	0x094c5eff
1a002880:	1312d000 	.word	0x1312d000

1a002884 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002884:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002886:	b099      	sub	sp, #100	; 0x64
1a002888:	4605      	mov	r5, r0
1a00288a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00288c:	2260      	movs	r2, #96	; 0x60
1a00288e:	2100      	movs	r1, #0
1a002890:	4668      	mov	r0, sp
1a002892:	f001 f8b7 	bl	1a003a04 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002896:	2380      	movs	r3, #128	; 0x80
1a002898:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00289a:	6963      	ldr	r3, [r4, #20]
1a00289c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00289e:	7923      	ldrb	r3, [r4, #4]
1a0028a0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0028a4:	4669      	mov	r1, sp
1a0028a6:	4628      	mov	r0, r5
1a0028a8:	f7ff ff9c 	bl	1a0027e4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0028ac:	9b06      	ldr	r3, [sp, #24]
1a0028ae:	429d      	cmp	r5, r3
1a0028b0:	d027      	beq.n	1a002902 <pll_get_frac+0x7e>
	if (val < 0)
1a0028b2:	1aeb      	subs	r3, r5, r3
1a0028b4:	d42e      	bmi.n	1a002914 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0028b6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0028b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0028ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0028be:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0028c0:	6963      	ldr	r3, [r4, #20]
1a0028c2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0028c4:	7923      	ldrb	r3, [r4, #4]
1a0028c6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0028ca:	a910      	add	r1, sp, #64	; 0x40
1a0028cc:	4628      	mov	r0, r5
1a0028ce:	f7ff ff89 	bl	1a0027e4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0028d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0028d4:	429d      	cmp	r5, r3
1a0028d6:	d01f      	beq.n	1a002918 <pll_get_frac+0x94>
	if (val < 0)
1a0028d8:	1aeb      	subs	r3, r5, r3
1a0028da:	d425      	bmi.n	1a002928 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0028dc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0028de:	4b2b      	ldr	r3, [pc, #172]	; (1a00298c <pll_get_frac+0x108>)
1a0028e0:	429d      	cmp	r5, r3
1a0028e2:	d923      	bls.n	1a00292c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0028e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0028e6:	1aed      	subs	r5, r5, r3
1a0028e8:	d433      	bmi.n	1a002952 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0028ea:	42ae      	cmp	r6, r5
1a0028ec:	dc3b      	bgt.n	1a002966 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0028ee:	42be      	cmp	r6, r7
1a0028f0:	dc31      	bgt.n	1a002956 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0028f2:	466d      	mov	r5, sp
1a0028f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0028f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0028f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0028fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002900:	e006      	b.n	1a002910 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002902:	466d      	mov	r5, sp
1a002904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002908:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00290c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002910:	b019      	add	sp, #100	; 0x64
1a002912:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002914:	425b      	negs	r3, r3
1a002916:	e7ce      	b.n	1a0028b6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002918:	ad10      	add	r5, sp, #64	; 0x40
1a00291a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00291c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00291e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002926:	e7f3      	b.n	1a002910 <pll_get_frac+0x8c>
		return -val;
1a002928:	425b      	negs	r3, r3
1a00292a:	e7d7      	b.n	1a0028dc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00292c:	2340      	movs	r3, #64	; 0x40
1a00292e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002930:	6963      	ldr	r3, [r4, #20]
1a002932:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002934:	a908      	add	r1, sp, #32
1a002936:	4628      	mov	r0, r5
1a002938:	f7ff ff54 	bl	1a0027e4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00293c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00293e:	429d      	cmp	r5, r3
1a002940:	d1d0      	bne.n	1a0028e4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002942:	ad08      	add	r5, sp, #32
1a002944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002948:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00294c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002950:	e7de      	b.n	1a002910 <pll_get_frac+0x8c>
		return -val;
1a002952:	426d      	negs	r5, r5
1a002954:	e7c9      	b.n	1a0028ea <pll_get_frac+0x66>
			*ppll = pll[2];
1a002956:	ad10      	add	r5, sp, #64	; 0x40
1a002958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00295a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00295c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002964:	e7d4      	b.n	1a002910 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002966:	42af      	cmp	r7, r5
1a002968:	db07      	blt.n	1a00297a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00296a:	ad08      	add	r5, sp, #32
1a00296c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00296e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002970:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002978:	e7ca      	b.n	1a002910 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00297a:	ad10      	add	r5, sp, #64	; 0x40
1a00297c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00297e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002980:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002988:	e7c2      	b.n	1a002910 <pll_get_frac+0x8c>
1a00298a:	bf00      	nop
1a00298c:	068e7780 	.word	0x068e7780

1a002990 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002990:	b430      	push	{r4, r5}
1a002992:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002994:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002996:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002998:	e000      	b.n	1a00299c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00299a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00299c:	281c      	cmp	r0, #28
1a00299e:	d118      	bne.n	1a0029d2 <Chip_Clock_FindBaseClock+0x42>
1a0029a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0029a4:	0051      	lsls	r1, r2, #1
1a0029a6:	4a0c      	ldr	r2, [pc, #48]	; (1a0029d8 <Chip_Clock_FindBaseClock+0x48>)
1a0029a8:	440a      	add	r2, r1
1a0029aa:	7914      	ldrb	r4, [r2, #4]
1a0029ac:	42a0      	cmp	r0, r4
1a0029ae:	d010      	beq.n	1a0029d2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0029b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0029b4:	004a      	lsls	r2, r1, #1
1a0029b6:	4908      	ldr	r1, [pc, #32]	; (1a0029d8 <Chip_Clock_FindBaseClock+0x48>)
1a0029b8:	5a8a      	ldrh	r2, [r1, r2]
1a0029ba:	42aa      	cmp	r2, r5
1a0029bc:	d8ed      	bhi.n	1a00299a <Chip_Clock_FindBaseClock+0xa>
1a0029be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0029c2:	0051      	lsls	r1, r2, #1
1a0029c4:	4a04      	ldr	r2, [pc, #16]	; (1a0029d8 <Chip_Clock_FindBaseClock+0x48>)
1a0029c6:	440a      	add	r2, r1
1a0029c8:	8852      	ldrh	r2, [r2, #2]
1a0029ca:	4295      	cmp	r5, r2
1a0029cc:	d8e5      	bhi.n	1a00299a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0029ce:	4620      	mov	r0, r4
1a0029d0:	e7e4      	b.n	1a00299c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0029d2:	bc30      	pop	{r4, r5}
1a0029d4:	4770      	bx	lr
1a0029d6:	bf00      	nop
1a0029d8:	1a004dbc 	.word	0x1a004dbc

1a0029dc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0029dc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0029de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0029e2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0029e4:	4a0d      	ldr	r2, [pc, #52]	; (1a002a1c <Chip_Clock_EnableCrystal+0x40>)
1a0029e6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0029e8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0029ec:	6992      	ldr	r2, [r2, #24]
1a0029ee:	4291      	cmp	r1, r2
1a0029f0:	d001      	beq.n	1a0029f6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0029f2:	4a0a      	ldr	r2, [pc, #40]	; (1a002a1c <Chip_Clock_EnableCrystal+0x40>)
1a0029f4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0029f6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0029fa:	4a09      	ldr	r2, [pc, #36]	; (1a002a20 <Chip_Clock_EnableCrystal+0x44>)
1a0029fc:	6811      	ldr	r1, [r2, #0]
1a0029fe:	4a09      	ldr	r2, [pc, #36]	; (1a002a24 <Chip_Clock_EnableCrystal+0x48>)
1a002a00:	4291      	cmp	r1, r2
1a002a02:	d901      	bls.n	1a002a08 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002a04:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002a08:	4a04      	ldr	r2, [pc, #16]	; (1a002a1c <Chip_Clock_EnableCrystal+0x40>)
1a002a0a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002a0c:	9b01      	ldr	r3, [sp, #4]
1a002a0e:	1e5a      	subs	r2, r3, #1
1a002a10:	9201      	str	r2, [sp, #4]
1a002a12:	2b00      	cmp	r3, #0
1a002a14:	d1fa      	bne.n	1a002a0c <Chip_Clock_EnableCrystal+0x30>
}
1a002a16:	b002      	add	sp, #8
1a002a18:	4770      	bx	lr
1a002a1a:	bf00      	nop
1a002a1c:	40050000 	.word	0x40050000
1a002a20:	1a004d24 	.word	0x1a004d24
1a002a24:	01312cff 	.word	0x01312cff

1a002a28 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002a28:	3012      	adds	r0, #18
1a002a2a:	4b05      	ldr	r3, [pc, #20]	; (1a002a40 <Chip_Clock_GetDividerSource+0x18>)
1a002a2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002a30:	f010 0f01 	tst.w	r0, #1
1a002a34:	d001      	beq.n	1a002a3a <Chip_Clock_GetDividerSource+0x12>
		return CLKINPUT_PD;
1a002a36:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002a38:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002a3a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002a3e:	4770      	bx	lr
1a002a40:	40050000 	.word	0x40050000

1a002a44 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002a44:	f100 0212 	add.w	r2, r0, #18
1a002a48:	4b03      	ldr	r3, [pc, #12]	; (1a002a58 <Chip_Clock_GetDividerDivisor+0x14>)
1a002a4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002a4e:	4b03      	ldr	r3, [pc, #12]	; (1a002a5c <Chip_Clock_GetDividerDivisor+0x18>)
1a002a50:	5c18      	ldrb	r0, [r3, r0]
}
1a002a52:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002a56:	4770      	bx	lr
1a002a58:	40050000 	.word	0x40050000
1a002a5c:	1a004db4 	.word	0x1a004db4

1a002a60 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002a60:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002a62:	2810      	cmp	r0, #16
1a002a64:	d80a      	bhi.n	1a002a7c <Chip_Clock_GetClockInputHz+0x1c>
1a002a66:	e8df f000 	tbb	[pc, r0]
1a002a6a:	0b44      	.short	0x0b44
1a002a6c:	0921180d 	.word	0x0921180d
1a002a70:	2d2a2724 	.word	0x2d2a2724
1a002a74:	34300909 	.word	0x34300909
1a002a78:	3c38      	.short	0x3c38
1a002a7a:	40          	.byte	0x40
1a002a7b:	00          	.byte	0x00
	uint32_t rate = 0;
1a002a7c:	2000      	movs	r0, #0
1a002a7e:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002a80:	481e      	ldr	r0, [pc, #120]	; (1a002afc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002a82:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002a84:	4b1e      	ldr	r3, [pc, #120]	; (1a002b00 <Chip_Clock_GetClockInputHz+0xa0>)
1a002a86:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002a8a:	f003 0307 	and.w	r3, r3, #7
1a002a8e:	2b04      	cmp	r3, #4
1a002a90:	d001      	beq.n	1a002a96 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002a92:	481c      	ldr	r0, [pc, #112]	; (1a002b04 <Chip_Clock_GetClockInputHz+0xa4>)
1a002a94:	bd08      	pop	{r3, pc}
	uint32_t rate = 0;
1a002a96:	2000      	movs	r0, #0
1a002a98:	bd08      	pop	{r3, pc}
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002a9a:	4b19      	ldr	r3, [pc, #100]	; (1a002b00 <Chip_Clock_GetClockInputHz+0xa0>)
1a002a9c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002aa0:	f003 0307 	and.w	r3, r3, #7
1a002aa4:	2b04      	cmp	r3, #4
1a002aa6:	d027      	beq.n	1a002af8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002aa8:	4816      	ldr	r0, [pc, #88]	; (1a002b04 <Chip_Clock_GetClockInputHz+0xa4>)
1a002aaa:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002aac:	4b16      	ldr	r3, [pc, #88]	; (1a002b08 <Chip_Clock_GetClockInputHz+0xa8>)
1a002aae:	6818      	ldr	r0, [r3, #0]
		break;
1a002ab0:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002ab2:	4b16      	ldr	r3, [pc, #88]	; (1a002b0c <Chip_Clock_GetClockInputHz+0xac>)
1a002ab4:	6818      	ldr	r0, [r3, #0]
		break;
1a002ab6:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002ab8:	4b15      	ldr	r3, [pc, #84]	; (1a002b10 <Chip_Clock_GetClockInputHz+0xb0>)
1a002aba:	6818      	ldr	r0, [r3, #0]
		break;
1a002abc:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002abe:	4b14      	ldr	r3, [pc, #80]	; (1a002b10 <Chip_Clock_GetClockInputHz+0xb0>)
1a002ac0:	6858      	ldr	r0, [r3, #4]
		break;
1a002ac2:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002ac4:	f000 f868 	bl	1a002b98 <Chip_Clock_GetMainPLLHz>
		break;
1a002ac8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002aca:	2100      	movs	r1, #0
1a002acc:	f000 f89a 	bl	1a002c04 <Chip_Clock_GetDivRate>
		break;
1a002ad0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002ad2:	2101      	movs	r1, #1
1a002ad4:	f000 f896 	bl	1a002c04 <Chip_Clock_GetDivRate>
		break;
1a002ad8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002ada:	2102      	movs	r1, #2
1a002adc:	f000 f892 	bl	1a002c04 <Chip_Clock_GetDivRate>
		break;
1a002ae0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002ae2:	2103      	movs	r1, #3
1a002ae4:	f000 f88e 	bl	1a002c04 <Chip_Clock_GetDivRate>
		break;
1a002ae8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002aea:	2104      	movs	r1, #4
1a002aec:	f000 f88a 	bl	1a002c04 <Chip_Clock_GetDivRate>
		break;
1a002af0:	bd08      	pop	{r3, pc}
		rate = CRYSTAL_32K_FREQ_IN;
1a002af2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002af6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002af8:	4806      	ldr	r0, [pc, #24]	; (1a002b14 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002afa:	bd08      	pop	{r3, pc}
1a002afc:	00b71b00 	.word	0x00b71b00
1a002b00:	40043000 	.word	0x40043000
1a002b04:	017d7840 	.word	0x017d7840
1a002b08:	1a004cf8 	.word	0x1a004cf8
1a002b0c:	1a004d24 	.word	0x1a004d24
1a002b10:	10002bb8 	.word	0x10002bb8
1a002b14:	02faf080 	.word	0x02faf080

1a002b18 <Chip_Clock_CalcMainPLLValue>:
{
1a002b18:	b538      	push	{r3, r4, r5, lr}
1a002b1a:	4605      	mov	r5, r0
1a002b1c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002b1e:	7908      	ldrb	r0, [r1, #4]
1a002b20:	f7ff ff9e 	bl	1a002a60 <Chip_Clock_GetClockInputHz>
1a002b24:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002b26:	4b19      	ldr	r3, [pc, #100]	; (1a002b8c <Chip_Clock_CalcMainPLLValue+0x74>)
1a002b28:	442b      	add	r3, r5
1a002b2a:	4a19      	ldr	r2, [pc, #100]	; (1a002b90 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002b2c:	4293      	cmp	r3, r2
1a002b2e:	d821      	bhi.n	1a002b74 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002b30:	b318      	cbz	r0, 1a002b7a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002b32:	2380      	movs	r3, #128	; 0x80
1a002b34:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002b36:	2300      	movs	r3, #0
1a002b38:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002b3a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002b3c:	fbb5 f3f0 	udiv	r3, r5, r0
1a002b40:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002b42:	4a14      	ldr	r2, [pc, #80]	; (1a002b94 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002b44:	4295      	cmp	r5, r2
1a002b46:	d903      	bls.n	1a002b50 <Chip_Clock_CalcMainPLLValue+0x38>
1a002b48:	fb03 f000 	mul.w	r0, r3, r0
1a002b4c:	4285      	cmp	r5, r0
1a002b4e:	d007      	beq.n	1a002b60 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002b50:	4621      	mov	r1, r4
1a002b52:	4628      	mov	r0, r5
1a002b54:	f7ff fe96 	bl	1a002884 <pll_get_frac>
		if (!ppll->nsel) {
1a002b58:	68a3      	ldr	r3, [r4, #8]
1a002b5a:	b18b      	cbz	r3, 1a002b80 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002b5c:	3b01      	subs	r3, #1
1a002b5e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002b60:	6923      	ldr	r3, [r4, #16]
1a002b62:	b183      	cbz	r3, 1a002b86 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002b64:	68e2      	ldr	r2, [r4, #12]
1a002b66:	b10a      	cbz	r2, 1a002b6c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002b68:	3a01      	subs	r2, #1
1a002b6a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002b6c:	3b01      	subs	r3, #1
1a002b6e:	6123      	str	r3, [r4, #16]
	return 0;
1a002b70:	2000      	movs	r0, #0
1a002b72:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002b78:	bd38      	pop	{r3, r4, r5, pc}
1a002b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002b7e:	bd38      	pop	{r3, r4, r5, pc}
			return -1;
1a002b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002b84:	bd38      	pop	{r3, r4, r5, pc}
		return - 1;
1a002b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002b8a:	bd38      	pop	{r3, r4, r5, pc}
1a002b8c:	ff6b3a10 	.word	0xff6b3a10
1a002b90:	0b940510 	.word	0x0b940510
1a002b94:	094c5eff 	.word	0x094c5eff

1a002b98 <Chip_Clock_GetMainPLLHz>:
{
1a002b98:	b530      	push	{r4, r5, lr}
1a002b9a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002b9c:	4d17      	ldr	r5, [pc, #92]	; (1a002bfc <Chip_Clock_GetMainPLLHz+0x64>)
1a002b9e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002ba0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002ba4:	f7ff ff5c 	bl	1a002a60 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002ba8:	4b15      	ldr	r3, [pc, #84]	; (1a002c00 <Chip_Clock_GetMainPLLHz+0x68>)
1a002baa:	681b      	ldr	r3, [r3, #0]
1a002bac:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002bae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002bb0:	f013 0f01 	tst.w	r3, #1
1a002bb4:	d01f      	beq.n	1a002bf6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002bb6:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002bba:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002bbe:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002bc2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002bc6:	3201      	adds	r2, #1
	n = nsel + 1;
1a002bc8:	3301      	adds	r3, #1
	p = ptab[psel];
1a002bca:	f10d 0e08 	add.w	lr, sp, #8
1a002bce:	4471      	add	r1, lr
1a002bd0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002bd4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002bd8:	d108      	bne.n	1a002bec <Chip_Clock_GetMainPLLHz+0x54>
1a002bda:	b93d      	cbnz	r5, 1a002bec <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002bdc:	0049      	lsls	r1, r1, #1
1a002bde:	fbb2 f2f1 	udiv	r2, r2, r1
1a002be2:	fbb0 f0f3 	udiv	r0, r0, r3
1a002be6:	fb00 f002 	mul.w	r0, r0, r2
1a002bea:	e005      	b.n	1a002bf8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002bec:	fbb0 f0f3 	udiv	r0, r0, r3
1a002bf0:	fb00 f002 	mul.w	r0, r0, r2
1a002bf4:	e000      	b.n	1a002bf8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002bf6:	2000      	movs	r0, #0
}
1a002bf8:	b003      	add	sp, #12
1a002bfa:	bd30      	pop	{r4, r5, pc}
1a002bfc:	40050000 	.word	0x40050000
1a002c00:	1a004db0 	.word	0x1a004db0

1a002c04 <Chip_Clock_GetDivRate>:
{
1a002c04:	b538      	push	{r3, r4, r5, lr}
1a002c06:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002c08:	4608      	mov	r0, r1
1a002c0a:	f7ff ff0d 	bl	1a002a28 <Chip_Clock_GetDividerSource>
1a002c0e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002c10:	4620      	mov	r0, r4
1a002c12:	f7ff ff17 	bl	1a002a44 <Chip_Clock_GetDividerDivisor>
1a002c16:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002c18:	4628      	mov	r0, r5
1a002c1a:	f7ff ff21 	bl	1a002a60 <Chip_Clock_GetClockInputHz>
1a002c1e:	3401      	adds	r4, #1
}
1a002c20:	fbb0 f0f4 	udiv	r0, r0, r4
1a002c24:	bd38      	pop	{r3, r4, r5, pc}
1a002c26:	Address 0x000000001a002c26 is out of bounds.


1a002c28 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002c28:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002c2a:	f100 0416 	add.w	r4, r0, #22
1a002c2e:	00a4      	lsls	r4, r4, #2
1a002c30:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002c34:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002c38:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002c3a:	281b      	cmp	r0, #27
1a002c3c:	d813      	bhi.n	1a002c66 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002c3e:	2911      	cmp	r1, #17
1a002c40:	d01a      	beq.n	1a002c78 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002c42:	4c0e      	ldr	r4, [pc, #56]	; (1a002c7c <Chip_Clock_SetBaseClock+0x54>)
1a002c44:	402c      	ands	r4, r5

			if (autoblocken) {
1a002c46:	b10a      	cbz	r2, 1a002c4c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002c48:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a002c4c:	b10b      	cbz	r3, 1a002c52 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002c4e:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002c52:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002c56:	3016      	adds	r0, #22
1a002c58:	0080      	lsls	r0, r0, #2
1a002c5a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002c5e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002c62:	6044      	str	r4, [r0, #4]
1a002c64:	e008      	b.n	1a002c78 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002c66:	f045 0501 	orr.w	r5, r5, #1
1a002c6a:	3016      	adds	r0, #22
1a002c6c:	0080      	lsls	r0, r0, #2
1a002c6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002c72:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002c76:	6045      	str	r5, [r0, #4]
	}
}
1a002c78:	bc30      	pop	{r4, r5}
1a002c7a:	4770      	bx	lr
1a002c7c:	e0fff7fe 	.word	0xe0fff7fe

1a002c80 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002c80:	281b      	cmp	r0, #27
1a002c82:	d901      	bls.n	1a002c88 <Chip_Clock_GetBaseClock+0x8>
		return CLKINPUT_PD;
1a002c84:	2011      	movs	r0, #17
1a002c86:	4770      	bx	lr
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002c88:	3016      	adds	r0, #22
1a002c8a:	0080      	lsls	r0, r0, #2
1a002c8c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002c90:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002c94:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002c96:	f010 0f01 	tst.w	r0, #1
1a002c9a:	d001      	beq.n	1a002ca0 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
1a002c9c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002c9e:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ca0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002ca4:	4770      	bx	lr

1a002ca6 <Chip_Clock_GetBaseClocktHz>:
{
1a002ca6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002ca8:	f7ff ffea 	bl	1a002c80 <Chip_Clock_GetBaseClock>
1a002cac:	f7ff fed8 	bl	1a002a60 <Chip_Clock_GetClockInputHz>
}
1a002cb0:	bd08      	pop	{r3, pc}
1a002cb2:	Address 0x000000001a002cb2 is out of bounds.


1a002cb4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002cb4:	b969      	cbnz	r1, 1a002cd2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002cb6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002cb8:	b10a      	cbz	r2, 1a002cbe <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002cba:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002cbe:	2b02      	cmp	r3, #2
1a002cc0:	d009      	beq.n	1a002cd6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002cc2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002cc6:	d209      	bcs.n	1a002cdc <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002cc8:	3020      	adds	r0, #32
1a002cca:	4b07      	ldr	r3, [pc, #28]	; (1a002ce8 <Chip_Clock_EnableOpts+0x34>)
1a002ccc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002cd0:	4770      	bx	lr
		reg |= (1 << 1);
1a002cd2:	2103      	movs	r1, #3
1a002cd4:	e7f0      	b.n	1a002cb8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002cd6:	f041 0120 	orr.w	r1, r1, #32
1a002cda:	e7f2      	b.n	1a002cc2 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002cdc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002ce0:	4b02      	ldr	r3, [pc, #8]	; (1a002cec <Chip_Clock_EnableOpts+0x38>)
1a002ce2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002ce6:	4770      	bx	lr
1a002ce8:	40051000 	.word	0x40051000
1a002cec:	40052000 	.word	0x40052000

1a002cf0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002cf0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002cf4:	d208      	bcs.n	1a002d08 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002cf6:	4a09      	ldr	r2, [pc, #36]	; (1a002d1c <Chip_Clock_Enable+0x2c>)
1a002cf8:	3020      	adds	r0, #32
1a002cfa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002cfe:	f043 0301 	orr.w	r3, r3, #1
1a002d02:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002d06:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002d08:	4a05      	ldr	r2, [pc, #20]	; (1a002d20 <Chip_Clock_Enable+0x30>)
1a002d0a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002d0e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002d12:	f043 0301 	orr.w	r3, r3, #1
1a002d16:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002d1a:	4770      	bx	lr
1a002d1c:	40051000 	.word	0x40051000
1a002d20:	40052000 	.word	0x40052000

1a002d24 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002d24:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002d26:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d2a:	d309      	bcc.n	1a002d40 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002d2c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002d30:	4a0d      	ldr	r2, [pc, #52]	; (1a002d68 <Chip_Clock_GetRate+0x44>)
1a002d32:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002d36:	f014 0f01 	tst.w	r4, #1
1a002d3a:	d107      	bne.n	1a002d4c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002d3c:	2000      	movs	r0, #0
	}

	return rate;
}
1a002d3e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002d40:	f100 0320 	add.w	r3, r0, #32
1a002d44:	4a09      	ldr	r2, [pc, #36]	; (1a002d6c <Chip_Clock_GetRate+0x48>)
1a002d46:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002d4a:	e7f4      	b.n	1a002d36 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002d4c:	f7ff fe20 	bl	1a002990 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002d50:	f7ff ffa9 	bl	1a002ca6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002d54:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002d58:	d103      	bne.n	1a002d62 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002d5a:	2301      	movs	r3, #1
		rate = rate / div;
1a002d5c:	fbb0 f0f3 	udiv	r0, r0, r3
1a002d60:	bd10      	pop	{r4, pc}
			div = 2;/* No other dividers supported */
1a002d62:	2302      	movs	r3, #2
1a002d64:	e7fa      	b.n	1a002d5c <Chip_Clock_GetRate+0x38>
1a002d66:	bf00      	nop
1a002d68:	40052000 	.word	0x40052000
1a002d6c:	40051000 	.word	0x40051000

1a002d70 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002d70:	b570      	push	{r4, r5, r6, lr}
1a002d72:	b08a      	sub	sp, #40	; 0x28
1a002d74:	4605      	mov	r5, r0
1a002d76:	460e      	mov	r6, r1
1a002d78:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002d7a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002d7e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002d80:	2806      	cmp	r0, #6
1a002d82:	d018      	beq.n	1a002db6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002d84:	2300      	movs	r3, #0
1a002d86:	2201      	movs	r2, #1
1a002d88:	4629      	mov	r1, r5
1a002d8a:	2004      	movs	r0, #4
1a002d8c:	f7ff ff4c 	bl	1a002c28 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002d90:	4a49      	ldr	r2, [pc, #292]	; (1a002eb8 <Chip_SetupCoreClock+0x148>)
1a002d92:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002d94:	f043 0301 	orr.w	r3, r3, #1
1a002d98:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002d9a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002d9e:	a901      	add	r1, sp, #4
1a002da0:	4630      	mov	r0, r6
1a002da2:	f7ff feb9 	bl	1a002b18 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002da6:	4b45      	ldr	r3, [pc, #276]	; (1a002ebc <Chip_SetupCoreClock+0x14c>)
1a002da8:	429e      	cmp	r6, r3
1a002daa:	d916      	bls.n	1a002dda <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002dac:	9b01      	ldr	r3, [sp, #4]
1a002dae:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002db2:	d003      	beq.n	1a002dbc <Chip_SetupCoreClock+0x4c>
1a002db4:	e7fe      	b.n	1a002db4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002db6:	f7ff fe11 	bl	1a0029dc <Chip_Clock_EnableCrystal>
1a002dba:	e7e3      	b.n	1a002d84 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a002dbc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002dc0:	d005      	beq.n	1a002dce <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002dc6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002dc8:	2500      	movs	r5, #0
			direct = 1;
1a002dca:	2601      	movs	r6, #1
1a002dcc:	e007      	b.n	1a002dde <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002dce:	9b04      	ldr	r3, [sp, #16]
1a002dd0:	3301      	adds	r3, #1
1a002dd2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002dd4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002dd6:	2600      	movs	r6, #0
1a002dd8:	e001      	b.n	1a002dde <Chip_SetupCoreClock+0x6e>
1a002dda:	2500      	movs	r5, #0
1a002ddc:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002dde:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002de2:	9b01      	ldr	r3, [sp, #4]
1a002de4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002de8:	9a05      	ldr	r2, [sp, #20]
1a002dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002dee:	9a03      	ldr	r2, [sp, #12]
1a002df0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002df4:	9a04      	ldr	r2, [sp, #16]
1a002df6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002dfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002dfe:	4a2e      	ldr	r2, [pc, #184]	; (1a002eb8 <Chip_SetupCoreClock+0x148>)
1a002e00:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002e02:	4b2d      	ldr	r3, [pc, #180]	; (1a002eb8 <Chip_SetupCoreClock+0x148>)
1a002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002e06:	f013 0f01 	tst.w	r3, #1
1a002e0a:	d0fa      	beq.n	1a002e02 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002e0c:	2300      	movs	r3, #0
1a002e0e:	2201      	movs	r2, #1
1a002e10:	2109      	movs	r1, #9
1a002e12:	2004      	movs	r0, #4
1a002e14:	f7ff ff08 	bl	1a002c28 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002e18:	b1fe      	cbz	r6, 1a002e5a <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002e1a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002e1e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002e22:	1e5a      	subs	r2, r3, #1
1a002e24:	9209      	str	r2, [sp, #36]	; 0x24
1a002e26:	2b00      	cmp	r3, #0
1a002e28:	d1fa      	bne.n	1a002e20 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002e2a:	9b01      	ldr	r3, [sp, #4]
1a002e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002e30:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002e32:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002e36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002e3a:	9a05      	ldr	r2, [sp, #20]
1a002e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002e40:	9a03      	ldr	r2, [sp, #12]
1a002e42:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002e46:	9a04      	ldr	r2, [sp, #16]
1a002e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002e50:	4a19      	ldr	r2, [pc, #100]	; (1a002eb8 <Chip_SetupCoreClock+0x148>)
1a002e52:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002e54:	b36c      	cbz	r4, 1a002eb2 <Chip_SetupCoreClock+0x142>
1a002e56:	2400      	movs	r4, #0
1a002e58:	e029      	b.n	1a002eae <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a002e5a:	2d00      	cmp	r5, #0
1a002e5c:	d0fa      	beq.n	1a002e54 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002e5e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002e62:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002e66:	1e5a      	subs	r2, r3, #1
1a002e68:	9209      	str	r2, [sp, #36]	; 0x24
1a002e6a:	2b00      	cmp	r3, #0
1a002e6c:	d1fa      	bne.n	1a002e64 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a002e6e:	9b04      	ldr	r3, [sp, #16]
1a002e70:	1e5a      	subs	r2, r3, #1
1a002e72:	9204      	str	r2, [sp, #16]
1a002e74:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002e78:	9b01      	ldr	r3, [sp, #4]
1a002e7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002e7e:	9905      	ldr	r1, [sp, #20]
1a002e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002e84:	9903      	ldr	r1, [sp, #12]
1a002e86:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002e8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002e8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002e92:	4a09      	ldr	r2, [pc, #36]	; (1a002eb8 <Chip_SetupCoreClock+0x148>)
1a002e94:	6453      	str	r3, [r2, #68]	; 0x44
1a002e96:	e7dd      	b.n	1a002e54 <Chip_SetupCoreClock+0xe4>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002e98:	4809      	ldr	r0, [pc, #36]	; (1a002ec0 <Chip_SetupCoreClock+0x150>)
1a002e9a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002e9e:	78cb      	ldrb	r3, [r1, #3]
1a002ea0:	788a      	ldrb	r2, [r1, #2]
1a002ea2:	7849      	ldrb	r1, [r1, #1]
1a002ea4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002ea8:	f7ff febe 	bl	1a002c28 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002eac:	3401      	adds	r4, #1
1a002eae:	2c11      	cmp	r4, #17
1a002eb0:	d9f2      	bls.n	1a002e98 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002eb2:	b00a      	add	sp, #40	; 0x28
1a002eb4:	bd70      	pop	{r4, r5, r6, pc}
1a002eb6:	bf00      	nop
1a002eb8:	40050000 	.word	0x40050000
1a002ebc:	068e7780 	.word	0x068e7780
1a002ec0:	1a004e28 	.word	0x1a004e28

1a002ec4 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a002ec4:	4770      	bx	lr
1a002ec6:	Address 0x000000001a002ec6 is out of bounds.


1a002ec8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002ec8:	2901      	cmp	r1, #1
1a002eca:	d000      	beq.n	1a002ece <Chip_I2C_EventHandler+0x6>
1a002ecc:	4770      	bx	lr
		return;
	}

	stat = &iic->mXfer->status;
1a002ece:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002ed2:	0082      	lsls	r2, r0, #2
1a002ed4:	4b03      	ldr	r3, [pc, #12]	; (1a002ee4 <Chip_I2C_EventHandler+0x1c>)
1a002ed6:	4413      	add	r3, r2
1a002ed8:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002eda:	7d13      	ldrb	r3, [r2, #20]
1a002edc:	b2db      	uxtb	r3, r3
1a002ede:	2b04      	cmp	r3, #4
1a002ee0:	d0fb      	beq.n	1a002eda <Chip_I2C_EventHandler+0x12>
1a002ee2:	e7f3      	b.n	1a002ecc <Chip_I2C_EventHandler+0x4>
1a002ee4:	10000008 	.word	0x10000008

1a002ee8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002ee8:	b570      	push	{r4, r5, r6, lr}
1a002eea:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002eec:	4e06      	ldr	r6, [pc, #24]	; (1a002f08 <Chip_I2C_Init+0x20>)
1a002eee:	00c4      	lsls	r4, r0, #3
1a002ef0:	1a22      	subs	r2, r4, r0
1a002ef2:	0093      	lsls	r3, r2, #2
1a002ef4:	4433      	add	r3, r6
1a002ef6:	8898      	ldrh	r0, [r3, #4]
1a002ef8:	f7ff fefa 	bl	1a002cf0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002efc:	1b64      	subs	r4, r4, r5
1a002efe:	00a3      	lsls	r3, r4, #2
1a002f00:	58f3      	ldr	r3, [r6, r3]
1a002f02:	226c      	movs	r2, #108	; 0x6c
1a002f04:	619a      	str	r2, [r3, #24]
1a002f06:	bd70      	pop	{r4, r5, r6, pc}
1a002f08:	10000008 	.word	0x10000008

1a002f0c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f10:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002f12:	4e0b      	ldr	r6, [pc, #44]	; (1a002f40 <Chip_I2C_SetClockRate+0x34>)
1a002f14:	00c5      	lsls	r5, r0, #3
1a002f16:	1a2b      	subs	r3, r5, r0
1a002f18:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002f1c:	eb06 0308 	add.w	r3, r6, r8
1a002f20:	8898      	ldrh	r0, [r3, #4]
1a002f22:	f7ff feff 	bl	1a002d24 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002f26:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002f2a:	f856 3008 	ldr.w	r3, [r6, r8]
1a002f2e:	0842      	lsrs	r2, r0, #1
1a002f30:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002f32:	f856 3008 	ldr.w	r3, [r6, r8]
1a002f36:	691a      	ldr	r2, [r3, #16]
1a002f38:	1a80      	subs	r0, r0, r2
1a002f3a:	6158      	str	r0, [r3, #20]
1a002f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f40:	10000008 	.word	0x10000008

1a002f44 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002f44:	4b03      	ldr	r3, [pc, #12]	; (1a002f54 <Chip_SSP_GetClockIndex+0x10>)
1a002f46:	4298      	cmp	r0, r3
1a002f48:	d001      	beq.n	1a002f4e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002f4a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002f4c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002f4e:	20a5      	movs	r0, #165	; 0xa5
1a002f50:	4770      	bx	lr
1a002f52:	bf00      	nop
1a002f54:	400c5000 	.word	0x400c5000

1a002f58 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002f58:	4b04      	ldr	r3, [pc, #16]	; (1a002f6c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002f5a:	4298      	cmp	r0, r3
1a002f5c:	d002      	beq.n	1a002f64 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002f5e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002f62:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002f64:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002f68:	4770      	bx	lr
1a002f6a:	bf00      	nop
1a002f6c:	400c5000 	.word	0x400c5000

1a002f70 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002f70:	6803      	ldr	r3, [r0, #0]
1a002f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002f76:	0209      	lsls	r1, r1, #8
1a002f78:	b289      	uxth	r1, r1
1a002f7a:	430b      	orrs	r3, r1
1a002f7c:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a002f7e:	6102      	str	r2, [r0, #16]
1a002f80:	4770      	bx	lr

1a002f82 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002f82:	b570      	push	{r4, r5, r6, lr}
1a002f84:	4606      	mov	r6, r0
1a002f86:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002f88:	f7ff ffe6 	bl	1a002f58 <Chip_SSP_GetPeriphClockIndex>
1a002f8c:	f7ff feca 	bl	1a002d24 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002f90:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002f96:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002f98:	e000      	b.n	1a002f9c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002f9a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002f9c:	42ab      	cmp	r3, r5
1a002f9e:	d90b      	bls.n	1a002fb8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002fa0:	1c4c      	adds	r4, r1, #1
1a002fa2:	fb04 f302 	mul.w	r3, r4, r2
1a002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002faa:	429d      	cmp	r5, r3
1a002fac:	d2f6      	bcs.n	1a002f9c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002fae:	2cff      	cmp	r4, #255	; 0xff
1a002fb0:	d9f3      	bls.n	1a002f9a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002fb2:	3202      	adds	r2, #2
				cr0_div = 0;
1a002fb4:	2100      	movs	r1, #0
1a002fb6:	e7f1      	b.n	1a002f9c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002fb8:	4630      	mov	r0, r6
1a002fba:	f7ff ffd9 	bl	1a002f70 <Chip_SSP_SetClockRate>
1a002fbe:	bd70      	pop	{r4, r5, r6, pc}

1a002fc0 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002fc0:	b510      	push	{r4, lr}
1a002fc2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002fc4:	f7ff ffbe 	bl	1a002f44 <Chip_SSP_GetClockIndex>
1a002fc8:	f7ff fe92 	bl	1a002cf0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002fcc:	4620      	mov	r0, r4
1a002fce:	f7ff ffc3 	bl	1a002f58 <Chip_SSP_GetPeriphClockIndex>
1a002fd2:	f7ff fe8d 	bl	1a002cf0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002fd6:	6863      	ldr	r3, [r4, #4]
1a002fd8:	f023 0304 	bic.w	r3, r3, #4
1a002fdc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002fde:	6823      	ldr	r3, [r4, #0]
1a002fe0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002fe4:	f043 0307 	orr.w	r3, r3, #7
1a002fe8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002fea:	4902      	ldr	r1, [pc, #8]	; (1a002ff4 <Chip_SSP_Init+0x34>)
1a002fec:	4620      	mov	r0, r4
1a002fee:	f7ff ffc8 	bl	1a002f82 <Chip_SSP_SetBitRate>
1a002ff2:	bd10      	pop	{r4, pc}
1a002ff4:	000186a0 	.word	0x000186a0

1a002ff8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002ff8:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002ffa:	4b0d      	ldr	r3, [pc, #52]	; (1a003030 <SystemInit+0x38>)
1a002ffc:	4a0d      	ldr	r2, [pc, #52]	; (1a003034 <SystemInit+0x3c>)
1a002ffe:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003000:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003004:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003006:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00300a:	2b20      	cmp	r3, #32
1a00300c:	d00d      	beq.n	1a00302a <SystemInit+0x32>
  {
    return 1U;           /* Single precision FPU */
  }
  else
  {
    return 0U;           /* No FPU */
1a00300e:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a003010:	b133      	cbz	r3, 1a003020 <SystemInit+0x28>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003012:	4a07      	ldr	r2, [pc, #28]	; (1a003030 <SystemInit+0x38>)
1a003014:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00301c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a003020:	f7ff fab8 	bl	1a002594 <Board_SystemInit>
   Board_Init();
1a003024:	f7ff fa3e 	bl	1a0024a4 <Board_Init>
1a003028:	bd08      	pop	{r3, pc}
    return 1U;           /* Single precision FPU */
1a00302a:	2301      	movs	r3, #1
1a00302c:	e7f0      	b.n	1a003010 <SystemInit+0x18>
1a00302e:	bf00      	nop
1a003030:	e000ed00 	.word	0xe000ed00
1a003034:	1a000000 	.word	0x1a000000

1a003038 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003038:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00303a:	4d0b      	ldr	r5, [pc, #44]	; (1a003068 <gpioObtainPinInit+0x30>)
1a00303c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003040:	182c      	adds	r4, r5, r0
1a003042:	5628      	ldrsb	r0, [r5, r0]
1a003044:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003046:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00304a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00304c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003050:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003052:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003056:	9b02      	ldr	r3, [sp, #8]
1a003058:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00305a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00305e:	9b03      	ldr	r3, [sp, #12]
1a003060:	701a      	strb	r2, [r3, #0]
}
1a003062:	bc30      	pop	{r4, r5}
1a003064:	4770      	bx	lr
1a003066:	bf00      	nop
1a003068:	1a004e70 	.word	0x1a004e70

1a00306c <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00306c:	f110 0f02 	cmn.w	r0, #2
1a003070:	d02c      	beq.n	1a0030cc <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003072:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003076:	d02b      	beq.n	1a0030d0 <gpioRead+0x64>
{
1a003078:	b500      	push	{lr}
1a00307a:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00307c:	2300      	movs	r3, #0
1a00307e:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003082:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003086:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00308a:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00308e:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003092:	f10d 030b 	add.w	r3, sp, #11
1a003096:	9301      	str	r3, [sp, #4]
1a003098:	ab03      	add	r3, sp, #12
1a00309a:	9300      	str	r3, [sp, #0]
1a00309c:	f10d 030d 	add.w	r3, sp, #13
1a0030a0:	f10d 020e 	add.w	r2, sp, #14
1a0030a4:	f10d 010f 	add.w	r1, sp, #15
1a0030a8:	f7ff ffc6 	bl	1a003038 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0030ac:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0030b0:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0030b4:	015b      	lsls	r3, r3, #5
1a0030b6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0030ba:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0030be:	5c98      	ldrb	r0, [r3, r2]
1a0030c0:	3000      	adds	r0, #0
1a0030c2:	bf18      	it	ne
1a0030c4:	2001      	movne	r0, #1

   return ret_val;
}
1a0030c6:	b005      	add	sp, #20
1a0030c8:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0030cc:	2001      	movs	r0, #1
1a0030ce:	4770      	bx	lr
      return FALSE;
1a0030d0:	2000      	movs	r0, #0
1a0030d2:	4770      	bx	lr

1a0030d4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0030d4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0030d6:	4b04      	ldr	r3, [pc, #16]	; (1a0030e8 <USB0_IRQHandler+0x14>)
1a0030d8:	681b      	ldr	r3, [r3, #0]
1a0030da:	681b      	ldr	r3, [r3, #0]
1a0030dc:	68db      	ldr	r3, [r3, #12]
1a0030de:	4a03      	ldr	r2, [pc, #12]	; (1a0030ec <USB0_IRQHandler+0x18>)
1a0030e0:	6810      	ldr	r0, [r2, #0]
1a0030e2:	4798      	blx	r3
1a0030e4:	bd08      	pop	{r3, pc}
1a0030e6:	bf00      	nop
1a0030e8:	10002c10 	.word	0x10002c10
1a0030ec:	10002bc0 	.word	0x10002bc0

1a0030f0 <__aeabi_uldivmod>:
1a0030f0:	b953      	cbnz	r3, 1a003108 <__aeabi_uldivmod+0x18>
1a0030f2:	b94a      	cbnz	r2, 1a003108 <__aeabi_uldivmod+0x18>
1a0030f4:	2900      	cmp	r1, #0
1a0030f6:	bf08      	it	eq
1a0030f8:	2800      	cmpeq	r0, #0
1a0030fa:	bf1c      	itt	ne
1a0030fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003100:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003104:	f000 b97a 	b.w	1a0033fc <__aeabi_idiv0>
1a003108:	f1ad 0c08 	sub.w	ip, sp, #8
1a00310c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003110:	f000 f806 	bl	1a003120 <__udivmoddi4>
1a003114:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00311c:	b004      	add	sp, #16
1a00311e:	4770      	bx	lr

1a003120 <__udivmoddi4>:
1a003120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003124:	468c      	mov	ip, r1
1a003126:	460d      	mov	r5, r1
1a003128:	4604      	mov	r4, r0
1a00312a:	9e08      	ldr	r6, [sp, #32]
1a00312c:	2b00      	cmp	r3, #0
1a00312e:	d151      	bne.n	1a0031d4 <__udivmoddi4+0xb4>
1a003130:	428a      	cmp	r2, r1
1a003132:	4617      	mov	r7, r2
1a003134:	d96d      	bls.n	1a003212 <__udivmoddi4+0xf2>
1a003136:	fab2 fe82 	clz	lr, r2
1a00313a:	f1be 0f00 	cmp.w	lr, #0
1a00313e:	d00b      	beq.n	1a003158 <__udivmoddi4+0x38>
1a003140:	f1ce 0c20 	rsb	ip, lr, #32
1a003144:	fa01 f50e 	lsl.w	r5, r1, lr
1a003148:	fa20 fc0c 	lsr.w	ip, r0, ip
1a00314c:	fa02 f70e 	lsl.w	r7, r2, lr
1a003150:	ea4c 0c05 	orr.w	ip, ip, r5
1a003154:	fa00 f40e 	lsl.w	r4, r0, lr
1a003158:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a00315c:	0c25      	lsrs	r5, r4, #16
1a00315e:	fbbc f8fa 	udiv	r8, ip, sl
1a003162:	fa1f f987 	uxth.w	r9, r7
1a003166:	fb0a cc18 	mls	ip, sl, r8, ip
1a00316a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a00316e:	fb08 f309 	mul.w	r3, r8, r9
1a003172:	42ab      	cmp	r3, r5
1a003174:	d90a      	bls.n	1a00318c <__udivmoddi4+0x6c>
1a003176:	19ed      	adds	r5, r5, r7
1a003178:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a00317c:	f080 8123 	bcs.w	1a0033c6 <__udivmoddi4+0x2a6>
1a003180:	42ab      	cmp	r3, r5
1a003182:	f240 8120 	bls.w	1a0033c6 <__udivmoddi4+0x2a6>
1a003186:	f1a8 0802 	sub.w	r8, r8, #2
1a00318a:	443d      	add	r5, r7
1a00318c:	1aed      	subs	r5, r5, r3
1a00318e:	b2a4      	uxth	r4, r4
1a003190:	fbb5 f0fa 	udiv	r0, r5, sl
1a003194:	fb0a 5510 	mls	r5, sl, r0, r5
1a003198:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a00319c:	fb00 f909 	mul.w	r9, r0, r9
1a0031a0:	45a1      	cmp	r9, r4
1a0031a2:	d909      	bls.n	1a0031b8 <__udivmoddi4+0x98>
1a0031a4:	19e4      	adds	r4, r4, r7
1a0031a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0031aa:	f080 810a 	bcs.w	1a0033c2 <__udivmoddi4+0x2a2>
1a0031ae:	45a1      	cmp	r9, r4
1a0031b0:	f240 8107 	bls.w	1a0033c2 <__udivmoddi4+0x2a2>
1a0031b4:	3802      	subs	r0, #2
1a0031b6:	443c      	add	r4, r7
1a0031b8:	eba4 0409 	sub.w	r4, r4, r9
1a0031bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a0031c0:	2100      	movs	r1, #0
1a0031c2:	2e00      	cmp	r6, #0
1a0031c4:	d061      	beq.n	1a00328a <__udivmoddi4+0x16a>
1a0031c6:	fa24 f40e 	lsr.w	r4, r4, lr
1a0031ca:	2300      	movs	r3, #0
1a0031cc:	6034      	str	r4, [r6, #0]
1a0031ce:	6073      	str	r3, [r6, #4]
1a0031d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0031d4:	428b      	cmp	r3, r1
1a0031d6:	d907      	bls.n	1a0031e8 <__udivmoddi4+0xc8>
1a0031d8:	2e00      	cmp	r6, #0
1a0031da:	d054      	beq.n	1a003286 <__udivmoddi4+0x166>
1a0031dc:	2100      	movs	r1, #0
1a0031de:	e886 0021 	stmia.w	r6, {r0, r5}
1a0031e2:	4608      	mov	r0, r1
1a0031e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0031e8:	fab3 f183 	clz	r1, r3
1a0031ec:	2900      	cmp	r1, #0
1a0031ee:	f040 808e 	bne.w	1a00330e <__udivmoddi4+0x1ee>
1a0031f2:	42ab      	cmp	r3, r5
1a0031f4:	d302      	bcc.n	1a0031fc <__udivmoddi4+0xdc>
1a0031f6:	4282      	cmp	r2, r0
1a0031f8:	f200 80fa 	bhi.w	1a0033f0 <__udivmoddi4+0x2d0>
1a0031fc:	1a84      	subs	r4, r0, r2
1a0031fe:	eb65 0503 	sbc.w	r5, r5, r3
1a003202:	2001      	movs	r0, #1
1a003204:	46ac      	mov	ip, r5
1a003206:	2e00      	cmp	r6, #0
1a003208:	d03f      	beq.n	1a00328a <__udivmoddi4+0x16a>
1a00320a:	e886 1010 	stmia.w	r6, {r4, ip}
1a00320e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003212:	b912      	cbnz	r2, 1a00321a <__udivmoddi4+0xfa>
1a003214:	2701      	movs	r7, #1
1a003216:	fbb7 f7f2 	udiv	r7, r7, r2
1a00321a:	fab7 fe87 	clz	lr, r7
1a00321e:	f1be 0f00 	cmp.w	lr, #0
1a003222:	d134      	bne.n	1a00328e <__udivmoddi4+0x16e>
1a003224:	1beb      	subs	r3, r5, r7
1a003226:	0c3a      	lsrs	r2, r7, #16
1a003228:	fa1f fc87 	uxth.w	ip, r7
1a00322c:	2101      	movs	r1, #1
1a00322e:	fbb3 f8f2 	udiv	r8, r3, r2
1a003232:	0c25      	lsrs	r5, r4, #16
1a003234:	fb02 3318 	mls	r3, r2, r8, r3
1a003238:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a00323c:	fb0c f308 	mul.w	r3, ip, r8
1a003240:	42ab      	cmp	r3, r5
1a003242:	d907      	bls.n	1a003254 <__udivmoddi4+0x134>
1a003244:	19ed      	adds	r5, r5, r7
1a003246:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a00324a:	d202      	bcs.n	1a003252 <__udivmoddi4+0x132>
1a00324c:	42ab      	cmp	r3, r5
1a00324e:	f200 80d1 	bhi.w	1a0033f4 <__udivmoddi4+0x2d4>
1a003252:	4680      	mov	r8, r0
1a003254:	1aed      	subs	r5, r5, r3
1a003256:	b2a3      	uxth	r3, r4
1a003258:	fbb5 f0f2 	udiv	r0, r5, r2
1a00325c:	fb02 5510 	mls	r5, r2, r0, r5
1a003260:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a003264:	fb0c fc00 	mul.w	ip, ip, r0
1a003268:	45a4      	cmp	ip, r4
1a00326a:	d907      	bls.n	1a00327c <__udivmoddi4+0x15c>
1a00326c:	19e4      	adds	r4, r4, r7
1a00326e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003272:	d202      	bcs.n	1a00327a <__udivmoddi4+0x15a>
1a003274:	45a4      	cmp	ip, r4
1a003276:	f200 80b8 	bhi.w	1a0033ea <__udivmoddi4+0x2ca>
1a00327a:	4618      	mov	r0, r3
1a00327c:	eba4 040c 	sub.w	r4, r4, ip
1a003280:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a003284:	e79d      	b.n	1a0031c2 <__udivmoddi4+0xa2>
1a003286:	4631      	mov	r1, r6
1a003288:	4630      	mov	r0, r6
1a00328a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00328e:	f1ce 0420 	rsb	r4, lr, #32
1a003292:	fa05 f30e 	lsl.w	r3, r5, lr
1a003296:	fa07 f70e 	lsl.w	r7, r7, lr
1a00329a:	fa20 f804 	lsr.w	r8, r0, r4
1a00329e:	0c3a      	lsrs	r2, r7, #16
1a0032a0:	fa25 f404 	lsr.w	r4, r5, r4
1a0032a4:	ea48 0803 	orr.w	r8, r8, r3
1a0032a8:	fbb4 f1f2 	udiv	r1, r4, r2
1a0032ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a0032b0:	fb02 4411 	mls	r4, r2, r1, r4
1a0032b4:	fa1f fc87 	uxth.w	ip, r7
1a0032b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a0032bc:	fb01 f30c 	mul.w	r3, r1, ip
1a0032c0:	42ab      	cmp	r3, r5
1a0032c2:	fa00 f40e 	lsl.w	r4, r0, lr
1a0032c6:	d909      	bls.n	1a0032dc <__udivmoddi4+0x1bc>
1a0032c8:	19ed      	adds	r5, r5, r7
1a0032ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a0032ce:	f080 808a 	bcs.w	1a0033e6 <__udivmoddi4+0x2c6>
1a0032d2:	42ab      	cmp	r3, r5
1a0032d4:	f240 8087 	bls.w	1a0033e6 <__udivmoddi4+0x2c6>
1a0032d8:	3902      	subs	r1, #2
1a0032da:	443d      	add	r5, r7
1a0032dc:	1aeb      	subs	r3, r5, r3
1a0032de:	fa1f f588 	uxth.w	r5, r8
1a0032e2:	fbb3 f0f2 	udiv	r0, r3, r2
1a0032e6:	fb02 3310 	mls	r3, r2, r0, r3
1a0032ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0032ee:	fb00 f30c 	mul.w	r3, r0, ip
1a0032f2:	42ab      	cmp	r3, r5
1a0032f4:	d907      	bls.n	1a003306 <__udivmoddi4+0x1e6>
1a0032f6:	19ed      	adds	r5, r5, r7
1a0032f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a0032fc:	d26f      	bcs.n	1a0033de <__udivmoddi4+0x2be>
1a0032fe:	42ab      	cmp	r3, r5
1a003300:	d96d      	bls.n	1a0033de <__udivmoddi4+0x2be>
1a003302:	3802      	subs	r0, #2
1a003304:	443d      	add	r5, r7
1a003306:	1aeb      	subs	r3, r5, r3
1a003308:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a00330c:	e78f      	b.n	1a00322e <__udivmoddi4+0x10e>
1a00330e:	f1c1 0720 	rsb	r7, r1, #32
1a003312:	fa22 f807 	lsr.w	r8, r2, r7
1a003316:	408b      	lsls	r3, r1
1a003318:	fa05 f401 	lsl.w	r4, r5, r1
1a00331c:	ea48 0303 	orr.w	r3, r8, r3
1a003320:	fa20 fe07 	lsr.w	lr, r0, r7
1a003324:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a003328:	40fd      	lsrs	r5, r7
1a00332a:	ea4e 0e04 	orr.w	lr, lr, r4
1a00332e:	fbb5 f9fc 	udiv	r9, r5, ip
1a003332:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a003336:	fb0c 5519 	mls	r5, ip, r9, r5
1a00333a:	fa1f f883 	uxth.w	r8, r3
1a00333e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a003342:	fb09 f408 	mul.w	r4, r9, r8
1a003346:	42ac      	cmp	r4, r5
1a003348:	fa02 f201 	lsl.w	r2, r2, r1
1a00334c:	fa00 fa01 	lsl.w	sl, r0, r1
1a003350:	d908      	bls.n	1a003364 <__udivmoddi4+0x244>
1a003352:	18ed      	adds	r5, r5, r3
1a003354:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003358:	d243      	bcs.n	1a0033e2 <__udivmoddi4+0x2c2>
1a00335a:	42ac      	cmp	r4, r5
1a00335c:	d941      	bls.n	1a0033e2 <__udivmoddi4+0x2c2>
1a00335e:	f1a9 0902 	sub.w	r9, r9, #2
1a003362:	441d      	add	r5, r3
1a003364:	1b2d      	subs	r5, r5, r4
1a003366:	fa1f fe8e 	uxth.w	lr, lr
1a00336a:	fbb5 f0fc 	udiv	r0, r5, ip
1a00336e:	fb0c 5510 	mls	r5, ip, r0, r5
1a003372:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a003376:	fb00 f808 	mul.w	r8, r0, r8
1a00337a:	45a0      	cmp	r8, r4
1a00337c:	d907      	bls.n	1a00338e <__udivmoddi4+0x26e>
1a00337e:	18e4      	adds	r4, r4, r3
1a003380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a003384:	d229      	bcs.n	1a0033da <__udivmoddi4+0x2ba>
1a003386:	45a0      	cmp	r8, r4
1a003388:	d927      	bls.n	1a0033da <__udivmoddi4+0x2ba>
1a00338a:	3802      	subs	r0, #2
1a00338c:	441c      	add	r4, r3
1a00338e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003392:	eba4 0408 	sub.w	r4, r4, r8
1a003396:	fba0 8902 	umull	r8, r9, r0, r2
1a00339a:	454c      	cmp	r4, r9
1a00339c:	46c6      	mov	lr, r8
1a00339e:	464d      	mov	r5, r9
1a0033a0:	d315      	bcc.n	1a0033ce <__udivmoddi4+0x2ae>
1a0033a2:	d012      	beq.n	1a0033ca <__udivmoddi4+0x2aa>
1a0033a4:	b156      	cbz	r6, 1a0033bc <__udivmoddi4+0x29c>
1a0033a6:	ebba 030e 	subs.w	r3, sl, lr
1a0033aa:	eb64 0405 	sbc.w	r4, r4, r5
1a0033ae:	fa04 f707 	lsl.w	r7, r4, r7
1a0033b2:	40cb      	lsrs	r3, r1
1a0033b4:	431f      	orrs	r7, r3
1a0033b6:	40cc      	lsrs	r4, r1
1a0033b8:	6037      	str	r7, [r6, #0]
1a0033ba:	6074      	str	r4, [r6, #4]
1a0033bc:	2100      	movs	r1, #0
1a0033be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0033c2:	4618      	mov	r0, r3
1a0033c4:	e6f8      	b.n	1a0031b8 <__udivmoddi4+0x98>
1a0033c6:	4690      	mov	r8, r2
1a0033c8:	e6e0      	b.n	1a00318c <__udivmoddi4+0x6c>
1a0033ca:	45c2      	cmp	sl, r8
1a0033cc:	d2ea      	bcs.n	1a0033a4 <__udivmoddi4+0x284>
1a0033ce:	ebb8 0e02 	subs.w	lr, r8, r2
1a0033d2:	eb69 0503 	sbc.w	r5, r9, r3
1a0033d6:	3801      	subs	r0, #1
1a0033d8:	e7e4      	b.n	1a0033a4 <__udivmoddi4+0x284>
1a0033da:	4628      	mov	r0, r5
1a0033dc:	e7d7      	b.n	1a00338e <__udivmoddi4+0x26e>
1a0033de:	4640      	mov	r0, r8
1a0033e0:	e791      	b.n	1a003306 <__udivmoddi4+0x1e6>
1a0033e2:	4681      	mov	r9, r0
1a0033e4:	e7be      	b.n	1a003364 <__udivmoddi4+0x244>
1a0033e6:	4601      	mov	r1, r0
1a0033e8:	e778      	b.n	1a0032dc <__udivmoddi4+0x1bc>
1a0033ea:	3802      	subs	r0, #2
1a0033ec:	443c      	add	r4, r7
1a0033ee:	e745      	b.n	1a00327c <__udivmoddi4+0x15c>
1a0033f0:	4608      	mov	r0, r1
1a0033f2:	e708      	b.n	1a003206 <__udivmoddi4+0xe6>
1a0033f4:	f1a8 0802 	sub.w	r8, r8, #2
1a0033f8:	443d      	add	r5, r7
1a0033fa:	e72b      	b.n	1a003254 <__udivmoddi4+0x134>

1a0033fc <__aeabi_idiv0>:
1a0033fc:	4770      	bx	lr
1a0033fe:	bf00      	nop

1a003400 <__sflush_r>:
1a003400:	898b      	ldrh	r3, [r1, #12]
1a003402:	071a      	lsls	r2, r3, #28
1a003404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003408:	460d      	mov	r5, r1
1a00340a:	4680      	mov	r8, r0
1a00340c:	d433      	bmi.n	1a003476 <__sflush_r+0x76>
1a00340e:	684a      	ldr	r2, [r1, #4]
1a003410:	2a00      	cmp	r2, #0
1a003412:	dd67      	ble.n	1a0034e4 <__sflush_r+0xe4>
1a003414:	6aec      	ldr	r4, [r5, #44]	; 0x2c
1a003416:	2c00      	cmp	r4, #0
1a003418:	d045      	beq.n	1a0034a6 <__sflush_r+0xa6>
1a00341a:	2200      	movs	r2, #0
1a00341c:	f8d8 6000 	ldr.w	r6, [r8]
1a003420:	f8c8 2000 	str.w	r2, [r8]
1a003424:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a003428:	d060      	beq.n	1a0034ec <__sflush_r+0xec>
1a00342a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
1a00342c:	075f      	lsls	r7, r3, #29
1a00342e:	d505      	bpl.n	1a00343c <__sflush_r+0x3c>
1a003430:	6869      	ldr	r1, [r5, #4]
1a003432:	6b6b      	ldr	r3, [r5, #52]	; 0x34
1a003434:	1a52      	subs	r2, r2, r1
1a003436:	b10b      	cbz	r3, 1a00343c <__sflush_r+0x3c>
1a003438:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00343a:	1ad2      	subs	r2, r2, r3
1a00343c:	2300      	movs	r3, #0
1a00343e:	6a29      	ldr	r1, [r5, #32]
1a003440:	4640      	mov	r0, r8
1a003442:	47a0      	blx	r4
1a003444:	1c44      	adds	r4, r0, #1
1a003446:	d039      	beq.n	1a0034bc <__sflush_r+0xbc>
1a003448:	89ab      	ldrh	r3, [r5, #12]
1a00344a:	692a      	ldr	r2, [r5, #16]
1a00344c:	602a      	str	r2, [r5, #0]
1a00344e:	04db      	lsls	r3, r3, #19
1a003450:	f04f 0200 	mov.w	r2, #0
1a003454:	606a      	str	r2, [r5, #4]
1a003456:	d443      	bmi.n	1a0034e0 <__sflush_r+0xe0>
1a003458:	6b69      	ldr	r1, [r5, #52]	; 0x34
1a00345a:	f8c8 6000 	str.w	r6, [r8]
1a00345e:	b311      	cbz	r1, 1a0034a6 <__sflush_r+0xa6>
1a003460:	f105 0344 	add.w	r3, r5, #68	; 0x44
1a003464:	4299      	cmp	r1, r3
1a003466:	d002      	beq.n	1a00346e <__sflush_r+0x6e>
1a003468:	4640      	mov	r0, r8
1a00346a:	f000 fb19 	bl	1a003aa0 <_free_r>
1a00346e:	2000      	movs	r0, #0
1a003470:	6368      	str	r0, [r5, #52]	; 0x34
1a003472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003476:	690e      	ldr	r6, [r1, #16]
1a003478:	b1ae      	cbz	r6, 1a0034a6 <__sflush_r+0xa6>
1a00347a:	680c      	ldr	r4, [r1, #0]
1a00347c:	600e      	str	r6, [r1, #0]
1a00347e:	0798      	lsls	r0, r3, #30
1a003480:	bf0c      	ite	eq
1a003482:	694b      	ldreq	r3, [r1, #20]
1a003484:	2300      	movne	r3, #0
1a003486:	1ba4      	subs	r4, r4, r6
1a003488:	608b      	str	r3, [r1, #8]
1a00348a:	e00a      	b.n	1a0034a2 <__sflush_r+0xa2>
1a00348c:	4623      	mov	r3, r4
1a00348e:	4632      	mov	r2, r6
1a003490:	6aaf      	ldr	r7, [r5, #40]	; 0x28
1a003492:	6a29      	ldr	r1, [r5, #32]
1a003494:	4640      	mov	r0, r8
1a003496:	47b8      	blx	r7
1a003498:	2800      	cmp	r0, #0
1a00349a:	eba4 0400 	sub.w	r4, r4, r0
1a00349e:	4406      	add	r6, r0
1a0034a0:	dd04      	ble.n	1a0034ac <__sflush_r+0xac>
1a0034a2:	2c00      	cmp	r4, #0
1a0034a4:	dcf2      	bgt.n	1a00348c <__sflush_r+0x8c>
1a0034a6:	2000      	movs	r0, #0
1a0034a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0034ac:	89ab      	ldrh	r3, [r5, #12]
1a0034ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0034b2:	81ab      	strh	r3, [r5, #12]
1a0034b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0034b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0034bc:	f8d8 2000 	ldr.w	r2, [r8]
1a0034c0:	2a1d      	cmp	r2, #29
1a0034c2:	d8f3      	bhi.n	1a0034ac <__sflush_r+0xac>
1a0034c4:	4b17      	ldr	r3, [pc, #92]	; (1a003524 <__sflush_r+0x124>)
1a0034c6:	40d3      	lsrs	r3, r2
1a0034c8:	43db      	mvns	r3, r3
1a0034ca:	f013 0301 	ands.w	r3, r3, #1
1a0034ce:	d1ed      	bne.n	1a0034ac <__sflush_r+0xac>
1a0034d0:	89a9      	ldrh	r1, [r5, #12]
1a0034d2:	692c      	ldr	r4, [r5, #16]
1a0034d4:	606b      	str	r3, [r5, #4]
1a0034d6:	04c9      	lsls	r1, r1, #19
1a0034d8:	602c      	str	r4, [r5, #0]
1a0034da:	d5bd      	bpl.n	1a003458 <__sflush_r+0x58>
1a0034dc:	2a00      	cmp	r2, #0
1a0034de:	d1bb      	bne.n	1a003458 <__sflush_r+0x58>
1a0034e0:	6568      	str	r0, [r5, #84]	; 0x54
1a0034e2:	e7b9      	b.n	1a003458 <__sflush_r+0x58>
1a0034e4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
1a0034e6:	2a00      	cmp	r2, #0
1a0034e8:	dc94      	bgt.n	1a003414 <__sflush_r+0x14>
1a0034ea:	e7dc      	b.n	1a0034a6 <__sflush_r+0xa6>
1a0034ec:	2301      	movs	r3, #1
1a0034ee:	6a29      	ldr	r1, [r5, #32]
1a0034f0:	4640      	mov	r0, r8
1a0034f2:	47a0      	blx	r4
1a0034f4:	1c43      	adds	r3, r0, #1
1a0034f6:	4602      	mov	r2, r0
1a0034f8:	d002      	beq.n	1a003500 <__sflush_r+0x100>
1a0034fa:	89ab      	ldrh	r3, [r5, #12]
1a0034fc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
1a0034fe:	e795      	b.n	1a00342c <__sflush_r+0x2c>
1a003500:	f8d8 3000 	ldr.w	r3, [r8]
1a003504:	2b00      	cmp	r3, #0
1a003506:	d0f8      	beq.n	1a0034fa <__sflush_r+0xfa>
1a003508:	2b1d      	cmp	r3, #29
1a00350a:	d001      	beq.n	1a003510 <__sflush_r+0x110>
1a00350c:	2b16      	cmp	r3, #22
1a00350e:	d102      	bne.n	1a003516 <__sflush_r+0x116>
1a003510:	f8c8 6000 	str.w	r6, [r8]
1a003514:	e7c7      	b.n	1a0034a6 <__sflush_r+0xa6>
1a003516:	89ab      	ldrh	r3, [r5, #12]
1a003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00351c:	81ab      	strh	r3, [r5, #12]
1a00351e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003522:	bf00      	nop
1a003524:	20400001 	.word	0x20400001

1a003528 <_fflush_r>:
1a003528:	690b      	ldr	r3, [r1, #16]
1a00352a:	b333      	cbz	r3, 1a00357a <_fflush_r+0x52>
1a00352c:	b510      	push	{r4, lr}
1a00352e:	4604      	mov	r4, r0
1a003530:	b082      	sub	sp, #8
1a003532:	b108      	cbz	r0, 1a003538 <_fflush_r+0x10>
1a003534:	6983      	ldr	r3, [r0, #24]
1a003536:	b1ab      	cbz	r3, 1a003564 <_fflush_r+0x3c>
1a003538:	4b11      	ldr	r3, [pc, #68]	; (1a003580 <_fflush_r+0x58>)
1a00353a:	4299      	cmp	r1, r3
1a00353c:	d019      	beq.n	1a003572 <_fflush_r+0x4a>
1a00353e:	4b11      	ldr	r3, [pc, #68]	; (1a003584 <_fflush_r+0x5c>)
1a003540:	4299      	cmp	r1, r3
1a003542:	d018      	beq.n	1a003576 <_fflush_r+0x4e>
1a003544:	4b10      	ldr	r3, [pc, #64]	; (1a003588 <_fflush_r+0x60>)
1a003546:	4299      	cmp	r1, r3
1a003548:	bf08      	it	eq
1a00354a:	68e1      	ldreq	r1, [r4, #12]
1a00354c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a003550:	b913      	cbnz	r3, 1a003558 <_fflush_r+0x30>
1a003552:	2000      	movs	r0, #0
1a003554:	b002      	add	sp, #8
1a003556:	bd10      	pop	{r4, pc}
1a003558:	4620      	mov	r0, r4
1a00355a:	b002      	add	sp, #8
1a00355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003560:	f7ff bf4e 	b.w	1a003400 <__sflush_r>
1a003564:	9101      	str	r1, [sp, #4]
1a003566:	f000 f91b 	bl	1a0037a0 <__sinit>
1a00356a:	9901      	ldr	r1, [sp, #4]
1a00356c:	4b04      	ldr	r3, [pc, #16]	; (1a003580 <_fflush_r+0x58>)
1a00356e:	4299      	cmp	r1, r3
1a003570:	d1e5      	bne.n	1a00353e <_fflush_r+0x16>
1a003572:	6861      	ldr	r1, [r4, #4]
1a003574:	e7ea      	b.n	1a00354c <_fflush_r+0x24>
1a003576:	68a1      	ldr	r1, [r4, #8]
1a003578:	e7e8      	b.n	1a00354c <_fflush_r+0x24>
1a00357a:	2000      	movs	r0, #0
1a00357c:	4770      	bx	lr
1a00357e:	bf00      	nop
1a003580:	1a004f98 	.word	0x1a004f98
1a003584:	1a004f78 	.word	0x1a004f78
1a003588:	1a004f58 	.word	0x1a004f58

1a00358c <fflush>:
1a00358c:	b120      	cbz	r0, 1a003598 <fflush+0xc>
1a00358e:	4b05      	ldr	r3, [pc, #20]	; (1a0035a4 <fflush+0x18>)
1a003590:	4601      	mov	r1, r0
1a003592:	6818      	ldr	r0, [r3, #0]
1a003594:	f7ff bfc8 	b.w	1a003528 <_fflush_r>
1a003598:	4b03      	ldr	r3, [pc, #12]	; (1a0035a8 <fflush+0x1c>)
1a00359a:	4904      	ldr	r1, [pc, #16]	; (1a0035ac <fflush+0x20>)
1a00359c:	6818      	ldr	r0, [r3, #0]
1a00359e:	f000 b945 	b.w	1a00382c <_fwalk_reent>
1a0035a2:	bf00      	nop
1a0035a4:	10000040 	.word	0x10000040
1a0035a8:	1a004fb8 	.word	0x1a004fb8
1a0035ac:	1a003529 	.word	0x1a003529

1a0035b0 <__fp_unlock>:
1a0035b0:	2000      	movs	r0, #0
1a0035b2:	4770      	bx	lr

1a0035b4 <_cleanup_r>:
1a0035b4:	4901      	ldr	r1, [pc, #4]	; (1a0035bc <_cleanup_r+0x8>)
1a0035b6:	f000 b939 	b.w	1a00382c <_fwalk_reent>
1a0035ba:	bf00      	nop
1a0035bc:	1a003529 	.word	0x1a003529

1a0035c0 <__fp_lock>:
1a0035c0:	2000      	movs	r0, #0
1a0035c2:	4770      	bx	lr

1a0035c4 <__sfmoreglue>:
1a0035c4:	b570      	push	{r4, r5, r6, lr}
1a0035c6:	1e4a      	subs	r2, r1, #1
1a0035c8:	2568      	movs	r5, #104	; 0x68
1a0035ca:	fb05 f502 	mul.w	r5, r5, r2
1a0035ce:	460e      	mov	r6, r1
1a0035d0:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0035d4:	f000 faac 	bl	1a003b30 <_malloc_r>
1a0035d8:	4604      	mov	r4, r0
1a0035da:	b140      	cbz	r0, 1a0035ee <__sfmoreglue+0x2a>
1a0035dc:	2100      	movs	r1, #0
1a0035de:	300c      	adds	r0, #12
1a0035e0:	6066      	str	r6, [r4, #4]
1a0035e2:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0035e6:	6021      	str	r1, [r4, #0]
1a0035e8:	60a0      	str	r0, [r4, #8]
1a0035ea:	f000 fa0b 	bl	1a003a04 <memset>
1a0035ee:	4620      	mov	r0, r4
1a0035f0:	bd70      	pop	{r4, r5, r6, pc}
1a0035f2:	bf00      	nop

1a0035f4 <__sfp>:
1a0035f4:	4b20      	ldr	r3, [pc, #128]	; (1a003678 <__sfp+0x84>)
1a0035f6:	b570      	push	{r4, r5, r6, lr}
1a0035f8:	681d      	ldr	r5, [r3, #0]
1a0035fa:	69ab      	ldr	r3, [r5, #24]
1a0035fc:	4606      	mov	r6, r0
1a0035fe:	b35b      	cbz	r3, 1a003658 <__sfp+0x64>
1a003600:	3548      	adds	r5, #72	; 0x48
1a003602:	686b      	ldr	r3, [r5, #4]
1a003604:	68ac      	ldr	r4, [r5, #8]
1a003606:	3b01      	subs	r3, #1
1a003608:	d505      	bpl.n	1a003616 <__sfp+0x22>
1a00360a:	e021      	b.n	1a003650 <__sfp+0x5c>
1a00360c:	3b01      	subs	r3, #1
1a00360e:	1c5a      	adds	r2, r3, #1
1a003610:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003614:	d01c      	beq.n	1a003650 <__sfp+0x5c>
1a003616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00361a:	2a00      	cmp	r2, #0
1a00361c:	d1f6      	bne.n	1a00360c <__sfp+0x18>
1a00361e:	2500      	movs	r5, #0
1a003620:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a003624:	2301      	movs	r3, #1
1a003626:	81e2      	strh	r2, [r4, #14]
1a003628:	81a3      	strh	r3, [r4, #12]
1a00362a:	6665      	str	r5, [r4, #100]	; 0x64
1a00362c:	6025      	str	r5, [r4, #0]
1a00362e:	60a5      	str	r5, [r4, #8]
1a003630:	6065      	str	r5, [r4, #4]
1a003632:	6125      	str	r5, [r4, #16]
1a003634:	6165      	str	r5, [r4, #20]
1a003636:	61a5      	str	r5, [r4, #24]
1a003638:	4629      	mov	r1, r5
1a00363a:	2208      	movs	r2, #8
1a00363c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003640:	f000 f9e0 	bl	1a003a04 <memset>
1a003644:	6365      	str	r5, [r4, #52]	; 0x34
1a003646:	63a5      	str	r5, [r4, #56]	; 0x38
1a003648:	64a5      	str	r5, [r4, #72]	; 0x48
1a00364a:	64e5      	str	r5, [r4, #76]	; 0x4c
1a00364c:	4620      	mov	r0, r4
1a00364e:	bd70      	pop	{r4, r5, r6, pc}
1a003650:	6828      	ldr	r0, [r5, #0]
1a003652:	b128      	cbz	r0, 1a003660 <__sfp+0x6c>
1a003654:	4605      	mov	r5, r0
1a003656:	e7d4      	b.n	1a003602 <__sfp+0xe>
1a003658:	4628      	mov	r0, r5
1a00365a:	f000 f80f 	bl	1a00367c <__sinit.part.1>
1a00365e:	e7cf      	b.n	1a003600 <__sfp+0xc>
1a003660:	2104      	movs	r1, #4
1a003662:	4630      	mov	r0, r6
1a003664:	f7ff ffae 	bl	1a0035c4 <__sfmoreglue>
1a003668:	6028      	str	r0, [r5, #0]
1a00366a:	2800      	cmp	r0, #0
1a00366c:	d1f2      	bne.n	1a003654 <__sfp+0x60>
1a00366e:	230c      	movs	r3, #12
1a003670:	4604      	mov	r4, r0
1a003672:	6033      	str	r3, [r6, #0]
1a003674:	e7ea      	b.n	1a00364c <__sfp+0x58>
1a003676:	bf00      	nop
1a003678:	1a004fb8 	.word	0x1a004fb8

1a00367c <__sinit.part.1>:
1a00367c:	4b3d      	ldr	r3, [pc, #244]	; (1a003774 <__sinit.part.1+0xf8>)
1a00367e:	493e      	ldr	r1, [pc, #248]	; (1a003778 <__sinit.part.1+0xfc>)
1a003680:	681a      	ldr	r2, [r3, #0]
1a003682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003686:	4290      	cmp	r0, r2
1a003688:	f04f 0300 	mov.w	r3, #0
1a00368c:	6483      	str	r3, [r0, #72]	; 0x48
1a00368e:	64c3      	str	r3, [r0, #76]	; 0x4c
1a003690:	6503      	str	r3, [r0, #80]	; 0x50
1a003692:	bf08      	it	eq
1a003694:	2301      	moveq	r3, #1
1a003696:	b083      	sub	sp, #12
1a003698:	bf08      	it	eq
1a00369a:	6183      	streq	r3, [r0, #24]
1a00369c:	6281      	str	r1, [r0, #40]	; 0x28
1a00369e:	4607      	mov	r7, r0
1a0036a0:	f7ff ffa8 	bl	1a0035f4 <__sfp>
1a0036a4:	6078      	str	r0, [r7, #4]
1a0036a6:	4638      	mov	r0, r7
1a0036a8:	f7ff ffa4 	bl	1a0035f4 <__sfp>
1a0036ac:	60b8      	str	r0, [r7, #8]
1a0036ae:	4638      	mov	r0, r7
1a0036b0:	f7ff ffa0 	bl	1a0035f4 <__sfp>
1a0036b4:	687d      	ldr	r5, [r7, #4]
1a0036b6:	60f8      	str	r0, [r7, #12]
1a0036b8:	2400      	movs	r4, #0
1a0036ba:	2304      	movs	r3, #4
1a0036bc:	81ab      	strh	r3, [r5, #12]
1a0036be:	602c      	str	r4, [r5, #0]
1a0036c0:	606c      	str	r4, [r5, #4]
1a0036c2:	60ac      	str	r4, [r5, #8]
1a0036c4:	666c      	str	r4, [r5, #100]	; 0x64
1a0036c6:	81ec      	strh	r4, [r5, #14]
1a0036c8:	612c      	str	r4, [r5, #16]
1a0036ca:	616c      	str	r4, [r5, #20]
1a0036cc:	61ac      	str	r4, [r5, #24]
1a0036ce:	4621      	mov	r1, r4
1a0036d0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a0036d4:	2208      	movs	r2, #8
1a0036d6:	f000 f995 	bl	1a003a04 <memset>
1a0036da:	68be      	ldr	r6, [r7, #8]
1a0036dc:	f8df b09c 	ldr.w	fp, [pc, #156]	; 1a00377c <__sinit.part.1+0x100>
1a0036e0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a003780 <__sinit.part.1+0x104>
1a0036e4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1a003784 <__sinit.part.1+0x108>
1a0036e8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1a003788 <__sinit.part.1+0x10c>
1a0036ec:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
1a0036f0:	2301      	movs	r3, #1
1a0036f2:	2209      	movs	r2, #9
1a0036f4:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
1a0036f8:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
1a0036fc:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
1a003700:	622d      	str	r5, [r5, #32]
1a003702:	4621      	mov	r1, r4
1a003704:	81f3      	strh	r3, [r6, #14]
1a003706:	81b2      	strh	r2, [r6, #12]
1a003708:	6034      	str	r4, [r6, #0]
1a00370a:	6074      	str	r4, [r6, #4]
1a00370c:	60b4      	str	r4, [r6, #8]
1a00370e:	6674      	str	r4, [r6, #100]	; 0x64
1a003710:	6134      	str	r4, [r6, #16]
1a003712:	6174      	str	r4, [r6, #20]
1a003714:	61b4      	str	r4, [r6, #24]
1a003716:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1a00371a:	2208      	movs	r2, #8
1a00371c:	9301      	str	r3, [sp, #4]
1a00371e:	f000 f971 	bl	1a003a04 <memset>
1a003722:	68fd      	ldr	r5, [r7, #12]
1a003724:	6236      	str	r6, [r6, #32]
1a003726:	2012      	movs	r0, #18
1a003728:	2202      	movs	r2, #2
1a00372a:	f8c6 b024 	str.w	fp, [r6, #36]	; 0x24
1a00372e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
1a003732:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
1a003736:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
1a00373a:	4621      	mov	r1, r4
1a00373c:	81a8      	strh	r0, [r5, #12]
1a00373e:	81ea      	strh	r2, [r5, #14]
1a003740:	602c      	str	r4, [r5, #0]
1a003742:	606c      	str	r4, [r5, #4]
1a003744:	60ac      	str	r4, [r5, #8]
1a003746:	666c      	str	r4, [r5, #100]	; 0x64
1a003748:	612c      	str	r4, [r5, #16]
1a00374a:	616c      	str	r4, [r5, #20]
1a00374c:	61ac      	str	r4, [r5, #24]
1a00374e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a003752:	2208      	movs	r2, #8
1a003754:	f000 f956 	bl	1a003a04 <memset>
1a003758:	9b01      	ldr	r3, [sp, #4]
1a00375a:	622d      	str	r5, [r5, #32]
1a00375c:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
1a003760:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
1a003764:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
1a003768:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
1a00376c:	61bb      	str	r3, [r7, #24]
1a00376e:	b003      	add	sp, #12
1a003770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003774:	1a004fb8 	.word	0x1a004fb8
1a003778:	1a0035b5 	.word	0x1a0035b5
1a00377c:	1a004409 	.word	0x1a004409
1a003780:	1a004431 	.word	0x1a004431
1a003784:	1a00446d 	.word	0x1a00446d
1a003788:	1a00448d 	.word	0x1a00448d

1a00378c <_cleanup>:
1a00378c:	4b02      	ldr	r3, [pc, #8]	; (1a003798 <_cleanup+0xc>)
1a00378e:	4903      	ldr	r1, [pc, #12]	; (1a00379c <_cleanup+0x10>)
1a003790:	6818      	ldr	r0, [r3, #0]
1a003792:	f000 b84b 	b.w	1a00382c <_fwalk_reent>
1a003796:	bf00      	nop
1a003798:	1a004fb8 	.word	0x1a004fb8
1a00379c:	1a003529 	.word	0x1a003529

1a0037a0 <__sinit>:
1a0037a0:	6983      	ldr	r3, [r0, #24]
1a0037a2:	b903      	cbnz	r3, 1a0037a6 <__sinit+0x6>
1a0037a4:	e76a      	b.n	1a00367c <__sinit.part.1>
1a0037a6:	4770      	bx	lr

1a0037a8 <__sfp_lock_acquire>:
1a0037a8:	4770      	bx	lr
1a0037aa:	bf00      	nop

1a0037ac <__sfp_lock_release>:
1a0037ac:	4770      	bx	lr
1a0037ae:	bf00      	nop

1a0037b0 <__sinit_lock_acquire>:
1a0037b0:	4770      	bx	lr
1a0037b2:	bf00      	nop

1a0037b4 <__sinit_lock_release>:
1a0037b4:	4770      	bx	lr
1a0037b6:	bf00      	nop

1a0037b8 <__fp_lock_all>:
1a0037b8:	4b02      	ldr	r3, [pc, #8]	; (1a0037c4 <__fp_lock_all+0xc>)
1a0037ba:	4903      	ldr	r1, [pc, #12]	; (1a0037c8 <__fp_lock_all+0x10>)
1a0037bc:	6818      	ldr	r0, [r3, #0]
1a0037be:	f000 b80f 	b.w	1a0037e0 <_fwalk>
1a0037c2:	bf00      	nop
1a0037c4:	10000040 	.word	0x10000040
1a0037c8:	1a0035c1 	.word	0x1a0035c1

1a0037cc <__fp_unlock_all>:
1a0037cc:	4b02      	ldr	r3, [pc, #8]	; (1a0037d8 <__fp_unlock_all+0xc>)
1a0037ce:	4903      	ldr	r1, [pc, #12]	; (1a0037dc <__fp_unlock_all+0x10>)
1a0037d0:	6818      	ldr	r0, [r3, #0]
1a0037d2:	f000 b805 	b.w	1a0037e0 <_fwalk>
1a0037d6:	bf00      	nop
1a0037d8:	10000040 	.word	0x10000040
1a0037dc:	1a0035b1 	.word	0x1a0035b1

1a0037e0 <_fwalk>:
1a0037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0037e4:	f110 0748 	adds.w	r7, r0, #72	; 0x48
1a0037e8:	d01b      	beq.n	1a003822 <_fwalk+0x42>
1a0037ea:	4688      	mov	r8, r1
1a0037ec:	2600      	movs	r6, #0
1a0037ee:	687d      	ldr	r5, [r7, #4]
1a0037f0:	68bc      	ldr	r4, [r7, #8]
1a0037f2:	3d01      	subs	r5, #1
1a0037f4:	d40f      	bmi.n	1a003816 <_fwalk+0x36>
1a0037f6:	89a3      	ldrh	r3, [r4, #12]
1a0037f8:	2b01      	cmp	r3, #1
1a0037fa:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a0037fe:	d906      	bls.n	1a00380e <_fwalk+0x2e>
1a003800:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003804:	3301      	adds	r3, #1
1a003806:	4620      	mov	r0, r4
1a003808:	d001      	beq.n	1a00380e <_fwalk+0x2e>
1a00380a:	47c0      	blx	r8
1a00380c:	4306      	orrs	r6, r0
1a00380e:	1c6b      	adds	r3, r5, #1
1a003810:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003814:	d1ef      	bne.n	1a0037f6 <_fwalk+0x16>
1a003816:	683f      	ldr	r7, [r7, #0]
1a003818:	2f00      	cmp	r7, #0
1a00381a:	d1e8      	bne.n	1a0037ee <_fwalk+0xe>
1a00381c:	4630      	mov	r0, r6
1a00381e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003822:	463e      	mov	r6, r7
1a003824:	4630      	mov	r0, r6
1a003826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00382a:	bf00      	nop

1a00382c <_fwalk_reent>:
1a00382c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003830:	f110 0748 	adds.w	r7, r0, #72	; 0x48
1a003834:	d01f      	beq.n	1a003876 <_fwalk_reent+0x4a>
1a003836:	4688      	mov	r8, r1
1a003838:	4606      	mov	r6, r0
1a00383a:	f04f 0900 	mov.w	r9, #0
1a00383e:	687d      	ldr	r5, [r7, #4]
1a003840:	68bc      	ldr	r4, [r7, #8]
1a003842:	3d01      	subs	r5, #1
1a003844:	d411      	bmi.n	1a00386a <_fwalk_reent+0x3e>
1a003846:	89a3      	ldrh	r3, [r4, #12]
1a003848:	2b01      	cmp	r3, #1
1a00384a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a00384e:	d908      	bls.n	1a003862 <_fwalk_reent+0x36>
1a003850:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003854:	3301      	adds	r3, #1
1a003856:	4621      	mov	r1, r4
1a003858:	4630      	mov	r0, r6
1a00385a:	d002      	beq.n	1a003862 <_fwalk_reent+0x36>
1a00385c:	47c0      	blx	r8
1a00385e:	ea49 0900 	orr.w	r9, r9, r0
1a003862:	1c6b      	adds	r3, r5, #1
1a003864:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003868:	d1ed      	bne.n	1a003846 <_fwalk_reent+0x1a>
1a00386a:	683f      	ldr	r7, [r7, #0]
1a00386c:	2f00      	cmp	r7, #0
1a00386e:	d1e6      	bne.n	1a00383e <_fwalk_reent+0x12>
1a003870:	4648      	mov	r0, r9
1a003872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003876:	46b9      	mov	r9, r7
1a003878:	4648      	mov	r0, r9
1a00387a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00387e:	bf00      	nop

1a003880 <__libc_init_array>:
1a003880:	b570      	push	{r4, r5, r6, lr}
1a003882:	4e0f      	ldr	r6, [pc, #60]	; (1a0038c0 <__libc_init_array+0x40>)
1a003884:	4d0f      	ldr	r5, [pc, #60]	; (1a0038c4 <__libc_init_array+0x44>)
1a003886:	1b76      	subs	r6, r6, r5
1a003888:	10b6      	asrs	r6, r6, #2
1a00388a:	bf18      	it	ne
1a00388c:	2400      	movne	r4, #0
1a00388e:	d005      	beq.n	1a00389c <__libc_init_array+0x1c>
1a003890:	3401      	adds	r4, #1
1a003892:	f855 3b04 	ldr.w	r3, [r5], #4
1a003896:	4798      	blx	r3
1a003898:	42a6      	cmp	r6, r4
1a00389a:	d1f9      	bne.n	1a003890 <__libc_init_array+0x10>
1a00389c:	4e0a      	ldr	r6, [pc, #40]	; (1a0038c8 <__libc_init_array+0x48>)
1a00389e:	4d0b      	ldr	r5, [pc, #44]	; (1a0038cc <__libc_init_array+0x4c>)
1a0038a0:	1b76      	subs	r6, r6, r5
1a0038a2:	f7fc fdba 	bl	1a00041a <_init>
1a0038a6:	10b6      	asrs	r6, r6, #2
1a0038a8:	bf18      	it	ne
1a0038aa:	2400      	movne	r4, #0
1a0038ac:	d006      	beq.n	1a0038bc <__libc_init_array+0x3c>
1a0038ae:	3401      	adds	r4, #1
1a0038b0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0038b4:	4798      	blx	r3
1a0038b6:	42a6      	cmp	r6, r4
1a0038b8:	d1f9      	bne.n	1a0038ae <__libc_init_array+0x2e>
1a0038ba:	bd70      	pop	{r4, r5, r6, pc}
1a0038bc:	bd70      	pop	{r4, r5, r6, pc}
1a0038be:	bf00      	nop
1a0038c0:	1a004ffc 	.word	0x1a004ffc
1a0038c4:	1a004ffc 	.word	0x1a004ffc
1a0038c8:	1a005000 	.word	0x1a005000
1a0038cc:	1a004ffc 	.word	0x1a004ffc

1a0038d0 <memcpy>:
1a0038d0:	4684      	mov	ip, r0
1a0038d2:	ea41 0300 	orr.w	r3, r1, r0
1a0038d6:	f013 0303 	ands.w	r3, r3, #3
1a0038da:	d16d      	bne.n	1a0039b8 <memcpy+0xe8>
1a0038dc:	3a40      	subs	r2, #64	; 0x40
1a0038de:	d341      	bcc.n	1a003964 <memcpy+0x94>
1a0038e0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0038e4:	f840 3b04 	str.w	r3, [r0], #4
1a0038e8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0038ec:	f840 3b04 	str.w	r3, [r0], #4
1a0038f0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0038f4:	f840 3b04 	str.w	r3, [r0], #4
1a0038f8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0038fc:	f840 3b04 	str.w	r3, [r0], #4
1a003900:	f851 3b04 	ldr.w	r3, [r1], #4
1a003904:	f840 3b04 	str.w	r3, [r0], #4
1a003908:	f851 3b04 	ldr.w	r3, [r1], #4
1a00390c:	f840 3b04 	str.w	r3, [r0], #4
1a003910:	f851 3b04 	ldr.w	r3, [r1], #4
1a003914:	f840 3b04 	str.w	r3, [r0], #4
1a003918:	f851 3b04 	ldr.w	r3, [r1], #4
1a00391c:	f840 3b04 	str.w	r3, [r0], #4
1a003920:	f851 3b04 	ldr.w	r3, [r1], #4
1a003924:	f840 3b04 	str.w	r3, [r0], #4
1a003928:	f851 3b04 	ldr.w	r3, [r1], #4
1a00392c:	f840 3b04 	str.w	r3, [r0], #4
1a003930:	f851 3b04 	ldr.w	r3, [r1], #4
1a003934:	f840 3b04 	str.w	r3, [r0], #4
1a003938:	f851 3b04 	ldr.w	r3, [r1], #4
1a00393c:	f840 3b04 	str.w	r3, [r0], #4
1a003940:	f851 3b04 	ldr.w	r3, [r1], #4
1a003944:	f840 3b04 	str.w	r3, [r0], #4
1a003948:	f851 3b04 	ldr.w	r3, [r1], #4
1a00394c:	f840 3b04 	str.w	r3, [r0], #4
1a003950:	f851 3b04 	ldr.w	r3, [r1], #4
1a003954:	f840 3b04 	str.w	r3, [r0], #4
1a003958:	f851 3b04 	ldr.w	r3, [r1], #4
1a00395c:	f840 3b04 	str.w	r3, [r0], #4
1a003960:	3a40      	subs	r2, #64	; 0x40
1a003962:	d2bd      	bcs.n	1a0038e0 <memcpy+0x10>
1a003964:	3230      	adds	r2, #48	; 0x30
1a003966:	d311      	bcc.n	1a00398c <memcpy+0xbc>
1a003968:	f851 3b04 	ldr.w	r3, [r1], #4
1a00396c:	f840 3b04 	str.w	r3, [r0], #4
1a003970:	f851 3b04 	ldr.w	r3, [r1], #4
1a003974:	f840 3b04 	str.w	r3, [r0], #4
1a003978:	f851 3b04 	ldr.w	r3, [r1], #4
1a00397c:	f840 3b04 	str.w	r3, [r0], #4
1a003980:	f851 3b04 	ldr.w	r3, [r1], #4
1a003984:	f840 3b04 	str.w	r3, [r0], #4
1a003988:	3a10      	subs	r2, #16
1a00398a:	d2ed      	bcs.n	1a003968 <memcpy+0x98>
1a00398c:	320c      	adds	r2, #12
1a00398e:	d305      	bcc.n	1a00399c <memcpy+0xcc>
1a003990:	f851 3b04 	ldr.w	r3, [r1], #4
1a003994:	f840 3b04 	str.w	r3, [r0], #4
1a003998:	3a04      	subs	r2, #4
1a00399a:	d2f9      	bcs.n	1a003990 <memcpy+0xc0>
1a00399c:	3204      	adds	r2, #4
1a00399e:	d008      	beq.n	1a0039b2 <memcpy+0xe2>
1a0039a0:	07d2      	lsls	r2, r2, #31
1a0039a2:	bf1c      	itt	ne
1a0039a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0039a8:	f800 3b01 	strbne.w	r3, [r0], #1
1a0039ac:	d301      	bcc.n	1a0039b2 <memcpy+0xe2>
1a0039ae:	880b      	ldrh	r3, [r1, #0]
1a0039b0:	8003      	strh	r3, [r0, #0]
1a0039b2:	4660      	mov	r0, ip
1a0039b4:	4770      	bx	lr
1a0039b6:	bf00      	nop
1a0039b8:	2a08      	cmp	r2, #8
1a0039ba:	d313      	bcc.n	1a0039e4 <memcpy+0x114>
1a0039bc:	078b      	lsls	r3, r1, #30
1a0039be:	d08d      	beq.n	1a0038dc <memcpy+0xc>
1a0039c0:	f010 0303 	ands.w	r3, r0, #3
1a0039c4:	d08a      	beq.n	1a0038dc <memcpy+0xc>
1a0039c6:	f1c3 0304 	rsb	r3, r3, #4
1a0039ca:	1ad2      	subs	r2, r2, r3
1a0039cc:	07db      	lsls	r3, r3, #31
1a0039ce:	bf1c      	itt	ne
1a0039d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0039d4:	f800 3b01 	strbne.w	r3, [r0], #1
1a0039d8:	d380      	bcc.n	1a0038dc <memcpy+0xc>
1a0039da:	f831 3b02 	ldrh.w	r3, [r1], #2
1a0039de:	f820 3b02 	strh.w	r3, [r0], #2
1a0039e2:	e77b      	b.n	1a0038dc <memcpy+0xc>
1a0039e4:	3a04      	subs	r2, #4
1a0039e6:	d3d9      	bcc.n	1a00399c <memcpy+0xcc>
1a0039e8:	3a01      	subs	r2, #1
1a0039ea:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0039ee:	f800 3b01 	strb.w	r3, [r0], #1
1a0039f2:	d2f9      	bcs.n	1a0039e8 <memcpy+0x118>
1a0039f4:	780b      	ldrb	r3, [r1, #0]
1a0039f6:	7003      	strb	r3, [r0, #0]
1a0039f8:	784b      	ldrb	r3, [r1, #1]
1a0039fa:	7043      	strb	r3, [r0, #1]
1a0039fc:	788b      	ldrb	r3, [r1, #2]
1a0039fe:	7083      	strb	r3, [r0, #2]
1a003a00:	4660      	mov	r0, ip
1a003a02:	4770      	bx	lr

1a003a04 <memset>:
1a003a04:	b470      	push	{r4, r5, r6}
1a003a06:	0786      	lsls	r6, r0, #30
1a003a08:	d046      	beq.n	1a003a98 <memset+0x94>
1a003a0a:	1e54      	subs	r4, r2, #1
1a003a0c:	2a00      	cmp	r2, #0
1a003a0e:	d041      	beq.n	1a003a94 <memset+0x90>
1a003a10:	b2ca      	uxtb	r2, r1
1a003a12:	4603      	mov	r3, r0
1a003a14:	e002      	b.n	1a003a1c <memset+0x18>
1a003a16:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003a1a:	d33b      	bcc.n	1a003a94 <memset+0x90>
1a003a1c:	f803 2b01 	strb.w	r2, [r3], #1
1a003a20:	079d      	lsls	r5, r3, #30
1a003a22:	d1f8      	bne.n	1a003a16 <memset+0x12>
1a003a24:	2c03      	cmp	r4, #3
1a003a26:	d92e      	bls.n	1a003a86 <memset+0x82>
1a003a28:	b2cd      	uxtb	r5, r1
1a003a2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003a2e:	2c0f      	cmp	r4, #15
1a003a30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003a34:	d919      	bls.n	1a003a6a <memset+0x66>
1a003a36:	f103 0210 	add.w	r2, r3, #16
1a003a3a:	4626      	mov	r6, r4
1a003a3c:	3e10      	subs	r6, #16
1a003a3e:	2e0f      	cmp	r6, #15
1a003a40:	f842 5c10 	str.w	r5, [r2, #-16]
1a003a44:	f842 5c0c 	str.w	r5, [r2, #-12]
1a003a48:	f842 5c08 	str.w	r5, [r2, #-8]
1a003a4c:	f842 5c04 	str.w	r5, [r2, #-4]
1a003a50:	f102 0210 	add.w	r2, r2, #16
1a003a54:	d8f2      	bhi.n	1a003a3c <memset+0x38>
1a003a56:	f1a4 0210 	sub.w	r2, r4, #16
1a003a5a:	f022 020f 	bic.w	r2, r2, #15
1a003a5e:	f004 040f 	and.w	r4, r4, #15
1a003a62:	3210      	adds	r2, #16
1a003a64:	2c03      	cmp	r4, #3
1a003a66:	4413      	add	r3, r2
1a003a68:	d90d      	bls.n	1a003a86 <memset+0x82>
1a003a6a:	461e      	mov	r6, r3
1a003a6c:	4622      	mov	r2, r4
1a003a6e:	3a04      	subs	r2, #4
1a003a70:	2a03      	cmp	r2, #3
1a003a72:	f846 5b04 	str.w	r5, [r6], #4
1a003a76:	d8fa      	bhi.n	1a003a6e <memset+0x6a>
1a003a78:	1f22      	subs	r2, r4, #4
1a003a7a:	f022 0203 	bic.w	r2, r2, #3
1a003a7e:	3204      	adds	r2, #4
1a003a80:	4413      	add	r3, r2
1a003a82:	f004 0403 	and.w	r4, r4, #3
1a003a86:	b12c      	cbz	r4, 1a003a94 <memset+0x90>
1a003a88:	b2c9      	uxtb	r1, r1
1a003a8a:	441c      	add	r4, r3
1a003a8c:	f803 1b01 	strb.w	r1, [r3], #1
1a003a90:	429c      	cmp	r4, r3
1a003a92:	d1fb      	bne.n	1a003a8c <memset+0x88>
1a003a94:	bc70      	pop	{r4, r5, r6}
1a003a96:	4770      	bx	lr
1a003a98:	4614      	mov	r4, r2
1a003a9a:	4603      	mov	r3, r0
1a003a9c:	e7c2      	b.n	1a003a24 <memset+0x20>
1a003a9e:	bf00      	nop

1a003aa0 <_free_r>:
1a003aa0:	b191      	cbz	r1, 1a003ac8 <_free_r+0x28>
1a003aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003aa6:	3904      	subs	r1, #4
1a003aa8:	2b00      	cmp	r3, #0
1a003aaa:	bfb8      	it	lt
1a003aac:	18c9      	addlt	r1, r1, r3
1a003aae:	4b1f      	ldr	r3, [pc, #124]	; (1a003b2c <_free_r+0x8c>)
1a003ab0:	681a      	ldr	r2, [r3, #0]
1a003ab2:	b1fa      	cbz	r2, 1a003af4 <_free_r+0x54>
1a003ab4:	428a      	cmp	r2, r1
1a003ab6:	b430      	push	{r4, r5}
1a003ab8:	d90a      	bls.n	1a003ad0 <_free_r+0x30>
1a003aba:	6808      	ldr	r0, [r1, #0]
1a003abc:	180c      	adds	r4, r1, r0
1a003abe:	42a2      	cmp	r2, r4
1a003ac0:	d026      	beq.n	1a003b10 <_free_r+0x70>
1a003ac2:	604a      	str	r2, [r1, #4]
1a003ac4:	6019      	str	r1, [r3, #0]
1a003ac6:	bc30      	pop	{r4, r5}
1a003ac8:	4770      	bx	lr
1a003aca:	428b      	cmp	r3, r1
1a003acc:	d803      	bhi.n	1a003ad6 <_free_r+0x36>
1a003ace:	461a      	mov	r2, r3
1a003ad0:	6853      	ldr	r3, [r2, #4]
1a003ad2:	2b00      	cmp	r3, #0
1a003ad4:	d1f9      	bne.n	1a003aca <_free_r+0x2a>
1a003ad6:	6814      	ldr	r4, [r2, #0]
1a003ad8:	1915      	adds	r5, r2, r4
1a003ada:	428d      	cmp	r5, r1
1a003adc:	d00d      	beq.n	1a003afa <_free_r+0x5a>
1a003ade:	d806      	bhi.n	1a003aee <_free_r+0x4e>
1a003ae0:	6808      	ldr	r0, [r1, #0]
1a003ae2:	180c      	adds	r4, r1, r0
1a003ae4:	429c      	cmp	r4, r3
1a003ae6:	d019      	beq.n	1a003b1c <_free_r+0x7c>
1a003ae8:	604b      	str	r3, [r1, #4]
1a003aea:	6051      	str	r1, [r2, #4]
1a003aec:	e7eb      	b.n	1a003ac6 <_free_r+0x26>
1a003aee:	230c      	movs	r3, #12
1a003af0:	6003      	str	r3, [r0, #0]
1a003af2:	e7e8      	b.n	1a003ac6 <_free_r+0x26>
1a003af4:	604a      	str	r2, [r1, #4]
1a003af6:	6019      	str	r1, [r3, #0]
1a003af8:	4770      	bx	lr
1a003afa:	6809      	ldr	r1, [r1, #0]
1a003afc:	440c      	add	r4, r1
1a003afe:	1911      	adds	r1, r2, r4
1a003b00:	4299      	cmp	r1, r3
1a003b02:	6014      	str	r4, [r2, #0]
1a003b04:	d1df      	bne.n	1a003ac6 <_free_r+0x26>
1a003b06:	cb0a      	ldmia	r3, {r1, r3}
1a003b08:	440c      	add	r4, r1
1a003b0a:	6053      	str	r3, [r2, #4]
1a003b0c:	6014      	str	r4, [r2, #0]
1a003b0e:	e7da      	b.n	1a003ac6 <_free_r+0x26>
1a003b10:	6814      	ldr	r4, [r2, #0]
1a003b12:	6852      	ldr	r2, [r2, #4]
1a003b14:	604a      	str	r2, [r1, #4]
1a003b16:	4420      	add	r0, r4
1a003b18:	6008      	str	r0, [r1, #0]
1a003b1a:	e7d3      	b.n	1a003ac4 <_free_r+0x24>
1a003b1c:	681c      	ldr	r4, [r3, #0]
1a003b1e:	685b      	ldr	r3, [r3, #4]
1a003b20:	604b      	str	r3, [r1, #4]
1a003b22:	4420      	add	r0, r4
1a003b24:	6008      	str	r0, [r1, #0]
1a003b26:	6051      	str	r1, [r2, #4]
1a003b28:	e7cd      	b.n	1a003ac6 <_free_r+0x26>
1a003b2a:	bf00      	nop
1a003b2c:	10002bc4 	.word	0x10002bc4

1a003b30 <_malloc_r>:
1a003b30:	b570      	push	{r4, r5, r6, lr}
1a003b32:	1ccc      	adds	r4, r1, #3
1a003b34:	f024 0403 	bic.w	r4, r4, #3
1a003b38:	3408      	adds	r4, #8
1a003b3a:	2c0c      	cmp	r4, #12
1a003b3c:	bf38      	it	cc
1a003b3e:	240c      	movcc	r4, #12
1a003b40:	2c00      	cmp	r4, #0
1a003b42:	4606      	mov	r6, r0
1a003b44:	db3b      	blt.n	1a003bbe <_malloc_r+0x8e>
1a003b46:	42a1      	cmp	r1, r4
1a003b48:	d839      	bhi.n	1a003bbe <_malloc_r+0x8e>
1a003b4a:	4d27      	ldr	r5, [pc, #156]	; (1a003be8 <_malloc_r+0xb8>)
1a003b4c:	6829      	ldr	r1, [r5, #0]
1a003b4e:	b151      	cbz	r1, 1a003b66 <_malloc_r+0x36>
1a003b50:	680a      	ldr	r2, [r1, #0]
1a003b52:	1b12      	subs	r2, r2, r4
1a003b54:	d404      	bmi.n	1a003b60 <_malloc_r+0x30>
1a003b56:	e036      	b.n	1a003bc6 <_malloc_r+0x96>
1a003b58:	681a      	ldr	r2, [r3, #0]
1a003b5a:	1b12      	subs	r2, r2, r4
1a003b5c:	d51a      	bpl.n	1a003b94 <_malloc_r+0x64>
1a003b5e:	4619      	mov	r1, r3
1a003b60:	684b      	ldr	r3, [r1, #4]
1a003b62:	2b00      	cmp	r3, #0
1a003b64:	d1f8      	bne.n	1a003b58 <_malloc_r+0x28>
1a003b66:	6869      	ldr	r1, [r5, #4]
1a003b68:	2900      	cmp	r1, #0
1a003b6a:	d037      	beq.n	1a003bdc <_malloc_r+0xac>
1a003b6c:	4621      	mov	r1, r4
1a003b6e:	4630      	mov	r0, r6
1a003b70:	f7fc fca8 	bl	1a0004c4 <_sbrk_r>
1a003b74:	1c43      	adds	r3, r0, #1
1a003b76:	d022      	beq.n	1a003bbe <_malloc_r+0x8e>
1a003b78:	1cc3      	adds	r3, r0, #3
1a003b7a:	f023 0503 	bic.w	r5, r3, #3
1a003b7e:	42a8      	cmp	r0, r5
1a003b80:	d005      	beq.n	1a003b8e <_malloc_r+0x5e>
1a003b82:	1a29      	subs	r1, r5, r0
1a003b84:	4630      	mov	r0, r6
1a003b86:	f7fc fc9d 	bl	1a0004c4 <_sbrk_r>
1a003b8a:	3001      	adds	r0, #1
1a003b8c:	d017      	beq.n	1a003bbe <_malloc_r+0x8e>
1a003b8e:	602c      	str	r4, [r5, #0]
1a003b90:	462b      	mov	r3, r5
1a003b92:	e004      	b.n	1a003b9e <_malloc_r+0x6e>
1a003b94:	2a0b      	cmp	r2, #11
1a003b96:	d90d      	bls.n	1a003bb4 <_malloc_r+0x84>
1a003b98:	601a      	str	r2, [r3, #0]
1a003b9a:	4413      	add	r3, r2
1a003b9c:	601c      	str	r4, [r3, #0]
1a003b9e:	f103 000b 	add.w	r0, r3, #11
1a003ba2:	f020 0007 	bic.w	r0, r0, #7
1a003ba6:	1d1a      	adds	r2, r3, #4
1a003ba8:	1a82      	subs	r2, r0, r2
1a003baa:	d002      	beq.n	1a003bb2 <_malloc_r+0x82>
1a003bac:	4251      	negs	r1, r2
1a003bae:	5099      	str	r1, [r3, r2]
1a003bb0:	bd70      	pop	{r4, r5, r6, pc}
1a003bb2:	bd70      	pop	{r4, r5, r6, pc}
1a003bb4:	428b      	cmp	r3, r1
1a003bb6:	d00e      	beq.n	1a003bd6 <_malloc_r+0xa6>
1a003bb8:	685a      	ldr	r2, [r3, #4]
1a003bba:	604a      	str	r2, [r1, #4]
1a003bbc:	e7ef      	b.n	1a003b9e <_malloc_r+0x6e>
1a003bbe:	230c      	movs	r3, #12
1a003bc0:	6033      	str	r3, [r6, #0]
1a003bc2:	2000      	movs	r0, #0
1a003bc4:	bd70      	pop	{r4, r5, r6, pc}
1a003bc6:	2a0b      	cmp	r2, #11
1a003bc8:	d803      	bhi.n	1a003bd2 <_malloc_r+0xa2>
1a003bca:	684a      	ldr	r2, [r1, #4]
1a003bcc:	460b      	mov	r3, r1
1a003bce:	602a      	str	r2, [r5, #0]
1a003bd0:	e7e5      	b.n	1a003b9e <_malloc_r+0x6e>
1a003bd2:	460b      	mov	r3, r1
1a003bd4:	e7e0      	b.n	1a003b98 <_malloc_r+0x68>
1a003bd6:	460a      	mov	r2, r1
1a003bd8:	460b      	mov	r3, r1
1a003bda:	e7f8      	b.n	1a003bce <_malloc_r+0x9e>
1a003bdc:	4630      	mov	r0, r6
1a003bde:	f7fc fc71 	bl	1a0004c4 <_sbrk_r>
1a003be2:	6068      	str	r0, [r5, #4]
1a003be4:	e7c2      	b.n	1a003b6c <_malloc_r+0x3c>
1a003be6:	bf00      	nop
1a003be8:	10002bc4 	.word	0x10002bc4

1a003bec <__sfputc_r>:
1a003bec:	6893      	ldr	r3, [r2, #8]
1a003bee:	3b01      	subs	r3, #1
1a003bf0:	2b00      	cmp	r3, #0
1a003bf2:	b410      	push	{r4}
1a003bf4:	6093      	str	r3, [r2, #8]
1a003bf6:	db08      	blt.n	1a003c0a <__sfputc_r+0x1e>
1a003bf8:	b2cc      	uxtb	r4, r1
1a003bfa:	6813      	ldr	r3, [r2, #0]
1a003bfc:	1c58      	adds	r0, r3, #1
1a003bfe:	6010      	str	r0, [r2, #0]
1a003c00:	7019      	strb	r1, [r3, #0]
1a003c02:	4620      	mov	r0, r4
1a003c04:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003c08:	4770      	bx	lr
1a003c0a:	6994      	ldr	r4, [r2, #24]
1a003c0c:	42a3      	cmp	r3, r4
1a003c0e:	db02      	blt.n	1a003c16 <__sfputc_r+0x2a>
1a003c10:	b2cc      	uxtb	r4, r1
1a003c12:	2c0a      	cmp	r4, #10
1a003c14:	d1f1      	bne.n	1a003bfa <__sfputc_r+0xe>
1a003c16:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003c1a:	f000 bc3b 	b.w	1a004494 <__swbuf_r>
1a003c1e:	bf00      	nop

1a003c20 <__sfputs_r>:
1a003c20:	b193      	cbz	r3, 1a003c48 <__sfputs_r+0x28>
1a003c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003c24:	4614      	mov	r4, r2
1a003c26:	460f      	mov	r7, r1
1a003c28:	4606      	mov	r6, r0
1a003c2a:	18d5      	adds	r5, r2, r3
1a003c2c:	e001      	b.n	1a003c32 <__sfputs_r+0x12>
1a003c2e:	42ac      	cmp	r4, r5
1a003c30:	d008      	beq.n	1a003c44 <__sfputs_r+0x24>
1a003c32:	463a      	mov	r2, r7
1a003c34:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003c38:	4630      	mov	r0, r6
1a003c3a:	f7ff ffd7 	bl	1a003bec <__sfputc_r>
1a003c3e:	1c43      	adds	r3, r0, #1
1a003c40:	d1f5      	bne.n	1a003c2e <__sfputs_r+0xe>
1a003c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c44:	2000      	movs	r0, #0
1a003c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c48:	2000      	movs	r0, #0
1a003c4a:	4770      	bx	lr

1a003c4c <__sprint_r>:
1a003c4c:	6893      	ldr	r3, [r2, #8]
1a003c4e:	b510      	push	{r4, lr}
1a003c50:	4614      	mov	r4, r2
1a003c52:	b913      	cbnz	r3, 1a003c5a <__sprint_r+0xe>
1a003c54:	6053      	str	r3, [r2, #4]
1a003c56:	4618      	mov	r0, r3
1a003c58:	bd10      	pop	{r4, pc}
1a003c5a:	f000 fcf7 	bl	1a00464c <__sfvwrite_r>
1a003c5e:	2300      	movs	r3, #0
1a003c60:	60a3      	str	r3, [r4, #8]
1a003c62:	6063      	str	r3, [r4, #4]
1a003c64:	bd10      	pop	{r4, pc}
1a003c66:	bf00      	nop

1a003c68 <_vfiprintf_r>:
1a003c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003c6c:	b09d      	sub	sp, #116	; 0x74
1a003c6e:	4689      	mov	r9, r1
1a003c70:	4614      	mov	r4, r2
1a003c72:	9303      	str	r3, [sp, #12]
1a003c74:	4682      	mov	sl, r0
1a003c76:	b118      	cbz	r0, 1a003c80 <_vfiprintf_r+0x18>
1a003c78:	6983      	ldr	r3, [r0, #24]
1a003c7a:	2b00      	cmp	r3, #0
1a003c7c:	f000 810a 	beq.w	1a003e94 <_vfiprintf_r+0x22c>
1a003c80:	4b8a      	ldr	r3, [pc, #552]	; (1a003eac <_vfiprintf_r+0x244>)
1a003c82:	4599      	cmp	r9, r3
1a003c84:	f000 810c 	beq.w	1a003ea0 <_vfiprintf_r+0x238>
1a003c88:	4b89      	ldr	r3, [pc, #548]	; (1a003eb0 <_vfiprintf_r+0x248>)
1a003c8a:	4599      	cmp	r9, r3
1a003c8c:	f000 810b 	beq.w	1a003ea6 <_vfiprintf_r+0x23e>
1a003c90:	4b88      	ldr	r3, [pc, #544]	; (1a003eb4 <_vfiprintf_r+0x24c>)
1a003c92:	4599      	cmp	r9, r3
1a003c94:	bf08      	it	eq
1a003c96:	f8da 900c 	ldreq.w	r9, [sl, #12]
1a003c9a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003c9e:	0718      	lsls	r0, r3, #28
1a003ca0:	f140 80ee 	bpl.w	1a003e80 <_vfiprintf_r+0x218>
1a003ca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
1a003ca8:	2b00      	cmp	r3, #0
1a003caa:	f000 80e9 	beq.w	1a003e80 <_vfiprintf_r+0x218>
1a003cae:	2330      	movs	r3, #48	; 0x30
1a003cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003cb4:	7823      	ldrb	r3, [r4, #0]
1a003cb6:	4e80      	ldr	r6, [pc, #512]	; (1a003eb8 <_vfiprintf_r+0x250>)
1a003cb8:	2100      	movs	r1, #0
1a003cba:	2220      	movs	r2, #32
1a003cbc:	9109      	str	r1, [sp, #36]	; 0x24
1a003cbe:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
1a003cc2:	2701      	movs	r7, #1
1a003cc4:	2b00      	cmp	r3, #0
1a003cc6:	f000 8084 	beq.w	1a003dd2 <_vfiprintf_r+0x16a>
1a003cca:	2b25      	cmp	r3, #37	; 0x25
1a003ccc:	4625      	mov	r5, r4
1a003cce:	d103      	bne.n	1a003cd8 <_vfiprintf_r+0x70>
1a003cd0:	e017      	b.n	1a003d02 <_vfiprintf_r+0x9a>
1a003cd2:	2b25      	cmp	r3, #37	; 0x25
1a003cd4:	f000 8085 	beq.w	1a003de2 <_vfiprintf_r+0x17a>
1a003cd8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
1a003cdc:	2b00      	cmp	r3, #0
1a003cde:	d1f8      	bne.n	1a003cd2 <_vfiprintf_r+0x6a>
1a003ce0:	ebb5 0b04 	subs.w	fp, r5, r4
1a003ce4:	d075      	beq.n	1a003dd2 <_vfiprintf_r+0x16a>
1a003ce6:	4622      	mov	r2, r4
1a003ce8:	465b      	mov	r3, fp
1a003cea:	4649      	mov	r1, r9
1a003cec:	4650      	mov	r0, sl
1a003cee:	f7ff ff97 	bl	1a003c20 <__sfputs_r>
1a003cf2:	3001      	adds	r0, #1
1a003cf4:	d06d      	beq.n	1a003dd2 <_vfiprintf_r+0x16a>
1a003cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003cf8:	782a      	ldrb	r2, [r5, #0]
1a003cfa:	445b      	add	r3, fp
1a003cfc:	9309      	str	r3, [sp, #36]	; 0x24
1a003cfe:	2a00      	cmp	r2, #0
1a003d00:	d067      	beq.n	1a003dd2 <_vfiprintf_r+0x16a>
1a003d02:	2300      	movs	r3, #0
1a003d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003d08:	3501      	adds	r5, #1
1a003d0a:	9304      	str	r3, [sp, #16]
1a003d0c:	9307      	str	r3, [sp, #28]
1a003d0e:	9306      	str	r3, [sp, #24]
1a003d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a003d14:	931a      	str	r3, [sp, #104]	; 0x68
1a003d16:	9205      	str	r2, [sp, #20]
1a003d18:	e004      	b.n	1a003d24 <_vfiprintf_r+0xbc>
1a003d1a:	9a04      	ldr	r2, [sp, #16]
1a003d1c:	fa07 f303 	lsl.w	r3, r7, r3
1a003d20:	4313      	orrs	r3, r2
1a003d22:	9304      	str	r3, [sp, #16]
1a003d24:	7829      	ldrb	r1, [r5, #0]
1a003d26:	2205      	movs	r2, #5
1a003d28:	4630      	mov	r0, r6
1a003d2a:	f000 fe79 	bl	1a004a20 <memchr>
1a003d2e:	462c      	mov	r4, r5
1a003d30:	1b83      	subs	r3, r0, r6
1a003d32:	3501      	adds	r5, #1
1a003d34:	2800      	cmp	r0, #0
1a003d36:	d1f0      	bne.n	1a003d1a <_vfiprintf_r+0xb2>
1a003d38:	9b04      	ldr	r3, [sp, #16]
1a003d3a:	06d9      	lsls	r1, r3, #27
1a003d3c:	bf44      	itt	mi
1a003d3e:	2220      	movmi	r2, #32
1a003d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003d44:	7821      	ldrb	r1, [r4, #0]
1a003d46:	071a      	lsls	r2, r3, #28
1a003d48:	bf44      	itt	mi
1a003d4a:	222b      	movmi	r2, #43	; 0x2b
1a003d4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003d50:	292a      	cmp	r1, #42	; 0x2a
1a003d52:	d069      	beq.n	1a003e28 <_vfiprintf_r+0x1c0>
1a003d54:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a003d58:	2a09      	cmp	r2, #9
1a003d5a:	d80b      	bhi.n	1a003d74 <_vfiprintf_r+0x10c>
1a003d5c:	9b07      	ldr	r3, [sp, #28]
1a003d5e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
1a003d62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003d66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a003d6a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a003d6e:	2a09      	cmp	r2, #9
1a003d70:	d9f5      	bls.n	1a003d5e <_vfiprintf_r+0xf6>
1a003d72:	9307      	str	r3, [sp, #28]
1a003d74:	292e      	cmp	r1, #46	; 0x2e
1a003d76:	d03f      	beq.n	1a003df8 <_vfiprintf_r+0x190>
1a003d78:	4d50      	ldr	r5, [pc, #320]	; (1a003ebc <_vfiprintf_r+0x254>)
1a003d7a:	2203      	movs	r2, #3
1a003d7c:	4628      	mov	r0, r5
1a003d7e:	f000 fe4f 	bl	1a004a20 <memchr>
1a003d82:	b138      	cbz	r0, 1a003d94 <_vfiprintf_r+0x12c>
1a003d84:	9b04      	ldr	r3, [sp, #16]
1a003d86:	1b40      	subs	r0, r0, r5
1a003d88:	2240      	movs	r2, #64	; 0x40
1a003d8a:	fa02 f000 	lsl.w	r0, r2, r0
1a003d8e:	4303      	orrs	r3, r0
1a003d90:	3401      	adds	r4, #1
1a003d92:	9304      	str	r3, [sp, #16]
1a003d94:	7821      	ldrb	r1, [r4, #0]
1a003d96:	484a      	ldr	r0, [pc, #296]	; (1a003ec0 <_vfiprintf_r+0x258>)
1a003d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a003d9c:	2206      	movs	r2, #6
1a003d9e:	3401      	adds	r4, #1
1a003da0:	f000 fe3e 	bl	1a004a20 <memchr>
1a003da4:	2800      	cmp	r0, #0
1a003da6:	d049      	beq.n	1a003e3c <_vfiprintf_r+0x1d4>
1a003da8:	4b46      	ldr	r3, [pc, #280]	; (1a003ec4 <_vfiprintf_r+0x25c>)
1a003daa:	b1f3      	cbz	r3, 1a003dea <_vfiprintf_r+0x182>
1a003dac:	ab03      	add	r3, sp, #12
1a003dae:	9300      	str	r3, [sp, #0]
1a003db0:	464a      	mov	r2, r9
1a003db2:	4b45      	ldr	r3, [pc, #276]	; (1a003ec8 <_vfiprintf_r+0x260>)
1a003db4:	a904      	add	r1, sp, #16
1a003db6:	4650      	mov	r0, sl
1a003db8:	f3af 8000 	nop.w
1a003dbc:	4680      	mov	r8, r0
1a003dbe:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
1a003dc2:	d006      	beq.n	1a003dd2 <_vfiprintf_r+0x16a>
1a003dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003dc6:	4443      	add	r3, r8
1a003dc8:	9309      	str	r3, [sp, #36]	; 0x24
1a003dca:	7823      	ldrb	r3, [r4, #0]
1a003dcc:	2b00      	cmp	r3, #0
1a003dce:	f47f af7c 	bne.w	1a003cca <_vfiprintf_r+0x62>
1a003dd2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003dd6:	065b      	lsls	r3, r3, #25
1a003dd8:	d459      	bmi.n	1a003e8e <_vfiprintf_r+0x226>
1a003dda:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003ddc:	b01d      	add	sp, #116	; 0x74
1a003dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003de2:	ebb5 0b04 	subs.w	fp, r5, r4
1a003de6:	d08c      	beq.n	1a003d02 <_vfiprintf_r+0x9a>
1a003de8:	e77d      	b.n	1a003ce6 <_vfiprintf_r+0x7e>
1a003dea:	9b03      	ldr	r3, [sp, #12]
1a003dec:	3307      	adds	r3, #7
1a003dee:	f023 0307 	bic.w	r3, r3, #7
1a003df2:	3308      	adds	r3, #8
1a003df4:	9303      	str	r3, [sp, #12]
1a003df6:	e7e5      	b.n	1a003dc4 <_vfiprintf_r+0x15c>
1a003df8:	7861      	ldrb	r1, [r4, #1]
1a003dfa:	292a      	cmp	r1, #42	; 0x2a
1a003dfc:	f104 0001 	add.w	r0, r4, #1
1a003e00:	d026      	beq.n	1a003e50 <_vfiprintf_r+0x1e8>
1a003e02:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a003e06:	2300      	movs	r3, #0
1a003e08:	2a09      	cmp	r2, #9
1a003e0a:	9305      	str	r3, [sp, #20]
1a003e0c:	4604      	mov	r4, r0
1a003e0e:	d8b3      	bhi.n	1a003d78 <_vfiprintf_r+0x110>
1a003e10:	f814 1f01 	ldrb.w	r1, [r4, #1]!
1a003e14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003e18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a003e1c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a003e20:	2a09      	cmp	r2, #9
1a003e22:	d9f5      	bls.n	1a003e10 <_vfiprintf_r+0x1a8>
1a003e24:	9305      	str	r3, [sp, #20]
1a003e26:	e7a7      	b.n	1a003d78 <_vfiprintf_r+0x110>
1a003e28:	9a03      	ldr	r2, [sp, #12]
1a003e2a:	6811      	ldr	r1, [r2, #0]
1a003e2c:	3204      	adds	r2, #4
1a003e2e:	2900      	cmp	r1, #0
1a003e30:	9203      	str	r2, [sp, #12]
1a003e32:	db1f      	blt.n	1a003e74 <_vfiprintf_r+0x20c>
1a003e34:	9107      	str	r1, [sp, #28]
1a003e36:	7861      	ldrb	r1, [r4, #1]
1a003e38:	3401      	adds	r4, #1
1a003e3a:	e79b      	b.n	1a003d74 <_vfiprintf_r+0x10c>
1a003e3c:	ab03      	add	r3, sp, #12
1a003e3e:	9300      	str	r3, [sp, #0]
1a003e40:	464a      	mov	r2, r9
1a003e42:	4b21      	ldr	r3, [pc, #132]	; (1a003ec8 <_vfiprintf_r+0x260>)
1a003e44:	a904      	add	r1, sp, #16
1a003e46:	4650      	mov	r0, sl
1a003e48:	f000 f8e6 	bl	1a004018 <_printf_i>
1a003e4c:	4680      	mov	r8, r0
1a003e4e:	e7b6      	b.n	1a003dbe <_vfiprintf_r+0x156>
1a003e50:	9b03      	ldr	r3, [sp, #12]
1a003e52:	681a      	ldr	r2, [r3, #0]
1a003e54:	9205      	str	r2, [sp, #20]
1a003e56:	2a00      	cmp	r2, #0
1a003e58:	f103 0304 	add.w	r3, r3, #4
1a003e5c:	9303      	str	r3, [sp, #12]
1a003e5e:	bfb8      	it	lt
1a003e60:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
1a003e64:	f104 0302 	add.w	r3, r4, #2
1a003e68:	bfae      	itee	ge
1a003e6a:	78a1      	ldrbge	r1, [r4, #2]
1a003e6c:	78a1      	ldrblt	r1, [r4, #2]
1a003e6e:	9205      	strlt	r2, [sp, #20]
1a003e70:	461c      	mov	r4, r3
1a003e72:	e781      	b.n	1a003d78 <_vfiprintf_r+0x110>
1a003e74:	4249      	negs	r1, r1
1a003e76:	f043 0302 	orr.w	r3, r3, #2
1a003e7a:	9107      	str	r1, [sp, #28]
1a003e7c:	9304      	str	r3, [sp, #16]
1a003e7e:	e7da      	b.n	1a003e36 <_vfiprintf_r+0x1ce>
1a003e80:	4649      	mov	r1, r9
1a003e82:	4650      	mov	r0, sl
1a003e84:	f000 fb68 	bl	1a004558 <__swsetup_r>
1a003e88:	2800      	cmp	r0, #0
1a003e8a:	f43f af10 	beq.w	1a003cae <_vfiprintf_r+0x46>
1a003e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003e92:	e7a3      	b.n	1a003ddc <_vfiprintf_r+0x174>
1a003e94:	f7ff fc84 	bl	1a0037a0 <__sinit>
1a003e98:	4b04      	ldr	r3, [pc, #16]	; (1a003eac <_vfiprintf_r+0x244>)
1a003e9a:	4599      	cmp	r9, r3
1a003e9c:	f47f aef4 	bne.w	1a003c88 <_vfiprintf_r+0x20>
1a003ea0:	f8da 9004 	ldr.w	r9, [sl, #4]
1a003ea4:	e6f9      	b.n	1a003c9a <_vfiprintf_r+0x32>
1a003ea6:	f8da 9008 	ldr.w	r9, [sl, #8]
1a003eaa:	e6f6      	b.n	1a003c9a <_vfiprintf_r+0x32>
1a003eac:	1a004f98 	.word	0x1a004f98
1a003eb0:	1a004f78 	.word	0x1a004f78
1a003eb4:	1a004f58 	.word	0x1a004f58
1a003eb8:	1a004fc0 	.word	0x1a004fc0
1a003ebc:	1a004fc8 	.word	0x1a004fc8
1a003ec0:	1a004fcc 	.word	0x1a004fcc
1a003ec4:	00000000 	.word	0x00000000
1a003ec8:	1a003c21 	.word	0x1a003c21

1a003ecc <vfiprintf>:
1a003ecc:	b410      	push	{r4}
1a003ece:	4c04      	ldr	r4, [pc, #16]	; (1a003ee0 <vfiprintf+0x14>)
1a003ed0:	4613      	mov	r3, r2
1a003ed2:	460a      	mov	r2, r1
1a003ed4:	4601      	mov	r1, r0
1a003ed6:	6820      	ldr	r0, [r4, #0]
1a003ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003edc:	f7ff bec4 	b.w	1a003c68 <_vfiprintf_r>
1a003ee0:	10000040 	.word	0x10000040

1a003ee4 <_printf_common>:
1a003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003ee8:	460c      	mov	r4, r1
1a003eea:	4691      	mov	r9, r2
1a003eec:	690a      	ldr	r2, [r1, #16]
1a003eee:	6889      	ldr	r1, [r1, #8]
1a003ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a003ef4:	428a      	cmp	r2, r1
1a003ef6:	bfb8      	it	lt
1a003ef8:	460a      	movlt	r2, r1
1a003efa:	f8c9 2000 	str.w	r2, [r9]
1a003efe:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
1a003f02:	4606      	mov	r6, r0
1a003f04:	461f      	mov	r7, r3
1a003f06:	b111      	cbz	r1, 1a003f0e <_printf_common+0x2a>
1a003f08:	3201      	adds	r2, #1
1a003f0a:	f8c9 2000 	str.w	r2, [r9]
1a003f0e:	6823      	ldr	r3, [r4, #0]
1a003f10:	0699      	lsls	r1, r3, #26
1a003f12:	d55d      	bpl.n	1a003fd0 <_printf_common+0xec>
1a003f14:	f8d9 2000 	ldr.w	r2, [r9]
1a003f18:	3202      	adds	r2, #2
1a003f1a:	f8c9 2000 	str.w	r2, [r9]
1a003f1e:	6823      	ldr	r3, [r4, #0]
1a003f20:	f013 0f06 	tst.w	r3, #6
1a003f24:	4619      	mov	r1, r3
1a003f26:	d11d      	bne.n	1a003f64 <_printf_common+0x80>
1a003f28:	68e1      	ldr	r1, [r4, #12]
1a003f2a:	1a8a      	subs	r2, r1, r2
1a003f2c:	2a00      	cmp	r2, #0
1a003f2e:	bfd8      	it	le
1a003f30:	4619      	movle	r1, r3
1a003f32:	dd17      	ble.n	1a003f64 <_printf_common+0x80>
1a003f34:	f104 0a19 	add.w	sl, r4, #25
1a003f38:	2500      	movs	r5, #0
1a003f3a:	e005      	b.n	1a003f48 <_printf_common+0x64>
1a003f3c:	68e3      	ldr	r3, [r4, #12]
1a003f3e:	f8d9 2000 	ldr.w	r2, [r9]
1a003f42:	1a9b      	subs	r3, r3, r2
1a003f44:	42ab      	cmp	r3, r5
1a003f46:	dd0c      	ble.n	1a003f62 <_printf_common+0x7e>
1a003f48:	2301      	movs	r3, #1
1a003f4a:	4652      	mov	r2, sl
1a003f4c:	4639      	mov	r1, r7
1a003f4e:	4630      	mov	r0, r6
1a003f50:	47c0      	blx	r8
1a003f52:	3001      	adds	r0, #1
1a003f54:	f105 0501 	add.w	r5, r5, #1
1a003f58:	d1f0      	bne.n	1a003f3c <_printf_common+0x58>
1a003f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003f62:	6821      	ldr	r1, [r4, #0]
1a003f64:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a003f68:	3300      	adds	r3, #0
1a003f6a:	bf18      	it	ne
1a003f6c:	2301      	movne	r3, #1
1a003f6e:	068a      	lsls	r2, r1, #26
1a003f70:	d50a      	bpl.n	1a003f88 <_printf_common+0xa4>
1a003f72:	18e1      	adds	r1, r4, r3
1a003f74:	1c5a      	adds	r2, r3, #1
1a003f76:	2030      	movs	r0, #48	; 0x30
1a003f78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a003f7c:	4422      	add	r2, r4
1a003f7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a003f82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a003f86:	3302      	adds	r3, #2
1a003f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a003f8c:	4639      	mov	r1, r7
1a003f8e:	4630      	mov	r0, r6
1a003f90:	47c0      	blx	r8
1a003f92:	3001      	adds	r0, #1
1a003f94:	d0e1      	beq.n	1a003f5a <_printf_common+0x76>
1a003f96:	6823      	ldr	r3, [r4, #0]
1a003f98:	f003 0306 	and.w	r3, r3, #6
1a003f9c:	2b04      	cmp	r3, #4
1a003f9e:	d029      	beq.n	1a003ff4 <_printf_common+0x110>
1a003fa0:	68a3      	ldr	r3, [r4, #8]
1a003fa2:	6922      	ldr	r2, [r4, #16]
1a003fa4:	4293      	cmp	r3, r2
1a003fa6:	bfc8      	it	gt
1a003fa8:	f04f 0900 	movgt.w	r9, #0
1a003fac:	dd30      	ble.n	1a004010 <_printf_common+0x12c>
1a003fae:	1a9b      	subs	r3, r3, r2
1a003fb0:	4499      	add	r9, r3
1a003fb2:	341a      	adds	r4, #26
1a003fb4:	2500      	movs	r5, #0
1a003fb6:	e001      	b.n	1a003fbc <_printf_common+0xd8>
1a003fb8:	454d      	cmp	r5, r9
1a003fba:	d029      	beq.n	1a004010 <_printf_common+0x12c>
1a003fbc:	2301      	movs	r3, #1
1a003fbe:	4622      	mov	r2, r4
1a003fc0:	4639      	mov	r1, r7
1a003fc2:	4630      	mov	r0, r6
1a003fc4:	47c0      	blx	r8
1a003fc6:	3001      	adds	r0, #1
1a003fc8:	f105 0501 	add.w	r5, r5, #1
1a003fcc:	d1f4      	bne.n	1a003fb8 <_printf_common+0xd4>
1a003fce:	e7c4      	b.n	1a003f5a <_printf_common+0x76>
1a003fd0:	f013 0f06 	tst.w	r3, #6
1a003fd4:	d108      	bne.n	1a003fe8 <_printf_common+0x104>
1a003fd6:	68e1      	ldr	r1, [r4, #12]
1a003fd8:	f8d9 2000 	ldr.w	r2, [r9]
1a003fdc:	1a8a      	subs	r2, r1, r2
1a003fde:	2a00      	cmp	r2, #0
1a003fe0:	bfd8      	it	le
1a003fe2:	4619      	movle	r1, r3
1a003fe4:	dca6      	bgt.n	1a003f34 <_printf_common+0x50>
1a003fe6:	e7bd      	b.n	1a003f64 <_printf_common+0x80>
1a003fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a003fec:	3300      	adds	r3, #0
1a003fee:	bf18      	it	ne
1a003ff0:	2301      	movne	r3, #1
1a003ff2:	e7c9      	b.n	1a003f88 <_printf_common+0xa4>
1a003ff4:	f8d9 1000 	ldr.w	r1, [r9]
1a003ff8:	68e0      	ldr	r0, [r4, #12]
1a003ffa:	68a3      	ldr	r3, [r4, #8]
1a003ffc:	6922      	ldr	r2, [r4, #16]
1a003ffe:	eba0 0901 	sub.w	r9, r0, r1
1a004002:	4293      	cmp	r3, r2
1a004004:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1a004008:	dcd1      	bgt.n	1a003fae <_printf_common+0xca>
1a00400a:	f1b9 0f00 	cmp.w	r9, #0
1a00400e:	d1d0      	bne.n	1a003fb2 <_printf_common+0xce>
1a004010:	2000      	movs	r0, #0
1a004012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004016:	bf00      	nop

1a004018 <_printf_i>:
1a004018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00401c:	460c      	mov	r4, r1
1a00401e:	7e09      	ldrb	r1, [r1, #24]
1a004020:	b085      	sub	sp, #20
1a004022:	296e      	cmp	r1, #110	; 0x6e
1a004024:	4606      	mov	r6, r0
1a004026:	4617      	mov	r7, r2
1a004028:	980c      	ldr	r0, [sp, #48]	; 0x30
1a00402a:	4698      	mov	r8, r3
1a00402c:	f104 0c43 	add.w	ip, r4, #67	; 0x43
1a004030:	d055      	beq.n	1a0040de <_printf_i+0xc6>
1a004032:	d80f      	bhi.n	1a004054 <_printf_i+0x3c>
1a004034:	2963      	cmp	r1, #99	; 0x63
1a004036:	f000 811b 	beq.w	1a004270 <_printf_i+0x258>
1a00403a:	f200 80d6 	bhi.w	1a0041ea <_printf_i+0x1d2>
1a00403e:	2900      	cmp	r1, #0
1a004040:	d05c      	beq.n	1a0040fc <_printf_i+0xe4>
1a004042:	2958      	cmp	r1, #88	; 0x58
1a004044:	f040 80e8 	bne.w	1a004218 <_printf_i+0x200>
1a004048:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a00404c:	6822      	ldr	r2, [r4, #0]
1a00404e:	f8df e260 	ldr.w	lr, [pc, #608]	; 1a0042b0 <_printf_i+0x298>
1a004052:	e013      	b.n	1a00407c <_printf_i+0x64>
1a004054:	2973      	cmp	r1, #115	; 0x73
1a004056:	f000 80fd 	beq.w	1a004254 <_printf_i+0x23c>
1a00405a:	f200 8089 	bhi.w	1a004170 <_printf_i+0x158>
1a00405e:	296f      	cmp	r1, #111	; 0x6f
1a004060:	f000 80e4 	beq.w	1a00422c <_printf_i+0x214>
1a004064:	2970      	cmp	r1, #112	; 0x70
1a004066:	f040 80d7 	bne.w	1a004218 <_printf_i+0x200>
1a00406a:	6822      	ldr	r2, [r4, #0]
1a00406c:	f042 0220 	orr.w	r2, r2, #32
1a004070:	6022      	str	r2, [r4, #0]
1a004072:	2378      	movs	r3, #120	; 0x78
1a004074:	f8df e23c 	ldr.w	lr, [pc, #572]	; 1a0042b4 <_printf_i+0x29c>
1a004078:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00407c:	6803      	ldr	r3, [r0, #0]
1a00407e:	0615      	lsls	r5, r2, #24
1a004080:	f103 0104 	add.w	r1, r3, #4
1a004084:	f100 80ff 	bmi.w	1a004286 <_printf_i+0x26e>
1a004088:	0655      	lsls	r5, r2, #25
1a00408a:	bf4b      	itete	mi
1a00408c:	881b      	ldrhmi	r3, [r3, #0]
1a00408e:	681b      	ldrpl	r3, [r3, #0]
1a004090:	6001      	strmi	r1, [r0, #0]
1a004092:	6001      	strpl	r1, [r0, #0]
1a004094:	07d0      	lsls	r0, r2, #31
1a004096:	bf44      	itt	mi
1a004098:	f042 0220 	orrmi.w	r2, r2, #32
1a00409c:	6022      	strmi	r2, [r4, #0]
1a00409e:	2b00      	cmp	r3, #0
1a0040a0:	f040 8095 	bne.w	1a0041ce <_printf_i+0x1b6>
1a0040a4:	6822      	ldr	r2, [r4, #0]
1a0040a6:	f022 0220 	bic.w	r2, r2, #32
1a0040aa:	6022      	str	r2, [r4, #0]
1a0040ac:	2110      	movs	r1, #16
1a0040ae:	2200      	movs	r2, #0
1a0040b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0040b4:	6860      	ldr	r0, [r4, #4]
1a0040b6:	60a0      	str	r0, [r4, #8]
1a0040b8:	2800      	cmp	r0, #0
1a0040ba:	f2c0 808d 	blt.w	1a0041d8 <_printf_i+0x1c0>
1a0040be:	6822      	ldr	r2, [r4, #0]
1a0040c0:	f022 0204 	bic.w	r2, r2, #4
1a0040c4:	6022      	str	r2, [r4, #0]
1a0040c6:	2b00      	cmp	r3, #0
1a0040c8:	d167      	bne.n	1a00419a <_printf_i+0x182>
1a0040ca:	2800      	cmp	r0, #0
1a0040cc:	f040 8086 	bne.w	1a0041dc <_printf_i+0x1c4>
1a0040d0:	4665      	mov	r5, ip
1a0040d2:	2908      	cmp	r1, #8
1a0040d4:	d06f      	beq.n	1a0041b6 <_printf_i+0x19e>
1a0040d6:	ebac 0305 	sub.w	r3, ip, r5
1a0040da:	6123      	str	r3, [r4, #16]
1a0040dc:	e011      	b.n	1a004102 <_printf_i+0xea>
1a0040de:	6823      	ldr	r3, [r4, #0]
1a0040e0:	061a      	lsls	r2, r3, #24
1a0040e2:	f100 80d3 	bmi.w	1a00428c <_printf_i+0x274>
1a0040e6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0040ea:	6803      	ldr	r3, [r0, #0]
1a0040ec:	6962      	ldr	r2, [r4, #20]
1a0040ee:	f103 0104 	add.w	r1, r3, #4
1a0040f2:	6001      	str	r1, [r0, #0]
1a0040f4:	681b      	ldr	r3, [r3, #0]
1a0040f6:	bf14      	ite	ne
1a0040f8:	801a      	strhne	r2, [r3, #0]
1a0040fa:	601a      	streq	r2, [r3, #0]
1a0040fc:	2300      	movs	r3, #0
1a0040fe:	4665      	mov	r5, ip
1a004100:	6123      	str	r3, [r4, #16]
1a004102:	f8cd 8000 	str.w	r8, [sp]
1a004106:	463b      	mov	r3, r7
1a004108:	aa03      	add	r2, sp, #12
1a00410a:	4621      	mov	r1, r4
1a00410c:	4630      	mov	r0, r6
1a00410e:	f7ff fee9 	bl	1a003ee4 <_printf_common>
1a004112:	3001      	adds	r0, #1
1a004114:	d021      	beq.n	1a00415a <_printf_i+0x142>
1a004116:	462a      	mov	r2, r5
1a004118:	6923      	ldr	r3, [r4, #16]
1a00411a:	4639      	mov	r1, r7
1a00411c:	4630      	mov	r0, r6
1a00411e:	47c0      	blx	r8
1a004120:	3001      	adds	r0, #1
1a004122:	d01a      	beq.n	1a00415a <_printf_i+0x142>
1a004124:	6823      	ldr	r3, [r4, #0]
1a004126:	68e0      	ldr	r0, [r4, #12]
1a004128:	f013 0f02 	tst.w	r3, #2
1a00412c:	9b03      	ldr	r3, [sp, #12]
1a00412e:	d019      	beq.n	1a004164 <_printf_i+0x14c>
1a004130:	1ac2      	subs	r2, r0, r3
1a004132:	2a00      	cmp	r2, #0
1a004134:	dd16      	ble.n	1a004164 <_printf_i+0x14c>
1a004136:	f104 0919 	add.w	r9, r4, #25
1a00413a:	2500      	movs	r5, #0
1a00413c:	e004      	b.n	1a004148 <_printf_i+0x130>
1a00413e:	68e0      	ldr	r0, [r4, #12]
1a004140:	9b03      	ldr	r3, [sp, #12]
1a004142:	1ac2      	subs	r2, r0, r3
1a004144:	42aa      	cmp	r2, r5
1a004146:	dd0d      	ble.n	1a004164 <_printf_i+0x14c>
1a004148:	2301      	movs	r3, #1
1a00414a:	464a      	mov	r2, r9
1a00414c:	4639      	mov	r1, r7
1a00414e:	4630      	mov	r0, r6
1a004150:	47c0      	blx	r8
1a004152:	3001      	adds	r0, #1
1a004154:	f105 0501 	add.w	r5, r5, #1
1a004158:	d1f1      	bne.n	1a00413e <_printf_i+0x126>
1a00415a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00415e:	b005      	add	sp, #20
1a004160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004164:	4298      	cmp	r0, r3
1a004166:	bfb8      	it	lt
1a004168:	4618      	movlt	r0, r3
1a00416a:	b005      	add	sp, #20
1a00416c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004170:	2975      	cmp	r1, #117	; 0x75
1a004172:	d05b      	beq.n	1a00422c <_printf_i+0x214>
1a004174:	2978      	cmp	r1, #120	; 0x78
1a004176:	d14f      	bne.n	1a004218 <_printf_i+0x200>
1a004178:	6822      	ldr	r2, [r4, #0]
1a00417a:	e77a      	b.n	1a004072 <_printf_i+0x5a>
1a00417c:	6861      	ldr	r1, [r4, #4]
1a00417e:	60a1      	str	r1, [r4, #8]
1a004180:	202d      	movs	r0, #45	; 0x2d
1a004182:	2900      	cmp	r1, #0
1a004184:	f1c3 0300 	rsb	r3, r3, #0
1a004188:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
1a00418c:	db21      	blt.n	1a0041d2 <_printf_i+0x1ba>
1a00418e:	f022 0204 	bic.w	r2, r2, #4
1a004192:	f8df e11c 	ldr.w	lr, [pc, #284]	; 1a0042b0 <_printf_i+0x298>
1a004196:	6022      	str	r2, [r4, #0]
1a004198:	210a      	movs	r1, #10
1a00419a:	4665      	mov	r5, ip
1a00419c:	fbb3 f2f1 	udiv	r2, r3, r1
1a0041a0:	fb01 3012 	mls	r0, r1, r2, r3
1a0041a4:	4613      	mov	r3, r2
1a0041a6:	f81e 2000 	ldrb.w	r2, [lr, r0]
1a0041aa:	f805 2d01 	strb.w	r2, [r5, #-1]!
1a0041ae:	2b00      	cmp	r3, #0
1a0041b0:	d1f4      	bne.n	1a00419c <_printf_i+0x184>
1a0041b2:	2908      	cmp	r1, #8
1a0041b4:	d18f      	bne.n	1a0040d6 <_printf_i+0xbe>
1a0041b6:	6823      	ldr	r3, [r4, #0]
1a0041b8:	07d9      	lsls	r1, r3, #31
1a0041ba:	d58c      	bpl.n	1a0040d6 <_printf_i+0xbe>
1a0041bc:	6862      	ldr	r2, [r4, #4]
1a0041be:	6923      	ldr	r3, [r4, #16]
1a0041c0:	429a      	cmp	r2, r3
1a0041c2:	dc88      	bgt.n	1a0040d6 <_printf_i+0xbe>
1a0041c4:	2330      	movs	r3, #48	; 0x30
1a0041c6:	f805 3c01 	strb.w	r3, [r5, #-1]
1a0041ca:	3d01      	subs	r5, #1
1a0041cc:	e783      	b.n	1a0040d6 <_printf_i+0xbe>
1a0041ce:	2110      	movs	r1, #16
1a0041d0:	e76d      	b.n	1a0040ae <_printf_i+0x96>
1a0041d2:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 1a0042b0 <_printf_i+0x298>
1a0041d6:	210a      	movs	r1, #10
1a0041d8:	2b00      	cmp	r3, #0
1a0041da:	d1de      	bne.n	1a00419a <_printf_i+0x182>
1a0041dc:	f89e 3000 	ldrb.w	r3, [lr]
1a0041e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0041e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0041e8:	e773      	b.n	1a0040d2 <_printf_i+0xba>
1a0041ea:	2964      	cmp	r1, #100	; 0x64
1a0041ec:	d001      	beq.n	1a0041f2 <_printf_i+0x1da>
1a0041ee:	2969      	cmp	r1, #105	; 0x69
1a0041f0:	d112      	bne.n	1a004218 <_printf_i+0x200>
1a0041f2:	6822      	ldr	r2, [r4, #0]
1a0041f4:	6803      	ldr	r3, [r0, #0]
1a0041f6:	0615      	lsls	r5, r2, #24
1a0041f8:	f103 0104 	add.w	r1, r3, #4
1a0041fc:	d452      	bmi.n	1a0042a4 <_printf_i+0x28c>
1a0041fe:	0655      	lsls	r5, r2, #25
1a004200:	bf4b      	itete	mi
1a004202:	f9b3 3000 	ldrshmi.w	r3, [r3]
1a004206:	681b      	ldrpl	r3, [r3, #0]
1a004208:	6001      	strmi	r1, [r0, #0]
1a00420a:	6001      	strpl	r1, [r0, #0]
1a00420c:	2b00      	cmp	r3, #0
1a00420e:	dbb5      	blt.n	1a00417c <_printf_i+0x164>
1a004210:	f8df e09c 	ldr.w	lr, [pc, #156]	; 1a0042b0 <_printf_i+0x298>
1a004214:	210a      	movs	r1, #10
1a004216:	e74d      	b.n	1a0040b4 <_printf_i+0x9c>
1a004218:	2301      	movs	r3, #1
1a00421a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a00421e:	6123      	str	r3, [r4, #16]
1a004220:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004224:	2300      	movs	r3, #0
1a004226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00422a:	e76a      	b.n	1a004102 <_printf_i+0xea>
1a00422c:	6823      	ldr	r3, [r4, #0]
1a00422e:	061a      	lsls	r2, r3, #24
1a004230:	d433      	bmi.n	1a00429a <_printf_i+0x282>
1a004232:	f013 0f40 	tst.w	r3, #64	; 0x40
1a004236:	6803      	ldr	r3, [r0, #0]
1a004238:	f103 0204 	add.w	r2, r3, #4
1a00423c:	bf15      	itete	ne
1a00423e:	881b      	ldrhne	r3, [r3, #0]
1a004240:	681b      	ldreq	r3, [r3, #0]
1a004242:	6002      	strne	r2, [r0, #0]
1a004244:	6002      	streq	r2, [r0, #0]
1a004246:	296f      	cmp	r1, #111	; 0x6f
1a004248:	bf14      	ite	ne
1a00424a:	210a      	movne	r1, #10
1a00424c:	2108      	moveq	r1, #8
1a00424e:	f8df e060 	ldr.w	lr, [pc, #96]	; 1a0042b0 <_printf_i+0x298>
1a004252:	e72c      	b.n	1a0040ae <_printf_i+0x96>
1a004254:	6803      	ldr	r3, [r0, #0]
1a004256:	6862      	ldr	r2, [r4, #4]
1a004258:	1d19      	adds	r1, r3, #4
1a00425a:	6001      	str	r1, [r0, #0]
1a00425c:	681d      	ldr	r5, [r3, #0]
1a00425e:	2100      	movs	r1, #0
1a004260:	4628      	mov	r0, r5
1a004262:	f000 fbdd 	bl	1a004a20 <memchr>
1a004266:	b300      	cbz	r0, 1a0042aa <_printf_i+0x292>
1a004268:	1b40      	subs	r0, r0, r5
1a00426a:	6060      	str	r0, [r4, #4]
1a00426c:	6120      	str	r0, [r4, #16]
1a00426e:	e7d9      	b.n	1a004224 <_printf_i+0x20c>
1a004270:	6803      	ldr	r3, [r0, #0]
1a004272:	681a      	ldr	r2, [r3, #0]
1a004274:	1d19      	adds	r1, r3, #4
1a004276:	2301      	movs	r3, #1
1a004278:	6001      	str	r1, [r0, #0]
1a00427a:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00427e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
1a004282:	6123      	str	r3, [r4, #16]
1a004284:	e7ce      	b.n	1a004224 <_printf_i+0x20c>
1a004286:	6001      	str	r1, [r0, #0]
1a004288:	681b      	ldr	r3, [r3, #0]
1a00428a:	e703      	b.n	1a004094 <_printf_i+0x7c>
1a00428c:	6803      	ldr	r3, [r0, #0]
1a00428e:	6962      	ldr	r2, [r4, #20]
1a004290:	1d19      	adds	r1, r3, #4
1a004292:	6001      	str	r1, [r0, #0]
1a004294:	681b      	ldr	r3, [r3, #0]
1a004296:	601a      	str	r2, [r3, #0]
1a004298:	e730      	b.n	1a0040fc <_printf_i+0xe4>
1a00429a:	6803      	ldr	r3, [r0, #0]
1a00429c:	1d1a      	adds	r2, r3, #4
1a00429e:	6002      	str	r2, [r0, #0]
1a0042a0:	681b      	ldr	r3, [r3, #0]
1a0042a2:	e7d0      	b.n	1a004246 <_printf_i+0x22e>
1a0042a4:	6001      	str	r1, [r0, #0]
1a0042a6:	681b      	ldr	r3, [r3, #0]
1a0042a8:	e7b0      	b.n	1a00420c <_printf_i+0x1f4>
1a0042aa:	6860      	ldr	r0, [r4, #4]
1a0042ac:	e7de      	b.n	1a00426c <_printf_i+0x254>
1a0042ae:	bf00      	nop
1a0042b0:	1a004fd4 	.word	0x1a004fd4
1a0042b4:	1a004fe8 	.word	0x1a004fe8

1a0042b8 <_iprintf_r>:
1a0042b8:	b40e      	push	{r1, r2, r3}
1a0042ba:	b510      	push	{r4, lr}
1a0042bc:	4604      	mov	r4, r0
1a0042be:	b083      	sub	sp, #12
1a0042c0:	b118      	cbz	r0, 1a0042ca <_iprintf_r+0x12>
1a0042c2:	6983      	ldr	r3, [r0, #24]
1a0042c4:	b90b      	cbnz	r3, 1a0042ca <_iprintf_r+0x12>
1a0042c6:	f7ff fa6b 	bl	1a0037a0 <__sinit>
1a0042ca:	a806      	add	r0, sp, #24
1a0042cc:	4603      	mov	r3, r0
1a0042ce:	9001      	str	r0, [sp, #4]
1a0042d0:	9a05      	ldr	r2, [sp, #20]
1a0042d2:	68a1      	ldr	r1, [r4, #8]
1a0042d4:	4620      	mov	r0, r4
1a0042d6:	f7ff fcc7 	bl	1a003c68 <_vfiprintf_r>
1a0042da:	b003      	add	sp, #12
1a0042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0042e0:	b003      	add	sp, #12
1a0042e2:	4770      	bx	lr

1a0042e4 <iprintf>:
1a0042e4:	b40f      	push	{r0, r1, r2, r3}
1a0042e6:	b510      	push	{r4, lr}
1a0042e8:	4b0a      	ldr	r3, [pc, #40]	; (1a004314 <iprintf+0x30>)
1a0042ea:	681c      	ldr	r4, [r3, #0]
1a0042ec:	b082      	sub	sp, #8
1a0042ee:	b124      	cbz	r4, 1a0042fa <iprintf+0x16>
1a0042f0:	69a3      	ldr	r3, [r4, #24]
1a0042f2:	b913      	cbnz	r3, 1a0042fa <iprintf+0x16>
1a0042f4:	4620      	mov	r0, r4
1a0042f6:	f7ff fa53 	bl	1a0037a0 <__sinit>
1a0042fa:	a805      	add	r0, sp, #20
1a0042fc:	4603      	mov	r3, r0
1a0042fe:	9001      	str	r0, [sp, #4]
1a004300:	9a04      	ldr	r2, [sp, #16]
1a004302:	68a1      	ldr	r1, [r4, #8]
1a004304:	4620      	mov	r0, r4
1a004306:	f7ff fcaf 	bl	1a003c68 <_vfiprintf_r>
1a00430a:	b002      	add	sp, #8
1a00430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004310:	b004      	add	sp, #16
1a004312:	4770      	bx	lr
1a004314:	10000040 	.word	0x10000040

1a004318 <_puts_r>:
1a004318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00431c:	460e      	mov	r6, r1
1a00431e:	4680      	mov	r8, r0
1a004320:	2800      	cmp	r0, #0
1a004322:	d03e      	beq.n	1a0043a2 <_puts_r+0x8a>
1a004324:	6983      	ldr	r3, [r0, #24]
1a004326:	2b00      	cmp	r3, #0
1a004328:	d039      	beq.n	1a00439e <_puts_r+0x86>
1a00432a:	6884      	ldr	r4, [r0, #8]
1a00432c:	4b2f      	ldr	r3, [pc, #188]	; (1a0043ec <_puts_r+0xd4>)
1a00432e:	429c      	cmp	r4, r3
1a004330:	d043      	beq.n	1a0043ba <_puts_r+0xa2>
1a004332:	4b2f      	ldr	r3, [pc, #188]	; (1a0043f0 <_puts_r+0xd8>)
1a004334:	429c      	cmp	r4, r3
1a004336:	d056      	beq.n	1a0043e6 <_puts_r+0xce>
1a004338:	4b2e      	ldr	r3, [pc, #184]	; (1a0043f4 <_puts_r+0xdc>)
1a00433a:	429c      	cmp	r4, r3
1a00433c:	bf08      	it	eq
1a00433e:	f8d8 400c 	ldreq.w	r4, [r8, #12]
1a004342:	89a3      	ldrh	r3, [r4, #12]
1a004344:	071b      	lsls	r3, r3, #28
1a004346:	d53d      	bpl.n	1a0043c4 <_puts_r+0xac>
1a004348:	6923      	ldr	r3, [r4, #16]
1a00434a:	2b00      	cmp	r3, #0
1a00434c:	d03a      	beq.n	1a0043c4 <_puts_r+0xac>
1a00434e:	3e01      	subs	r6, #1
1a004350:	68a3      	ldr	r3, [r4, #8]
1a004352:	f816 5f01 	ldrb.w	r5, [r6, #1]!
1a004356:	3b01      	subs	r3, #1
1a004358:	60a3      	str	r3, [r4, #8]
1a00435a:	b1b5      	cbz	r5, 1a00438a <_puts_r+0x72>
1a00435c:	2b00      	cmp	r3, #0
1a00435e:	db04      	blt.n	1a00436a <_puts_r+0x52>
1a004360:	6823      	ldr	r3, [r4, #0]
1a004362:	1c5a      	adds	r2, r3, #1
1a004364:	6022      	str	r2, [r4, #0]
1a004366:	701d      	strb	r5, [r3, #0]
1a004368:	e7f2      	b.n	1a004350 <_puts_r+0x38>
1a00436a:	69a7      	ldr	r7, [r4, #24]
1a00436c:	42bb      	cmp	r3, r7
1a00436e:	4622      	mov	r2, r4
1a004370:	4629      	mov	r1, r5
1a004372:	4640      	mov	r0, r8
1a004374:	db01      	blt.n	1a00437a <_puts_r+0x62>
1a004376:	2d0a      	cmp	r5, #10
1a004378:	d1f2      	bne.n	1a004360 <_puts_r+0x48>
1a00437a:	f000 f88b 	bl	1a004494 <__swbuf_r>
1a00437e:	3001      	adds	r0, #1
1a004380:	d1e6      	bne.n	1a004350 <_puts_r+0x38>
1a004382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00438a:	2b00      	cmp	r3, #0
1a00438c:	db21      	blt.n	1a0043d2 <_puts_r+0xba>
1a00438e:	6823      	ldr	r3, [r4, #0]
1a004390:	220a      	movs	r2, #10
1a004392:	1c59      	adds	r1, r3, #1
1a004394:	6021      	str	r1, [r4, #0]
1a004396:	701a      	strb	r2, [r3, #0]
1a004398:	4610      	mov	r0, r2
1a00439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00439e:	f7ff f9ff 	bl	1a0037a0 <__sinit>
1a0043a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
1a0043a6:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a0043aa:	2b00      	cmp	r3, #0
1a0043ac:	d1be      	bne.n	1a00432c <_puts_r+0x14>
1a0043ae:	4640      	mov	r0, r8
1a0043b0:	f7ff f9f6 	bl	1a0037a0 <__sinit>
1a0043b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0043ec <_puts_r+0xd4>)
1a0043b6:	429c      	cmp	r4, r3
1a0043b8:	d1bb      	bne.n	1a004332 <_puts_r+0x1a>
1a0043ba:	f8d8 4004 	ldr.w	r4, [r8, #4]
1a0043be:	89a3      	ldrh	r3, [r4, #12]
1a0043c0:	071b      	lsls	r3, r3, #28
1a0043c2:	d4c1      	bmi.n	1a004348 <_puts_r+0x30>
1a0043c4:	4621      	mov	r1, r4
1a0043c6:	4640      	mov	r0, r8
1a0043c8:	f000 f8c6 	bl	1a004558 <__swsetup_r>
1a0043cc:	2800      	cmp	r0, #0
1a0043ce:	d0be      	beq.n	1a00434e <_puts_r+0x36>
1a0043d0:	e7d7      	b.n	1a004382 <_puts_r+0x6a>
1a0043d2:	4622      	mov	r2, r4
1a0043d4:	4640      	mov	r0, r8
1a0043d6:	210a      	movs	r1, #10
1a0043d8:	f000 f85c 	bl	1a004494 <__swbuf_r>
1a0043dc:	3001      	adds	r0, #1
1a0043de:	d0d0      	beq.n	1a004382 <_puts_r+0x6a>
1a0043e0:	200a      	movs	r0, #10
1a0043e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0043e6:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a0043ea:	e7aa      	b.n	1a004342 <_puts_r+0x2a>
1a0043ec:	1a004f98 	.word	0x1a004f98
1a0043f0:	1a004f78 	.word	0x1a004f78
1a0043f4:	1a004f58 	.word	0x1a004f58

1a0043f8 <puts>:
1a0043f8:	4b02      	ldr	r3, [pc, #8]	; (1a004404 <puts+0xc>)
1a0043fa:	4601      	mov	r1, r0
1a0043fc:	6818      	ldr	r0, [r3, #0]
1a0043fe:	f7ff bf8b 	b.w	1a004318 <_puts_r>
1a004402:	bf00      	nop
1a004404:	10000040 	.word	0x10000040

1a004408 <__sread>:
1a004408:	b510      	push	{r4, lr}
1a00440a:	460c      	mov	r4, r1
1a00440c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004410:	f7fc f81c 	bl	1a00044c <_read_r>
1a004414:	2800      	cmp	r0, #0
1a004416:	db03      	blt.n	1a004420 <__sread+0x18>
1a004418:	6d63      	ldr	r3, [r4, #84]	; 0x54
1a00441a:	4403      	add	r3, r0
1a00441c:	6563      	str	r3, [r4, #84]	; 0x54
1a00441e:	bd10      	pop	{r4, pc}
1a004420:	89a3      	ldrh	r3, [r4, #12]
1a004422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004426:	81a3      	strh	r3, [r4, #12]
1a004428:	bd10      	pop	{r4, pc}
1a00442a:	bf00      	nop

1a00442c <__seofread>:
1a00442c:	2000      	movs	r0, #0
1a00442e:	4770      	bx	lr

1a004430 <__swrite>:
1a004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004434:	4616      	mov	r6, r2
1a004436:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a00443a:	461f      	mov	r7, r3
1a00443c:	05d3      	lsls	r3, r2, #23
1a00443e:	460c      	mov	r4, r1
1a004440:	4605      	mov	r5, r0
1a004442:	d507      	bpl.n	1a004454 <__swrite+0x24>
1a004444:	2200      	movs	r2, #0
1a004446:	2302      	movs	r3, #2
1a004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00444c:	f7fb fff9 	bl	1a000442 <_lseek_r>
1a004450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004458:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a00445c:	81a2      	strh	r2, [r4, #12]
1a00445e:	463b      	mov	r3, r7
1a004460:	4632      	mov	r2, r6
1a004462:	4628      	mov	r0, r5
1a004464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004468:	f7fc b818 	b.w	1a00049c <_write_r>

1a00446c <__sseek>:
1a00446c:	b510      	push	{r4, lr}
1a00446e:	460c      	mov	r4, r1
1a004470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004474:	f7fb ffe5 	bl	1a000442 <_lseek_r>
1a004478:	89a3      	ldrh	r3, [r4, #12]
1a00447a:	1c42      	adds	r2, r0, #1
1a00447c:	bf0e      	itee	eq
1a00447e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004486:	6560      	strne	r0, [r4, #84]	; 0x54
1a004488:	81a3      	strh	r3, [r4, #12]
1a00448a:	bd10      	pop	{r4, pc}

1a00448c <__sclose>:
1a00448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004490:	f7fb bfc4 	b.w	1a00041c <_close_r>

1a004494 <__swbuf_r>:
1a004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004496:	460d      	mov	r5, r1
1a004498:	4614      	mov	r4, r2
1a00449a:	4606      	mov	r6, r0
1a00449c:	b110      	cbz	r0, 1a0044a4 <__swbuf_r+0x10>
1a00449e:	6983      	ldr	r3, [r0, #24]
1a0044a0:	2b00      	cmp	r3, #0
1a0044a2:	d042      	beq.n	1a00452a <__swbuf_r+0x96>
1a0044a4:	4b25      	ldr	r3, [pc, #148]	; (1a00453c <__swbuf_r+0xa8>)
1a0044a6:	429c      	cmp	r4, r3
1a0044a8:	d044      	beq.n	1a004534 <__swbuf_r+0xa0>
1a0044aa:	4b25      	ldr	r3, [pc, #148]	; (1a004540 <__swbuf_r+0xac>)
1a0044ac:	429c      	cmp	r4, r3
1a0044ae:	d043      	beq.n	1a004538 <__swbuf_r+0xa4>
1a0044b0:	4b24      	ldr	r3, [pc, #144]	; (1a004544 <__swbuf_r+0xb0>)
1a0044b2:	429c      	cmp	r4, r3
1a0044b4:	bf08      	it	eq
1a0044b6:	68f4      	ldreq	r4, [r6, #12]
1a0044b8:	89a3      	ldrh	r3, [r4, #12]
1a0044ba:	69a2      	ldr	r2, [r4, #24]
1a0044bc:	60a2      	str	r2, [r4, #8]
1a0044be:	071a      	lsls	r2, r3, #28
1a0044c0:	d522      	bpl.n	1a004508 <__swbuf_r+0x74>
1a0044c2:	6923      	ldr	r3, [r4, #16]
1a0044c4:	b303      	cbz	r3, 1a004508 <__swbuf_r+0x74>
1a0044c6:	6822      	ldr	r2, [r4, #0]
1a0044c8:	6961      	ldr	r1, [r4, #20]
1a0044ca:	1ad3      	subs	r3, r2, r3
1a0044cc:	b2ed      	uxtb	r5, r5
1a0044ce:	428b      	cmp	r3, r1
1a0044d0:	462f      	mov	r7, r5
1a0044d2:	da21      	bge.n	1a004518 <__swbuf_r+0x84>
1a0044d4:	3301      	adds	r3, #1
1a0044d6:	68a1      	ldr	r1, [r4, #8]
1a0044d8:	1c50      	adds	r0, r2, #1
1a0044da:	3901      	subs	r1, #1
1a0044dc:	60a1      	str	r1, [r4, #8]
1a0044de:	6020      	str	r0, [r4, #0]
1a0044e0:	7015      	strb	r5, [r2, #0]
1a0044e2:	6962      	ldr	r2, [r4, #20]
1a0044e4:	429a      	cmp	r2, r3
1a0044e6:	d006      	beq.n	1a0044f6 <__swbuf_r+0x62>
1a0044e8:	89a3      	ldrh	r3, [r4, #12]
1a0044ea:	07db      	lsls	r3, r3, #31
1a0044ec:	d501      	bpl.n	1a0044f2 <__swbuf_r+0x5e>
1a0044ee:	2d0a      	cmp	r5, #10
1a0044f0:	d001      	beq.n	1a0044f6 <__swbuf_r+0x62>
1a0044f2:	4638      	mov	r0, r7
1a0044f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0044f6:	4621      	mov	r1, r4
1a0044f8:	4630      	mov	r0, r6
1a0044fa:	f7ff f815 	bl	1a003528 <_fflush_r>
1a0044fe:	2800      	cmp	r0, #0
1a004500:	d0f7      	beq.n	1a0044f2 <__swbuf_r+0x5e>
1a004502:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004506:	e7f4      	b.n	1a0044f2 <__swbuf_r+0x5e>
1a004508:	4621      	mov	r1, r4
1a00450a:	4630      	mov	r0, r6
1a00450c:	f000 f824 	bl	1a004558 <__swsetup_r>
1a004510:	2800      	cmp	r0, #0
1a004512:	d1f6      	bne.n	1a004502 <__swbuf_r+0x6e>
1a004514:	6923      	ldr	r3, [r4, #16]
1a004516:	e7d6      	b.n	1a0044c6 <__swbuf_r+0x32>
1a004518:	4621      	mov	r1, r4
1a00451a:	4630      	mov	r0, r6
1a00451c:	f7ff f804 	bl	1a003528 <_fflush_r>
1a004520:	2800      	cmp	r0, #0
1a004522:	d1ee      	bne.n	1a004502 <__swbuf_r+0x6e>
1a004524:	6822      	ldr	r2, [r4, #0]
1a004526:	2301      	movs	r3, #1
1a004528:	e7d5      	b.n	1a0044d6 <__swbuf_r+0x42>
1a00452a:	f7ff f939 	bl	1a0037a0 <__sinit>
1a00452e:	4b03      	ldr	r3, [pc, #12]	; (1a00453c <__swbuf_r+0xa8>)
1a004530:	429c      	cmp	r4, r3
1a004532:	d1ba      	bne.n	1a0044aa <__swbuf_r+0x16>
1a004534:	6874      	ldr	r4, [r6, #4]
1a004536:	e7bf      	b.n	1a0044b8 <__swbuf_r+0x24>
1a004538:	68b4      	ldr	r4, [r6, #8]
1a00453a:	e7bd      	b.n	1a0044b8 <__swbuf_r+0x24>
1a00453c:	1a004f98 	.word	0x1a004f98
1a004540:	1a004f78 	.word	0x1a004f78
1a004544:	1a004f58 	.word	0x1a004f58

1a004548 <__swbuf>:
1a004548:	4b02      	ldr	r3, [pc, #8]	; (1a004554 <__swbuf+0xc>)
1a00454a:	460a      	mov	r2, r1
1a00454c:	4601      	mov	r1, r0
1a00454e:	6818      	ldr	r0, [r3, #0]
1a004550:	f7ff bfa0 	b.w	1a004494 <__swbuf_r>
1a004554:	10000040 	.word	0x10000040

1a004558 <__swsetup_r>:
1a004558:	4b38      	ldr	r3, [pc, #224]	; (1a00463c <__swsetup_r+0xe4>)
1a00455a:	b570      	push	{r4, r5, r6, lr}
1a00455c:	681d      	ldr	r5, [r3, #0]
1a00455e:	4606      	mov	r6, r0
1a004560:	460c      	mov	r4, r1
1a004562:	b115      	cbz	r5, 1a00456a <__swsetup_r+0x12>
1a004564:	69ab      	ldr	r3, [r5, #24]
1a004566:	2b00      	cmp	r3, #0
1a004568:	d042      	beq.n	1a0045f0 <__swsetup_r+0x98>
1a00456a:	4b35      	ldr	r3, [pc, #212]	; (1a004640 <__swsetup_r+0xe8>)
1a00456c:	429c      	cmp	r4, r3
1a00456e:	d045      	beq.n	1a0045fc <__swsetup_r+0xa4>
1a004570:	4b34      	ldr	r3, [pc, #208]	; (1a004644 <__swsetup_r+0xec>)
1a004572:	429c      	cmp	r4, r3
1a004574:	d058      	beq.n	1a004628 <__swsetup_r+0xd0>
1a004576:	4b34      	ldr	r3, [pc, #208]	; (1a004648 <__swsetup_r+0xf0>)
1a004578:	429c      	cmp	r4, r3
1a00457a:	bf08      	it	eq
1a00457c:	68ec      	ldreq	r4, [r5, #12]
1a00457e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004582:	b293      	uxth	r3, r2
1a004584:	0719      	lsls	r1, r3, #28
1a004586:	d50c      	bpl.n	1a0045a2 <__swsetup_r+0x4a>
1a004588:	6920      	ldr	r0, [r4, #16]
1a00458a:	b1a8      	cbz	r0, 1a0045b8 <__swsetup_r+0x60>
1a00458c:	f013 0201 	ands.w	r2, r3, #1
1a004590:	d01e      	beq.n	1a0045d0 <__swsetup_r+0x78>
1a004592:	6963      	ldr	r3, [r4, #20]
1a004594:	2200      	movs	r2, #0
1a004596:	425b      	negs	r3, r3
1a004598:	61a3      	str	r3, [r4, #24]
1a00459a:	60a2      	str	r2, [r4, #8]
1a00459c:	b1f0      	cbz	r0, 1a0045dc <__swsetup_r+0x84>
1a00459e:	2000      	movs	r0, #0
1a0045a0:	bd70      	pop	{r4, r5, r6, pc}
1a0045a2:	06dd      	lsls	r5, r3, #27
1a0045a4:	d542      	bpl.n	1a00462c <__swsetup_r+0xd4>
1a0045a6:	0758      	lsls	r0, r3, #29
1a0045a8:	d42a      	bmi.n	1a004600 <__swsetup_r+0xa8>
1a0045aa:	6920      	ldr	r0, [r4, #16]
1a0045ac:	f042 0308 	orr.w	r3, r2, #8
1a0045b0:	81a3      	strh	r3, [r4, #12]
1a0045b2:	b29b      	uxth	r3, r3
1a0045b4:	2800      	cmp	r0, #0
1a0045b6:	d1e9      	bne.n	1a00458c <__swsetup_r+0x34>
1a0045b8:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a0045bc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a0045c0:	d0e4      	beq.n	1a00458c <__swsetup_r+0x34>
1a0045c2:	4630      	mov	r0, r6
1a0045c4:	4621      	mov	r1, r4
1a0045c6:	f000 f9e7 	bl	1a004998 <__smakebuf_r>
1a0045ca:	89a3      	ldrh	r3, [r4, #12]
1a0045cc:	6920      	ldr	r0, [r4, #16]
1a0045ce:	e7dd      	b.n	1a00458c <__swsetup_r+0x34>
1a0045d0:	0799      	lsls	r1, r3, #30
1a0045d2:	bf58      	it	pl
1a0045d4:	6962      	ldrpl	r2, [r4, #20]
1a0045d6:	60a2      	str	r2, [r4, #8]
1a0045d8:	2800      	cmp	r0, #0
1a0045da:	d1e0      	bne.n	1a00459e <__swsetup_r+0x46>
1a0045dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0045e0:	061a      	lsls	r2, r3, #24
1a0045e2:	d5dd      	bpl.n	1a0045a0 <__swsetup_r+0x48>
1a0045e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0045e8:	81a3      	strh	r3, [r4, #12]
1a0045ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0045ee:	bd70      	pop	{r4, r5, r6, pc}
1a0045f0:	4628      	mov	r0, r5
1a0045f2:	f7ff f8d5 	bl	1a0037a0 <__sinit>
1a0045f6:	4b12      	ldr	r3, [pc, #72]	; (1a004640 <__swsetup_r+0xe8>)
1a0045f8:	429c      	cmp	r4, r3
1a0045fa:	d1b9      	bne.n	1a004570 <__swsetup_r+0x18>
1a0045fc:	686c      	ldr	r4, [r5, #4]
1a0045fe:	e7be      	b.n	1a00457e <__swsetup_r+0x26>
1a004600:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004602:	b151      	cbz	r1, 1a00461a <__swsetup_r+0xc2>
1a004604:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004608:	4299      	cmp	r1, r3
1a00460a:	d004      	beq.n	1a004616 <__swsetup_r+0xbe>
1a00460c:	4630      	mov	r0, r6
1a00460e:	f7ff fa47 	bl	1a003aa0 <_free_r>
1a004612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004616:	2300      	movs	r3, #0
1a004618:	6363      	str	r3, [r4, #52]	; 0x34
1a00461a:	2300      	movs	r3, #0
1a00461c:	6920      	ldr	r0, [r4, #16]
1a00461e:	6063      	str	r3, [r4, #4]
1a004620:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a004624:	6020      	str	r0, [r4, #0]
1a004626:	e7c1      	b.n	1a0045ac <__swsetup_r+0x54>
1a004628:	68ac      	ldr	r4, [r5, #8]
1a00462a:	e7a8      	b.n	1a00457e <__swsetup_r+0x26>
1a00462c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a004630:	2309      	movs	r3, #9
1a004632:	6033      	str	r3, [r6, #0]
1a004634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004638:	81a2      	strh	r2, [r4, #12]
1a00463a:	bd70      	pop	{r4, r5, r6, pc}
1a00463c:	10000040 	.word	0x10000040
1a004640:	1a004f98 	.word	0x1a004f98
1a004644:	1a004f78 	.word	0x1a004f78
1a004648:	1a004f58 	.word	0x1a004f58

1a00464c <__sfvwrite_r>:
1a00464c:	6893      	ldr	r3, [r2, #8]
1a00464e:	2b00      	cmp	r3, #0
1a004650:	d073      	beq.n	1a00473a <__sfvwrite_r+0xee>
1a004652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004656:	898b      	ldrh	r3, [r1, #12]
1a004658:	b083      	sub	sp, #12
1a00465a:	460c      	mov	r4, r1
1a00465c:	0719      	lsls	r1, r3, #28
1a00465e:	9000      	str	r0, [sp, #0]
1a004660:	4616      	mov	r6, r2
1a004662:	d526      	bpl.n	1a0046b2 <__sfvwrite_r+0x66>
1a004664:	6922      	ldr	r2, [r4, #16]
1a004666:	b322      	cbz	r2, 1a0046b2 <__sfvwrite_r+0x66>
1a004668:	f013 0002 	ands.w	r0, r3, #2
1a00466c:	6835      	ldr	r5, [r6, #0]
1a00466e:	d02c      	beq.n	1a0046ca <__sfvwrite_r+0x7e>
1a004670:	f04f 0900 	mov.w	r9, #0
1a004674:	4fb0      	ldr	r7, [pc, #704]	; (1a004938 <__sfvwrite_r+0x2ec>)
1a004676:	46c8      	mov	r8, r9
1a004678:	46b2      	mov	sl, r6
1a00467a:	45b8      	cmp	r8, r7
1a00467c:	4643      	mov	r3, r8
1a00467e:	464a      	mov	r2, r9
1a004680:	bf28      	it	cs
1a004682:	463b      	movcs	r3, r7
1a004684:	9800      	ldr	r0, [sp, #0]
1a004686:	f1b8 0f00 	cmp.w	r8, #0
1a00468a:	d050      	beq.n	1a00472e <__sfvwrite_r+0xe2>
1a00468c:	6a21      	ldr	r1, [r4, #32]
1a00468e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004690:	47b0      	blx	r6
1a004692:	2800      	cmp	r0, #0
1a004694:	dd58      	ble.n	1a004748 <__sfvwrite_r+0xfc>
1a004696:	f8da 3008 	ldr.w	r3, [sl, #8]
1a00469a:	1a1b      	subs	r3, r3, r0
1a00469c:	4481      	add	r9, r0
1a00469e:	eba8 0800 	sub.w	r8, r8, r0
1a0046a2:	f8ca 3008 	str.w	r3, [sl, #8]
1a0046a6:	2b00      	cmp	r3, #0
1a0046a8:	d1e7      	bne.n	1a00467a <__sfvwrite_r+0x2e>
1a0046aa:	2000      	movs	r0, #0
1a0046ac:	b003      	add	sp, #12
1a0046ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0046b2:	4621      	mov	r1, r4
1a0046b4:	9800      	ldr	r0, [sp, #0]
1a0046b6:	f7ff ff4f 	bl	1a004558 <__swsetup_r>
1a0046ba:	2800      	cmp	r0, #0
1a0046bc:	f040 8133 	bne.w	1a004926 <__sfvwrite_r+0x2da>
1a0046c0:	89a3      	ldrh	r3, [r4, #12]
1a0046c2:	6835      	ldr	r5, [r6, #0]
1a0046c4:	f013 0002 	ands.w	r0, r3, #2
1a0046c8:	d1d2      	bne.n	1a004670 <__sfvwrite_r+0x24>
1a0046ca:	f013 0901 	ands.w	r9, r3, #1
1a0046ce:	d145      	bne.n	1a00475c <__sfvwrite_r+0x110>
1a0046d0:	464f      	mov	r7, r9
1a0046d2:	9601      	str	r6, [sp, #4]
1a0046d4:	b337      	cbz	r7, 1a004724 <__sfvwrite_r+0xd8>
1a0046d6:	059a      	lsls	r2, r3, #22
1a0046d8:	f8d4 8008 	ldr.w	r8, [r4, #8]
1a0046dc:	f140 8083 	bpl.w	1a0047e6 <__sfvwrite_r+0x19a>
1a0046e0:	4547      	cmp	r7, r8
1a0046e2:	46c3      	mov	fp, r8
1a0046e4:	f0c0 80ab 	bcc.w	1a00483e <__sfvwrite_r+0x1f2>
1a0046e8:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a0046ec:	f040 80ac 	bne.w	1a004848 <__sfvwrite_r+0x1fc>
1a0046f0:	6820      	ldr	r0, [r4, #0]
1a0046f2:	46ba      	mov	sl, r7
1a0046f4:	465a      	mov	r2, fp
1a0046f6:	4649      	mov	r1, r9
1a0046f8:	f000 f9e2 	bl	1a004ac0 <memmove>
1a0046fc:	68a2      	ldr	r2, [r4, #8]
1a0046fe:	6823      	ldr	r3, [r4, #0]
1a004700:	eba2 0208 	sub.w	r2, r2, r8
1a004704:	445b      	add	r3, fp
1a004706:	60a2      	str	r2, [r4, #8]
1a004708:	6023      	str	r3, [r4, #0]
1a00470a:	9a01      	ldr	r2, [sp, #4]
1a00470c:	6893      	ldr	r3, [r2, #8]
1a00470e:	eba3 030a 	sub.w	r3, r3, sl
1a004712:	44d1      	add	r9, sl
1a004714:	eba7 070a 	sub.w	r7, r7, sl
1a004718:	6093      	str	r3, [r2, #8]
1a00471a:	2b00      	cmp	r3, #0
1a00471c:	d0c5      	beq.n	1a0046aa <__sfvwrite_r+0x5e>
1a00471e:	89a3      	ldrh	r3, [r4, #12]
1a004720:	2f00      	cmp	r7, #0
1a004722:	d1d8      	bne.n	1a0046d6 <__sfvwrite_r+0x8a>
1a004724:	f8d5 9000 	ldr.w	r9, [r5]
1a004728:	686f      	ldr	r7, [r5, #4]
1a00472a:	3508      	adds	r5, #8
1a00472c:	e7d2      	b.n	1a0046d4 <__sfvwrite_r+0x88>
1a00472e:	f8d5 9000 	ldr.w	r9, [r5]
1a004732:	f8d5 8004 	ldr.w	r8, [r5, #4]
1a004736:	3508      	adds	r5, #8
1a004738:	e79f      	b.n	1a00467a <__sfvwrite_r+0x2e>
1a00473a:	2000      	movs	r0, #0
1a00473c:	4770      	bx	lr
1a00473e:	4621      	mov	r1, r4
1a004740:	9800      	ldr	r0, [sp, #0]
1a004742:	f7fe fef1 	bl	1a003528 <_fflush_r>
1a004746:	b370      	cbz	r0, 1a0047a6 <__sfvwrite_r+0x15a>
1a004748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00474c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004754:	81a3      	strh	r3, [r4, #12]
1a004756:	b003      	add	sp, #12
1a004758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00475c:	4681      	mov	r9, r0
1a00475e:	4633      	mov	r3, r6
1a004760:	464e      	mov	r6, r9
1a004762:	46a8      	mov	r8, r5
1a004764:	469a      	mov	sl, r3
1a004766:	464d      	mov	r5, r9
1a004768:	b34e      	cbz	r6, 1a0047be <__sfvwrite_r+0x172>
1a00476a:	b380      	cbz	r0, 1a0047ce <__sfvwrite_r+0x182>
1a00476c:	6820      	ldr	r0, [r4, #0]
1a00476e:	6923      	ldr	r3, [r4, #16]
1a004770:	6962      	ldr	r2, [r4, #20]
1a004772:	45b1      	cmp	r9, r6
1a004774:	46cb      	mov	fp, r9
1a004776:	bf28      	it	cs
1a004778:	46b3      	movcs	fp, r6
1a00477a:	4298      	cmp	r0, r3
1a00477c:	465f      	mov	r7, fp
1a00477e:	d904      	bls.n	1a00478a <__sfvwrite_r+0x13e>
1a004780:	68a3      	ldr	r3, [r4, #8]
1a004782:	4413      	add	r3, r2
1a004784:	459b      	cmp	fp, r3
1a004786:	f300 80a6 	bgt.w	1a0048d6 <__sfvwrite_r+0x28a>
1a00478a:	4593      	cmp	fp, r2
1a00478c:	db4b      	blt.n	1a004826 <__sfvwrite_r+0x1da>
1a00478e:	4613      	mov	r3, r2
1a004790:	6aa7      	ldr	r7, [r4, #40]	; 0x28
1a004792:	6a21      	ldr	r1, [r4, #32]
1a004794:	9800      	ldr	r0, [sp, #0]
1a004796:	462a      	mov	r2, r5
1a004798:	47b8      	blx	r7
1a00479a:	1e07      	subs	r7, r0, #0
1a00479c:	ddd4      	ble.n	1a004748 <__sfvwrite_r+0xfc>
1a00479e:	ebb9 0907 	subs.w	r9, r9, r7
1a0047a2:	d0cc      	beq.n	1a00473e <__sfvwrite_r+0xf2>
1a0047a4:	2001      	movs	r0, #1
1a0047a6:	f8da 3008 	ldr.w	r3, [sl, #8]
1a0047aa:	1bdb      	subs	r3, r3, r7
1a0047ac:	443d      	add	r5, r7
1a0047ae:	1bf6      	subs	r6, r6, r7
1a0047b0:	f8ca 3008 	str.w	r3, [sl, #8]
1a0047b4:	2b00      	cmp	r3, #0
1a0047b6:	f43f af78 	beq.w	1a0046aa <__sfvwrite_r+0x5e>
1a0047ba:	2e00      	cmp	r6, #0
1a0047bc:	d1d5      	bne.n	1a00476a <__sfvwrite_r+0x11e>
1a0047be:	f108 0308 	add.w	r3, r8, #8
1a0047c2:	e913 0060 	ldmdb	r3, {r5, r6}
1a0047c6:	4698      	mov	r8, r3
1a0047c8:	3308      	adds	r3, #8
1a0047ca:	2e00      	cmp	r6, #0
1a0047cc:	d0f9      	beq.n	1a0047c2 <__sfvwrite_r+0x176>
1a0047ce:	4632      	mov	r2, r6
1a0047d0:	210a      	movs	r1, #10
1a0047d2:	4628      	mov	r0, r5
1a0047d4:	f000 f924 	bl	1a004a20 <memchr>
1a0047d8:	2800      	cmp	r0, #0
1a0047da:	f000 80a1 	beq.w	1a004920 <__sfvwrite_r+0x2d4>
1a0047de:	3001      	adds	r0, #1
1a0047e0:	eba0 0905 	sub.w	r9, r0, r5
1a0047e4:	e7c2      	b.n	1a00476c <__sfvwrite_r+0x120>
1a0047e6:	6820      	ldr	r0, [r4, #0]
1a0047e8:	6923      	ldr	r3, [r4, #16]
1a0047ea:	4298      	cmp	r0, r3
1a0047ec:	d802      	bhi.n	1a0047f4 <__sfvwrite_r+0x1a8>
1a0047ee:	6963      	ldr	r3, [r4, #20]
1a0047f0:	429f      	cmp	r7, r3
1a0047f2:	d25d      	bcs.n	1a0048b0 <__sfvwrite_r+0x264>
1a0047f4:	45b8      	cmp	r8, r7
1a0047f6:	bf28      	it	cs
1a0047f8:	46b8      	movcs	r8, r7
1a0047fa:	4642      	mov	r2, r8
1a0047fc:	4649      	mov	r1, r9
1a0047fe:	f000 f95f 	bl	1a004ac0 <memmove>
1a004802:	68a3      	ldr	r3, [r4, #8]
1a004804:	6822      	ldr	r2, [r4, #0]
1a004806:	eba3 0308 	sub.w	r3, r3, r8
1a00480a:	4442      	add	r2, r8
1a00480c:	60a3      	str	r3, [r4, #8]
1a00480e:	6022      	str	r2, [r4, #0]
1a004810:	b10b      	cbz	r3, 1a004816 <__sfvwrite_r+0x1ca>
1a004812:	46c2      	mov	sl, r8
1a004814:	e779      	b.n	1a00470a <__sfvwrite_r+0xbe>
1a004816:	4621      	mov	r1, r4
1a004818:	9800      	ldr	r0, [sp, #0]
1a00481a:	f7fe fe85 	bl	1a003528 <_fflush_r>
1a00481e:	2800      	cmp	r0, #0
1a004820:	d192      	bne.n	1a004748 <__sfvwrite_r+0xfc>
1a004822:	46c2      	mov	sl, r8
1a004824:	e771      	b.n	1a00470a <__sfvwrite_r+0xbe>
1a004826:	465a      	mov	r2, fp
1a004828:	4629      	mov	r1, r5
1a00482a:	f000 f949 	bl	1a004ac0 <memmove>
1a00482e:	68a2      	ldr	r2, [r4, #8]
1a004830:	6823      	ldr	r3, [r4, #0]
1a004832:	eba2 020b 	sub.w	r2, r2, fp
1a004836:	445b      	add	r3, fp
1a004838:	60a2      	str	r2, [r4, #8]
1a00483a:	6023      	str	r3, [r4, #0]
1a00483c:	e7af      	b.n	1a00479e <__sfvwrite_r+0x152>
1a00483e:	6820      	ldr	r0, [r4, #0]
1a004840:	46b8      	mov	r8, r7
1a004842:	46ba      	mov	sl, r7
1a004844:	46bb      	mov	fp, r7
1a004846:	e755      	b.n	1a0046f4 <__sfvwrite_r+0xa8>
1a004848:	6962      	ldr	r2, [r4, #20]
1a00484a:	6820      	ldr	r0, [r4, #0]
1a00484c:	6921      	ldr	r1, [r4, #16]
1a00484e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
1a004852:	eba0 0a01 	sub.w	sl, r0, r1
1a004856:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
1a00485a:	f10a 0001 	add.w	r0, sl, #1
1a00485e:	ea4f 0868 	mov.w	r8, r8, asr #1
1a004862:	4438      	add	r0, r7
1a004864:	4540      	cmp	r0, r8
1a004866:	4642      	mov	r2, r8
1a004868:	bf84      	itt	hi
1a00486a:	4680      	movhi	r8, r0
1a00486c:	4642      	movhi	r2, r8
1a00486e:	055b      	lsls	r3, r3, #21
1a004870:	d544      	bpl.n	1a0048fc <__sfvwrite_r+0x2b0>
1a004872:	4611      	mov	r1, r2
1a004874:	9800      	ldr	r0, [sp, #0]
1a004876:	f7ff f95b 	bl	1a003b30 <_malloc_r>
1a00487a:	4683      	mov	fp, r0
1a00487c:	2800      	cmp	r0, #0
1a00487e:	d055      	beq.n	1a00492c <__sfvwrite_r+0x2e0>
1a004880:	4652      	mov	r2, sl
1a004882:	6921      	ldr	r1, [r4, #16]
1a004884:	f7ff f824 	bl	1a0038d0 <memcpy>
1a004888:	89a3      	ldrh	r3, [r4, #12]
1a00488a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a00488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004892:	81a3      	strh	r3, [r4, #12]
1a004894:	eb0b 000a 	add.w	r0, fp, sl
1a004898:	eba8 030a 	sub.w	r3, r8, sl
1a00489c:	f8c4 b010 	str.w	fp, [r4, #16]
1a0048a0:	f8c4 8014 	str.w	r8, [r4, #20]
1a0048a4:	6020      	str	r0, [r4, #0]
1a0048a6:	60a3      	str	r3, [r4, #8]
1a0048a8:	46b8      	mov	r8, r7
1a0048aa:	46ba      	mov	sl, r7
1a0048ac:	46bb      	mov	fp, r7
1a0048ae:	e721      	b.n	1a0046f4 <__sfvwrite_r+0xa8>
1a0048b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a0048b4:	42b9      	cmp	r1, r7
1a0048b6:	bf28      	it	cs
1a0048b8:	4639      	movcs	r1, r7
1a0048ba:	464a      	mov	r2, r9
1a0048bc:	fb91 f1f3 	sdiv	r1, r1, r3
1a0048c0:	9800      	ldr	r0, [sp, #0]
1a0048c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0048c4:	fb03 f301 	mul.w	r3, r3, r1
1a0048c8:	6a21      	ldr	r1, [r4, #32]
1a0048ca:	47b0      	blx	r6
1a0048cc:	f1b0 0a00 	subs.w	sl, r0, #0
1a0048d0:	f73f af1b 	bgt.w	1a00470a <__sfvwrite_r+0xbe>
1a0048d4:	e738      	b.n	1a004748 <__sfvwrite_r+0xfc>
1a0048d6:	461a      	mov	r2, r3
1a0048d8:	4629      	mov	r1, r5
1a0048da:	9301      	str	r3, [sp, #4]
1a0048dc:	f000 f8f0 	bl	1a004ac0 <memmove>
1a0048e0:	6822      	ldr	r2, [r4, #0]
1a0048e2:	9b01      	ldr	r3, [sp, #4]
1a0048e4:	9800      	ldr	r0, [sp, #0]
1a0048e6:	441a      	add	r2, r3
1a0048e8:	6022      	str	r2, [r4, #0]
1a0048ea:	4621      	mov	r1, r4
1a0048ec:	f7fe fe1c 	bl	1a003528 <_fflush_r>
1a0048f0:	9b01      	ldr	r3, [sp, #4]
1a0048f2:	2800      	cmp	r0, #0
1a0048f4:	f47f af28 	bne.w	1a004748 <__sfvwrite_r+0xfc>
1a0048f8:	461f      	mov	r7, r3
1a0048fa:	e750      	b.n	1a00479e <__sfvwrite_r+0x152>
1a0048fc:	9800      	ldr	r0, [sp, #0]
1a0048fe:	f000 f943 	bl	1a004b88 <_realloc_r>
1a004902:	4683      	mov	fp, r0
1a004904:	2800      	cmp	r0, #0
1a004906:	d1c5      	bne.n	1a004894 <__sfvwrite_r+0x248>
1a004908:	9d00      	ldr	r5, [sp, #0]
1a00490a:	6921      	ldr	r1, [r4, #16]
1a00490c:	4628      	mov	r0, r5
1a00490e:	f7ff f8c7 	bl	1a003aa0 <_free_r>
1a004912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004916:	220c      	movs	r2, #12
1a004918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00491c:	602a      	str	r2, [r5, #0]
1a00491e:	e715      	b.n	1a00474c <__sfvwrite_r+0x100>
1a004920:	f106 0901 	add.w	r9, r6, #1
1a004924:	e722      	b.n	1a00476c <__sfvwrite_r+0x120>
1a004926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00492a:	e6bf      	b.n	1a0046ac <__sfvwrite_r+0x60>
1a00492c:	9a00      	ldr	r2, [sp, #0]
1a00492e:	230c      	movs	r3, #12
1a004930:	6013      	str	r3, [r2, #0]
1a004932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004936:	e709      	b.n	1a00474c <__sfvwrite_r+0x100>
1a004938:	7ffffc00 	.word	0x7ffffc00

1a00493c <__swhatbuf_r>:
1a00493c:	b570      	push	{r4, r5, r6, lr}
1a00493e:	460c      	mov	r4, r1
1a004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004944:	2900      	cmp	r1, #0
1a004946:	b090      	sub	sp, #64	; 0x40
1a004948:	4615      	mov	r5, r2
1a00494a:	461e      	mov	r6, r3
1a00494c:	db13      	blt.n	1a004976 <__swhatbuf_r+0x3a>
1a00494e:	aa01      	add	r2, sp, #4
1a004950:	f7fb fd69 	bl	1a000426 <_fstat_r>
1a004954:	2800      	cmp	r0, #0
1a004956:	db0e      	blt.n	1a004976 <__swhatbuf_r+0x3a>
1a004958:	9a02      	ldr	r2, [sp, #8]
1a00495a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00495e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a004962:	fab2 f282 	clz	r2, r2
1a004966:	0952      	lsrs	r2, r2, #5
1a004968:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00496c:	2000      	movs	r0, #0
1a00496e:	6032      	str	r2, [r6, #0]
1a004970:	602b      	str	r3, [r5, #0]
1a004972:	b010      	add	sp, #64	; 0x40
1a004974:	bd70      	pop	{r4, r5, r6, pc}
1a004976:	89a3      	ldrh	r3, [r4, #12]
1a004978:	2200      	movs	r2, #0
1a00497a:	061b      	lsls	r3, r3, #24
1a00497c:	6032      	str	r2, [r6, #0]
1a00497e:	d504      	bpl.n	1a00498a <__swhatbuf_r+0x4e>
1a004980:	2340      	movs	r3, #64	; 0x40
1a004982:	2000      	movs	r0, #0
1a004984:	602b      	str	r3, [r5, #0]
1a004986:	b010      	add	sp, #64	; 0x40
1a004988:	bd70      	pop	{r4, r5, r6, pc}
1a00498a:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00498e:	2000      	movs	r0, #0
1a004990:	602b      	str	r3, [r5, #0]
1a004992:	b010      	add	sp, #64	; 0x40
1a004994:	bd70      	pop	{r4, r5, r6, pc}
1a004996:	bf00      	nop

1a004998 <__smakebuf_r>:
1a004998:	898a      	ldrh	r2, [r1, #12]
1a00499a:	0792      	lsls	r2, r2, #30
1a00499c:	460b      	mov	r3, r1
1a00499e:	d506      	bpl.n	1a0049ae <__smakebuf_r+0x16>
1a0049a0:	f101 0247 	add.w	r2, r1, #71	; 0x47
1a0049a4:	2101      	movs	r1, #1
1a0049a6:	601a      	str	r2, [r3, #0]
1a0049a8:	611a      	str	r2, [r3, #16]
1a0049aa:	6159      	str	r1, [r3, #20]
1a0049ac:	4770      	bx	lr
1a0049ae:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0049b0:	b083      	sub	sp, #12
1a0049b2:	ab01      	add	r3, sp, #4
1a0049b4:	466a      	mov	r2, sp
1a0049b6:	460c      	mov	r4, r1
1a0049b8:	4605      	mov	r5, r0
1a0049ba:	f7ff ffbf 	bl	1a00493c <__swhatbuf_r>
1a0049be:	9900      	ldr	r1, [sp, #0]
1a0049c0:	4606      	mov	r6, r0
1a0049c2:	4628      	mov	r0, r5
1a0049c4:	f7ff f8b4 	bl	1a003b30 <_malloc_r>
1a0049c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0049cc:	b1d0      	cbz	r0, 1a004a04 <__smakebuf_r+0x6c>
1a0049ce:	9a01      	ldr	r2, [sp, #4]
1a0049d0:	4f12      	ldr	r7, [pc, #72]	; (1a004a1c <__smakebuf_r+0x84>)
1a0049d2:	9900      	ldr	r1, [sp, #0]
1a0049d4:	62af      	str	r7, [r5, #40]	; 0x28
1a0049d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0049da:	81a3      	strh	r3, [r4, #12]
1a0049dc:	6020      	str	r0, [r4, #0]
1a0049de:	6120      	str	r0, [r4, #16]
1a0049e0:	6161      	str	r1, [r4, #20]
1a0049e2:	b91a      	cbnz	r2, 1a0049ec <__smakebuf_r+0x54>
1a0049e4:	4333      	orrs	r3, r6
1a0049e6:	81a3      	strh	r3, [r4, #12]
1a0049e8:	b003      	add	sp, #12
1a0049ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0049ec:	4628      	mov	r0, r5
1a0049ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0049f2:	f7fb fd1d 	bl	1a000430 <_isatty_r>
1a0049f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0049fa:	2800      	cmp	r0, #0
1a0049fc:	d0f2      	beq.n	1a0049e4 <__smakebuf_r+0x4c>
1a0049fe:	f043 0301 	orr.w	r3, r3, #1
1a004a02:	e7ef      	b.n	1a0049e4 <__smakebuf_r+0x4c>
1a004a04:	059a      	lsls	r2, r3, #22
1a004a06:	d4ef      	bmi.n	1a0049e8 <__smakebuf_r+0x50>
1a004a08:	f104 0247 	add.w	r2, r4, #71	; 0x47
1a004a0c:	f043 0302 	orr.w	r3, r3, #2
1a004a10:	2101      	movs	r1, #1
1a004a12:	81a3      	strh	r3, [r4, #12]
1a004a14:	6022      	str	r2, [r4, #0]
1a004a16:	6122      	str	r2, [r4, #16]
1a004a18:	6161      	str	r1, [r4, #20]
1a004a1a:	e7e5      	b.n	1a0049e8 <__smakebuf_r+0x50>
1a004a1c:	1a0035b5 	.word	0x1a0035b5

1a004a20 <memchr>:
1a004a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004a24:	2a10      	cmp	r2, #16
1a004a26:	db2b      	blt.n	1a004a80 <memchr+0x60>
1a004a28:	f010 0f07 	tst.w	r0, #7
1a004a2c:	d008      	beq.n	1a004a40 <memchr+0x20>
1a004a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004a32:	3a01      	subs	r2, #1
1a004a34:	428b      	cmp	r3, r1
1a004a36:	d02d      	beq.n	1a004a94 <memchr+0x74>
1a004a38:	f010 0f07 	tst.w	r0, #7
1a004a3c:	b342      	cbz	r2, 1a004a90 <memchr+0x70>
1a004a3e:	d1f6      	bne.n	1a004a2e <memchr+0xe>
1a004a40:	b4f0      	push	{r4, r5, r6, r7}
1a004a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004a4a:	f022 0407 	bic.w	r4, r2, #7
1a004a4e:	f07f 0700 	mvns.w	r7, #0
1a004a52:	2300      	movs	r3, #0
1a004a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004a58:	3c08      	subs	r4, #8
1a004a5a:	ea85 0501 	eor.w	r5, r5, r1
1a004a5e:	ea86 0601 	eor.w	r6, r6, r1
1a004a62:	fa85 f547 	uadd8	r5, r5, r7
1a004a66:	faa3 f587 	sel	r5, r3, r7
1a004a6a:	fa86 f647 	uadd8	r6, r6, r7
1a004a6e:	faa5 f687 	sel	r6, r5, r7
1a004a72:	b98e      	cbnz	r6, 1a004a98 <memchr+0x78>
1a004a74:	d1ee      	bne.n	1a004a54 <memchr+0x34>
1a004a76:	bcf0      	pop	{r4, r5, r6, r7}
1a004a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004a7c:	f002 0207 	and.w	r2, r2, #7
1a004a80:	b132      	cbz	r2, 1a004a90 <memchr+0x70>
1a004a82:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004a86:	3a01      	subs	r2, #1
1a004a88:	ea83 0301 	eor.w	r3, r3, r1
1a004a8c:	b113      	cbz	r3, 1a004a94 <memchr+0x74>
1a004a8e:	d1f8      	bne.n	1a004a82 <memchr+0x62>
1a004a90:	2000      	movs	r0, #0
1a004a92:	4770      	bx	lr
1a004a94:	3801      	subs	r0, #1
1a004a96:	4770      	bx	lr
1a004a98:	2d00      	cmp	r5, #0
1a004a9a:	bf06      	itte	eq
1a004a9c:	4635      	moveq	r5, r6
1a004a9e:	3803      	subeq	r0, #3
1a004aa0:	3807      	subne	r0, #7
1a004aa2:	f015 0f01 	tst.w	r5, #1
1a004aa6:	d107      	bne.n	1a004ab8 <memchr+0x98>
1a004aa8:	3001      	adds	r0, #1
1a004aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004aae:	bf02      	ittt	eq
1a004ab0:	3001      	addeq	r0, #1
1a004ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004ab6:	3001      	addeq	r0, #1
1a004ab8:	bcf0      	pop	{r4, r5, r6, r7}
1a004aba:	3801      	subs	r0, #1
1a004abc:	4770      	bx	lr
1a004abe:	bf00      	nop

1a004ac0 <memmove>:
1a004ac0:	4288      	cmp	r0, r1
1a004ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004ac4:	d90d      	bls.n	1a004ae2 <memmove+0x22>
1a004ac6:	188b      	adds	r3, r1, r2
1a004ac8:	4298      	cmp	r0, r3
1a004aca:	d20a      	bcs.n	1a004ae2 <memmove+0x22>
1a004acc:	1884      	adds	r4, r0, r2
1a004ace:	2a00      	cmp	r2, #0
1a004ad0:	d051      	beq.n	1a004b76 <memmove+0xb6>
1a004ad2:	4622      	mov	r2, r4
1a004ad4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a004ad8:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a004adc:	4299      	cmp	r1, r3
1a004ade:	d1f9      	bne.n	1a004ad4 <memmove+0x14>
1a004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004ae2:	2a0f      	cmp	r2, #15
1a004ae4:	d948      	bls.n	1a004b78 <memmove+0xb8>
1a004ae6:	ea41 0300 	orr.w	r3, r1, r0
1a004aea:	079b      	lsls	r3, r3, #30
1a004aec:	d146      	bne.n	1a004b7c <memmove+0xbc>
1a004aee:	f100 0410 	add.w	r4, r0, #16
1a004af2:	f101 0310 	add.w	r3, r1, #16
1a004af6:	4615      	mov	r5, r2
1a004af8:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a004afc:	f844 6c10 	str.w	r6, [r4, #-16]
1a004b00:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a004b04:	f844 6c0c 	str.w	r6, [r4, #-12]
1a004b08:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a004b0c:	f844 6c08 	str.w	r6, [r4, #-8]
1a004b10:	3d10      	subs	r5, #16
1a004b12:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a004b16:	f844 6c04 	str.w	r6, [r4, #-4]
1a004b1a:	2d0f      	cmp	r5, #15
1a004b1c:	f103 0310 	add.w	r3, r3, #16
1a004b20:	f104 0410 	add.w	r4, r4, #16
1a004b24:	d8e8      	bhi.n	1a004af8 <memmove+0x38>
1a004b26:	f1a2 0310 	sub.w	r3, r2, #16
1a004b2a:	f023 030f 	bic.w	r3, r3, #15
1a004b2e:	f002 0e0f 	and.w	lr, r2, #15
1a004b32:	3310      	adds	r3, #16
1a004b34:	f1be 0f03 	cmp.w	lr, #3
1a004b38:	4419      	add	r1, r3
1a004b3a:	4403      	add	r3, r0
1a004b3c:	d921      	bls.n	1a004b82 <memmove+0xc2>
1a004b3e:	1f1e      	subs	r6, r3, #4
1a004b40:	460d      	mov	r5, r1
1a004b42:	4674      	mov	r4, lr
1a004b44:	3c04      	subs	r4, #4
1a004b46:	f855 7b04 	ldr.w	r7, [r5], #4
1a004b4a:	f846 7f04 	str.w	r7, [r6, #4]!
1a004b4e:	2c03      	cmp	r4, #3
1a004b50:	d8f8      	bhi.n	1a004b44 <memmove+0x84>
1a004b52:	f1ae 0404 	sub.w	r4, lr, #4
1a004b56:	f024 0403 	bic.w	r4, r4, #3
1a004b5a:	3404      	adds	r4, #4
1a004b5c:	4421      	add	r1, r4
1a004b5e:	4423      	add	r3, r4
1a004b60:	f002 0203 	and.w	r2, r2, #3
1a004b64:	b162      	cbz	r2, 1a004b80 <memmove+0xc0>
1a004b66:	3b01      	subs	r3, #1
1a004b68:	440a      	add	r2, r1
1a004b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004b72:	428a      	cmp	r2, r1
1a004b74:	d1f9      	bne.n	1a004b6a <memmove+0xaa>
1a004b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004b78:	4603      	mov	r3, r0
1a004b7a:	e7f3      	b.n	1a004b64 <memmove+0xa4>
1a004b7c:	4603      	mov	r3, r0
1a004b7e:	e7f2      	b.n	1a004b66 <memmove+0xa6>
1a004b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004b82:	4672      	mov	r2, lr
1a004b84:	e7ee      	b.n	1a004b64 <memmove+0xa4>
1a004b86:	bf00      	nop

1a004b88 <_realloc_r>:
1a004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004b8a:	4614      	mov	r4, r2
1a004b8c:	b1f9      	cbz	r1, 1a004bce <_realloc_r+0x46>
1a004b8e:	b1c2      	cbz	r2, 1a004bc2 <_realloc_r+0x3a>
1a004b90:	4606      	mov	r6, r0
1a004b92:	460d      	mov	r5, r1
1a004b94:	f000 f820 	bl	1a004bd8 <_malloc_usable_size_r>
1a004b98:	4284      	cmp	r4, r0
1a004b9a:	d801      	bhi.n	1a004ba0 <_realloc_r+0x18>
1a004b9c:	4628      	mov	r0, r5
1a004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004ba0:	4621      	mov	r1, r4
1a004ba2:	4630      	mov	r0, r6
1a004ba4:	f7fe ffc4 	bl	1a003b30 <_malloc_r>
1a004ba8:	4607      	mov	r7, r0
1a004baa:	b170      	cbz	r0, 1a004bca <_realloc_r+0x42>
1a004bac:	4622      	mov	r2, r4
1a004bae:	4629      	mov	r1, r5
1a004bb0:	f7fe fe8e 	bl	1a0038d0 <memcpy>
1a004bb4:	4629      	mov	r1, r5
1a004bb6:	4630      	mov	r0, r6
1a004bb8:	463d      	mov	r5, r7
1a004bba:	f7fe ff71 	bl	1a003aa0 <_free_r>
1a004bbe:	4628      	mov	r0, r5
1a004bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004bc2:	f7fe ff6d 	bl	1a003aa0 <_free_r>
1a004bc6:	4625      	mov	r5, r4
1a004bc8:	e7e8      	b.n	1a004b9c <_realloc_r+0x14>
1a004bca:	4605      	mov	r5, r0
1a004bcc:	e7e6      	b.n	1a004b9c <_realloc_r+0x14>
1a004bce:	4611      	mov	r1, r2
1a004bd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a004bd4:	f7fe bfac 	b.w	1a003b30 <_malloc_r>

1a004bd8 <_malloc_usable_size_r>:
1a004bd8:	f851 0c04 	ldr.w	r0, [r1, #-4]
1a004bdc:	2800      	cmp	r0, #0
1a004bde:	f1a0 0004 	sub.w	r0, r0, #4
1a004be2:	bfbc      	itt	lt
1a004be4:	580b      	ldrlt	r3, [r1, r0]
1a004be6:	18c0      	addlt	r0, r0, r3
1a004be8:	4770      	bx	lr
1a004bea:	bf00      	nop
1a004bec:	6b736154 	.word	0x6b736154
1a004bf0:	00003120 	.word	0x00003120
1a004bf4:	6b736154 	.word	0x6b736154
1a004bf8:	ff003220 	.word	0xff003220
1a004bfc:	6b736154 	.word	0x6b736154
1a004c00:	69203120 	.word	0x69203120
1a004c04:	75722073 	.word	0x75722073
1a004c08:	6e696e6e 	.word	0x6e696e6e
1a004c0c:	000a0d67 	.word	0x000a0d67
1a004c10:	6b736154 	.word	0x6b736154
1a004c14:	69203220 	.word	0x69203220
1a004c18:	75722073 	.word	0x75722073
1a004c1c:	6e696e6e 	.word	0x6e696e6e
1a004c20:	000a0d67 	.word	0x000a0d67
1a004c24:	6c707041 	.word	0x6c707041
1a004c28:	74616369 	.word	0x74616369
1a004c2c:	206e6f69 	.word	0x206e6f69
1a004c30:	6c6c614d 	.word	0x6c6c614d
1a004c34:	4620636f 	.word	0x4620636f
1a004c38:	656c6961 	.word	0x656c6961
1a004c3c:	6f482064 	.word	0x6f482064
1a004c40:	0d216b6f 	.word	0x0d216b6f
1a004c44:	00000000 	.word	0x00000000
1a004c48:	7362696c 	.word	0x7362696c
1a004c4c:	6572662f 	.word	0x6572662f
1a004c50:	6f747265 	.word	0x6f747265
1a004c54:	6f732f73 	.word	0x6f732f73
1a004c58:	65637275 	.word	0x65637275
1a004c5c:	6f6f682f 	.word	0x6f6f682f
1a004c60:	632e736b 	.word	0x632e736b
1a004c64:	ffffff00 	.word	0xffffff00
1a004c68:	70410a0d 	.word	0x70410a0d
1a004c6c:	63696c70 	.word	0x63696c70
1a004c70:	6f697461 	.word	0x6f697461
1a004c74:	7453206e 	.word	0x7453206e
1a004c78:	206b6361 	.word	0x206b6361
1a004c7c:	7265764f 	.word	0x7265764f
1a004c80:	776f6c66 	.word	0x776f6c66
1a004c84:	6f202121 	.word	0x6f202121
1a004c88:	6154206e 	.word	0x6154206e
1a004c8c:	203a6b73 	.word	0x203a6b73
1a004c90:	0a0d7325 	.word	0x0a0d7325
1a004c94:	ffffff00 	.word	0xffffff00
1a004c98:	41760a0d 	.word	0x41760a0d
1a004c9c:	72657373 	.word	0x72657373
1a004ca0:	6c614374 	.word	0x6c614374
1a004ca4:	2864656c 	.word	0x2864656c
1a004ca8:	200a0d29 	.word	0x200a0d29
1a004cac:	4c4c2020 	.word	0x4c4c2020
1a004cb0:	20656e69 	.word	0x20656e69
1a004cb4:	626d754e 	.word	0x626d754e
1a004cb8:	3d207265 	.word	0x3d207265
1a004cbc:	0d642520 	.word	0x0d642520
1a004cc0:	2020200a 	.word	0x2020200a
1a004cc4:	656c6946 	.word	0x656c6946
1a004cc8:	6d614e20 	.word	0x6d614e20
1a004ccc:	203d2065 	.word	0x203d2065
1a004cd0:	0a0d7325 	.word	0x0a0d7325
1a004cd4:	ff000a0d 	.word	0xff000a0d
1a004cd8:	454c4449 	.word	0x454c4449
1a004cdc:	ffffff00 	.word	0xffffff00
1a004ce0:	51726d54 	.word	0x51726d54
1a004ce4:	ffffff00 	.word	0xffffff00
1a004ce8:	20726d54 	.word	0x20726d54
1a004cec:	00637653 	.word	0x00637653

1a004cf0 <keys>:
1a004cf0:	27262524 ff007325                       $%&'%s..

1a004cf8 <ExtRateIn>:
1a004cf8:	00000000                                ....

1a004cfc <GpioButtons>:
1a004cfc:	08000400 09010900                       ........

1a004d04 <GpioLeds>:
1a004d04:	01050005 0e000205 0c010b01              ............

1a004d10 <GpioPorts>:
1a004d10:	03030003 0f050403 05031005 07030603     ................
1a004d20:	ffff0802                                ....

1a004d24 <OscRateIn>:
1a004d24:	00b71b00                                ....

1a004d28 <InitClkStates>:
1a004d28:	01010f01                                ....

1a004d2c <pinmuxing>:
1a004d2c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004d3c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004d4c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004d5c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004d6c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004d7c:	00d50301 00d50401 00160107 00560207     ..............V.
1a004d8c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004d9c:	00570206                                ..W.

1a004da0 <UART_BClock>:
1a004da0:	01a201c2 01620182                       ......b.

1a004da8 <UART_PClock>:
1a004da8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004db8:	ffff00ff                                ....

1a004dbc <periph_to_base>:
1a004dbc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004dcc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004ddc:	000100e0 01000100 01200003 00060120     .......... . ...
1a004dec:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004dfc:	01820013 00120182 01a201a2 01c20011     ................
1a004e0c:	001001c2 01e201e2 0202000f 000e0202     ................
1a004e1c:	02220222 0223000d 001c0223              "."...#.#...

1a004e28 <InitClkStates>:
1a004e28:	00010100 00010909 0001090a 01010701     ................
1a004e38:	00010902 00010906 0101090c 0001090d     ................
1a004e48:	0001090e 0001090f 00010910 00010911     ................
1a004e58:	00010912 00010913 00011114 00011119     ................
1a004e68:	0001111a 0001111b                       ........

1a004e70 <gpioPinsInit>:
1a004e70:	02000104 00050701 05010d03 04080100     ................
1a004e80:	02020002 02000304 00000403 04070002     ................
1a004e90:	030c0300 09050402 05040103 04030208     ................
1a004ea0:	04020305 06040504 0802000c 03000b06     ................
1a004eb0:	00090607 07060503 060f0504 03030004     ................
1a004ec0:	02000404 00050404 06040502 04060200     ................
1a004ed0:	0c050408 05040a04 0003010e 14010a00     ................
1a004ee0:	010f0000 0d000012 00001101 0010010c     ................
1a004ef0:	07070300 000f0300 01000001 00000000     ................
1a004f00:	000a0600 08060603 06100504 04030005     ................
1a004f10:	03000106 04090400 04010d05 010b0000     ................
1a004f20:	0200000f 00000001 00010104 02010800     ................
1a004f30:	01090000 09010006 05040002 04010200     ................
1a004f40:	02020105 02020504 0e00000a 01000b02     ................
1a004f50:	000c020b ffff0c01                       ........

1a004f58 <__sf_fake_stderr>:
	...

1a004f78 <__sf_fake_stdout>:
	...

1a004f98 <__sf_fake_stdin>:
	...

1a004fb8 <_global_impure_ptr>:
1a004fb8:	10000044 ffff0043 2b302d23 00000020     D...C...#-0+ ...
1a004fc8:	004c6c68 45676665 ff004746 33323130     hlL.efgEFG..0123
1a004fd8:	37363534 42413938 46454443 00000000     456789ABCDEF....
1a004fe8:	33323130 37363534 62613938 66656463     0123456789abcdef
1a004ff8:	00000000                                ....
