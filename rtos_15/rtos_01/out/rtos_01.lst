
examples/c/td3/tp_rtos_15/rtos_01/out/rtos_01.elf:     file format elf32-littlearm
examples/c/td3/tp_rtos_15/rtos_01/out/rtos_01.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0003f5

Program Header:
0x70000001 off    0x00015374 vaddr 0x1a005374 paddr 0x1a005374 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002b70 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000537c memsz 0x0000537c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00537c align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005370  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a00537c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002b70  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a005370  1a005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005374  1a005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002c14  10002c14  000200a4  2**2
                  CONTENTS
 19 .debug_info   00032a07  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007593  00000000  00000000  00052aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000dee7  00000000  00000000  0005a03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001128  00000000  00000000  00067f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001318  00000000  00000000  00069050  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000e5ad  00000000  00000000  0006a368  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00011b3e  00000000  00000000  00078915  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00030c3f  00000000  00000000  0008a453  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000031  00000000  00000000  000bb092  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000bb0c3  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002b00  00000000  00000000  000bb0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005370 l    d  .init_array	00000000 .init_array
1a005374 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c14 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
1a000300 l     F .text	0000001c vFatalError
1a00031c l     F .text	00000028 vTask2
1a000344 l     F .text	00000030 vTask1
00000000 l    df *ABS*	00000000 system.c
100000a4 l     O .bss	00000004 heap_end.5622
00000000 l    df *ABS*	00000000 heap_4.c
1a000548 l     F .text	00000064 prvHeapInit
1a0005ac l     F .text	00000058 prvInsertBlockIntoFreeList
100000a8 l     O .bss	00000004 pxEnd
100000ac l     O .bss	00002000 ucHeap
100020ac l     O .bss	00000004 xBlockAllocatedBit
100020b0 l     O .bss	00000004 xFreeBytesRemaining
100020b4 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020b8 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000784 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000796 l     F .text	0000001e prvIsQueueFull
1a0007b4 l     F .text	0000001a prvIsQueueEmpty
1a0007ce l     F .text	00000076 prvCopyDataToQueue
1a000844 l     F .text	00000024 prvCopyDataFromQueue
1a000868 l     F .text	0000006e prvUnlockQueue
1a000958 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c0 l     O .bss	00000190 uxIdleTaskStack.10588
10002250 l     O .bss	00000640 uxTimerTaskStack.10595
10002890 l     O .bss	00000060 xIdleTaskTCB.10587
100028f0 l     O .bss	00000060 xTimerTaskTCB.10594
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001170 l     F .text	00000034 prvResetNextTaskUnblockTime
1a0011a4 l     F .text	00000092 prvInitialiseNewTask
1a001238 l     F .text	00000068 prvInitialiseTaskLists
1a0012a0 l     F .text	000000ac prvAddNewTaskToReadyList
1a00134c l     F .text	0000003a prvDeleteTCB
1a001388 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0013d4 l     F .text	00000028 prvIdleTask
1a0013fc l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002954 l     O .bss	00000004 pxDelayedTaskList
10002958 l     O .bss	00000004 pxOverflowDelayedTaskList
1000295c l     O .bss	0000008c pxReadyTasksLists
100029e8 l     O .bss	00000004 uxCurrentNumberOfTasks
100029ec l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029f0 l     O .bss	00000004 uxPendedTicks
100029f4 l     O .bss	00000004 uxSchedulerSuspended
100029f8 l     O .bss	00000004 uxTaskNumber
100029fc l     O .bss	00000004 uxTopReadyPriority
10002a00 l     O .bss	00000014 xDelayedTaskList1
10002a14 l     O .bss	00000014 xDelayedTaskList2
10002a28 l     O .bss	00000004 xNextTaskUnblockTime
10002a2c l     O .bss	00000004 xNumOfOverflows
10002a30 l     O .bss	00000014 xPendingReadyList
10002a44 l     O .bss	00000004 xSchedulerRunning
10002a48 l     O .bss	00000014 xSuspendedTaskList
10002a5c l     O .bss	00000014 xTasksWaitingTermination
10002a70 l     O .bss	00000004 xTickCount
10002a74 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001d94 l     F .text	00000020 prvGetNextExpireTime
1a001db4 l     F .text	00000048 prvInsertTimerInActiveList
1a001dfc l     F .text	00000070 prvCheckForValidListAndQueue
1a0021bc l     F .text	00000016 prvTimerTask
1a001f48 l     F .text	00000078 prvSwitchTimerLists
1a001fc0 l     F .text	0000002c prvSampleTimeNow
1a001fec l     F .text	00000060 prvProcessExpiredTimer
1a00204c l     F .text	00000074 prvProcessTimerOrBlockTask
1a0020c0 l     F .text	000000fc prvProcessReceivedCommands
10002a78 l     O .bss	00000004 pxCurrentTimerList
10002a7c l     O .bss	00000004 pxOverflowTimerList
10002a80 l     O .bss	000000a0 ucStaticTimerQueueStorage.11667
10002b20 l     O .bss	00000014 xActiveTimerList1
10002b34 l     O .bss	00000014 xActiveTimerList2
10002b48 l     O .bss	00000004 xLastTime.11616
10002b4c l     O .bss	00000050 xStaticTimerQueue.11666
10002b9c l     O .bss	00000004 xTimerQueue
10002ba0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0021d4 l     F .text	00000040 prvTaskExitError
1a002214 l     F .text	00000022 prvPortStartFirstTask
1a00223c l     F .text	0000000e vPortEnableVFP
1a0022a0 l       .text	00000000 pxCurrentTCBConst2
1a0023a0 l       .text	00000000 pxCurrentTCBConst
10002ba4 l     O .bss	00000001 ucMaxSysCallPriority
10002ba8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 conio.c
10002bac l     O .bss	00000004 keyIdx
1a005064 l     O .text	00000004 keys
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 supporting_functions.c
00000000 l    df *ABS*	00000000 board.c
1a002608 l     F .text	00000044 Board_LED_Init
1a00264c l     F .text	00000040 Board_TEC_Init
1a00268c l     F .text	00000040 Board_GPIO_Init
1a0026cc l     F .text	00000030 Board_ADC_Init
1a0026fc l     F .text	00000038 Board_SPI_Init
1a002734 l     F .text	00000024 Board_I2C_Init
1a005070 l     O .text	00000008 GpioButtons
1a005078 l     O .text	0000000c GpioLeds
1a005084 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00509c l     O .text	00000004 InitClkStates
1a0050a0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002910 l     F .text	0000002c Chip_UART_GetIndex
1a005114 l     O .text	00000008 UART_BClock
1a00511c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002a78 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002a8c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002b54 l     F .text	000000a0 pll_calc_divs
1a002bf4 l     F .text	0000010c pll_get_frac
1a002d00 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002f74 l     F .text	00000022 Chip_Clock_GetDivRate
10002bb4 l     O .bss	00000008 audio_usb_pll_freq
1a005130 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00519c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0032b4 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0032c8 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0033a8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002bbc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003920 l     F .text	00000004 __fp_unlock
1a003930 l     F .text	00000004 __fp_lock
1a0039ec l     F .text	00000110 __sinit.part.1
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003f5c l     F .text	00000032 __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005374 l       .init_array	00000000 __init_array_end
1a005370 l       .bss_RAM5	00000000 __preinit_array_end
1a005370 l       .init_array	00000000 __init_array_start
1a005370 l       .bss_RAM5	00000000 __preinit_array_start
1a004f48 g     F .text	00000012 _malloc_usable_size_r
1a002d98 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000494 g     F .text	00000012 _isatty_r
1a004688 g     F .text	000000e0 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a0004a6 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00230c g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004654 g     F .text	00000034 printf
1a002856 g     F .text	00000008 __stdio_init
1a0047dc g     F .text	00000020 __sseek
1a003b10 g     F .text	00000008 __sinit
10000004 g     O .data	00000004 xKeyPressesStopApplication
1a004804 g     F .text	000000b4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000ff8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003934 g     F .text	0000002e __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002b32 g     F .text	0000000c Chip_ADC_SetResolution
1a0023a4 g     F .text	0000002c SysTick_Handler
1a0003f0  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002790 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a004e30 g     F .text	000000c6 memmove
1a003afc g     F .text	00000014 _cleanup
1a002340 g     F .text	00000064 PendSV_Handler
1a000bf0 g     F .text	000000de xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00537c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002950 g     O .bss	00000004 pxCurrentTCB
1a00048a g     F .text	0000000a _fstat_r
53ff749a g       *ABS*	00000000 __valid_user_code_checksum
1a00479c g     F .text	00000004 __seofread
1a00537c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001a74 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a003016 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002408 g     F .text	00000110 xPortStartScheduler
1a001608 g     F .text	00000024 vTaskEndScheduler
1a003c40 g     F .text	00000134 memcpy
1a001980 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003924 g     F .text	0000000c _cleanup_r
1a0023d0  w    F .text	00000038 vPortSetupTimerInterrupt
1a003460 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c14 g       .noinit	00000000 _noinit
1a004768 g     F .text	00000010 puts
1a000714 g     F .text	00000070 vPortFree
10002c0c g     O .bss	00000004 SystemCoreClock
1a00293c g     F .text	00000054 Chip_UART_Init
1a000e2c g     F .text	000001a4 xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002518 g     F .text	0000005c vPortValidateInterruptPriority
1a004628 g     F .text	0000002c _printf_r
1a000180  w    F .text	00000002 UsageFault_Handler
1a003094 g     F .text	0000004c Chip_Clock_GetRate
1a001066 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002898 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0049bc g     F .text	000002f0 __sfvwrite_r
1a003490 g     F .text	000002dc .hidden __udivmoddi4
1a000528 g     F .text	00000020 _sbrk_r
1a00506c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0004b0 g     F .text	00000050 _read_r
1a001060 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000cd0 g     F .text	0000015c xQueueReceive
10002bcc g     O .bss	00000040 xQueueRegistry
1a0038fc g     F .text	00000024 fflush
1a0010f4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005374 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00532c g     O .text	00000004 _global_impure_ptr
1a004ef8 g     F .text	00000050 _realloc_r
1a003bf0 g     F .text	00000050 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000604 g     F .text	00000110 pvPortMalloc
1a003b28 g     F .text	00000014 __fp_lock_all
1a002814 g     F .text	00000030 Board_Init
1a00047e  w    F .text	00000002 _init
1a0022a4 g     F .text	00000024 vPortEndScheduler
1a00104a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00163c g     F .text	0000000c xTaskGetTickCount
1a000a68 g     F .text	00000188 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c14 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0003f4 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00327c g     F .text	00000038 Chip_I2C_SetClockRate
1a001bf8 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002d4c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0019e8 g     F .text	0000008c xTaskRemoveFromEventList
1a001138  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0052cc g     O .text	00000020 __sf_fake_stderr
1a003258 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002f08 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0051e4 g     O .text	000000e6 gpioPinsInit
1a00110c  w    F .text	0000002c vAssertCalled
1a001d78 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a0032e0 g     F .text	00000012 Chip_SSP_SetClockRate
1a003f90 g     F .text	0000002c __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0025c0 g     F .text	00000048 vPrintString
1a003b18 g     F .text	00000002 __sfp_lock_acquire
1a004d90 g     F .text	00000000 memchr
1a001a8c g     F .text	00000080 xTaskCheckForTimeOut
1a003e10 g     F .text	00000090 _free_r
1a002ff0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001b38 g     F .text	000000c0 xTaskPriorityInherit
10002bc8 g     O .bss	00000004 xBinarySemaphore
100000a4 g       .bss	00000000 _bss
1a002b00 g     F .text	00000032 Chip_ADC_SetSampleRate
10002bb0 g     O .bss	00000004 freeRtosInterruptCallback
1a00162c g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0032f2 g     F .text	0000003e Chip_SSP_SetBitRate
1a0010b2 g     F .text	00000028 uxListRemove
1a003234 g     F .text	00000002 Chip_GPIO_Init
1a005098 g     O .text	00000004 OscRateIn
1a001494 g     F .text	00000072 xTaskCreateStatic
10002c14 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0018b4 g     F .text	000000cc vTaskSwitchContext
1a004628 g     F .text	0000002c _iprintf_r
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00097a g     F .text	000000a0 xQueueGenericCreateStatic
1a0019b0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000480 g     F .text	0000000a _close_r
1a0010dc g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001edc g     F .text	0000006c xTimerGenericCommand
1a0048c8 g     F .text	000000f4 __swsetup_r
1a001154  w    F .text	0000001c vApplicationStackOverflowHook
1a00376c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003964 g     F .text	00000088 __sfp
1a003b24 g     F .text	00000002 __sinit_lock_release
1a002574 g     F .text	0000002c _kbhit
1a004778 g     F .text	00000022 __sread
1a003444 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00277c g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003898 g     F .text	00000064 _fflush_r
1a00530c g     O .text	00000020 __sf_fake_stdin
1a002db4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003d74 g     F .text	0000009a memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000374 g     F .text	0000007c main
1a0048b8 g     F .text	00000010 __swbuf
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a00107e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002280 g     F .text	00000024 SVC_Handler
1a0047fc g     F .text	00000008 __sclose
1a001e6c g     F .text	00000070 xTimerCreateTimerTask
1a0027fc g     F .text	00000016 Board_LED_Toggle
1a003ea0 g     F .text	000000bc _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003024 g     F .text	0000003c Chip_Clock_EnableOpts
1a00284e g     F .text	00000008 __stdio_getchar
1a003b50 g     F .text	0000004a _fwalk
1a000a1a g     F .text	0000004e xQueueGenericCreate
1a002dd0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0027d0 g     F .text	0000002c Board_LED_Test
1a002e88 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00423c g     F .text	00000018 vfiprintf
1a003368 g     F .text	00000040 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00047c  w    F .text	00000002 _fini
1a004654 g     F .text	00000034 iprintf
1a001768 g     F .text	000000fc xTaskResumeAll
1a00156c g     F .text	0000009c vTaskStartScheduler
1a002ac0 g     F .text	00000040 Chip_ADC_Init
10002c10 g     O .bss	00000004 g_pUsbApi
1a002860 g     F .text	00000038 Board_SetupMuxing
1a002990 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000500 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004254 g     F .text	00000132 _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a003770 g     F .text	00000128 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a003b3c g     F .text	00000014 __fp_unlock_all
1a001b0c g     F .text	0000000c vTaskMissedYield
10002c14 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003330 g     F .text	00000038 Chip_SSP_Init
1a000fd0 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001648 g     F .text	00000120 xTaskIncrementTick
1a004cac g     F .text	0000005a __swhatbuf_r
1a0025a0 g     F .text	00000020 DAC_IRQHandler
1a002758 g     F .text	00000024 Board_Debug_Init
1a002844 g     F .text	0000000a __stdio_putchar
1a0008d8 g     F .text	00000080 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a003238 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001506 g     F .text	00000066 xTaskCreate
1a0030e0 g     F .text	00000154 Chip_SetupCoreClock
1a0047a0 g     F .text	0000003c __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a003fd8 g     F .text	00000264 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003b9c g     F .text	00000052 _fwalk_reent
1a002b40 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001864 g     F .text	00000050 vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003b1c g     F .text	00000002 __sfp_lock_release
1a0052ec g     O .text	00000020 __sf_fake_stdout
1a001b18 g     F .text	00000020 xTaskGetSchedulerState
1a001cac g     F .text	000000cc vTaskPriorityDisinheritAfterTimeout
1a00376c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a004d08 g     F .text	00000088 __smakebuf_r
1a002250 g     F .text	0000002c pxPortInitialiseStack
1a004388 g     F .text	000002a0 _printf_i
1a003060 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002bc4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a003fbc g     F .text	0000001a __sprint_r
1a0027ac g     F .text	00000024 Board_LED_Set
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0033dc g     F .text	00000068 gpioRead
1a0022c8 g     F .text	00000044 vPortEnterCritical
10002bc0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003fd8 g     F .text	00000264 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002f98 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00423c g     F .text	00000018 vfprintf
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a003b20 g     F .text	00000002 __sinit_lock_acquire
1a002904 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 f5 03 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 9a 74 ff 53     }............t.S
	...
1a00002c:	81 22 00 1a 85 01 00 1a 00 00 00 00 41 23 00 1a     ."..........A#..
1a00003c:	a5 23 00 1a                                         .#..

1a000040 <g_pfnVendorVectors>:
1a000040:	a1 25 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .%..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	45 34 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     E4..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00537c 	.word	0x1a00537c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a00537c 	.word	0x1a00537c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00537c 	.word	0x1a00537c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00537c 	.word	0x1a00537c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00537c 	.word	0x1a00537c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002b70 	.word	0x00002b70
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <vFatalError>:
     xSemaphoreGive( xBinarySemaphore );
  }
}

static void vFatalError(void *pvParameters)
{
1a000300:	b508      	push	{r3, lr}
  const TickType_t xDelay1000ms = pdMS_TO_TICKS( 1000UL );

  for( ;; )
  {
    vPrintString( "Fatal Error. Semaphore coudn't be created\r\n" );
1a000302:	4805      	ldr	r0, [pc, #20]	; (1a000318 <vFatalError+0x18>)
1a000304:	f002 f95c 	bl	1a0025c0 <vPrintString>
    Board_LED_Toggle(4); /* Red */
1a000308:	2004      	movs	r0, #4
1a00030a:	f002 fa77 	bl	1a0027fc <Board_LED_Toggle>
    vTaskDelay( xDelay1000ms );
1a00030e:	2064      	movs	r0, #100	; 0x64
1a000310:	f001 faa8 	bl	1a001864 <vTaskDelay>
1a000314:	e7f5      	b.n	1a000302 <vFatalError+0x2>
1a000316:	bf00      	nop
1a000318:	1a004f5c 	.word	0x1a004f5c

1a00031c <vTask2>:
{
1a00031c:	b508      	push	{r3, lr}
     xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
1a00031e:	4c08      	ldr	r4, [pc, #32]	; (1a000340 <vTask2+0x24>)
1a000320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000324:	6820      	ldr	r0, [r4, #0]
1a000326:	f000 fd81 	bl	1a000e2c <xQueueSemaphoreTake>
     Board_LED_Toggle(2); /* Blue (RGB) */
1a00032a:	2002      	movs	r0, #2
1a00032c:	f002 fa66 	bl	1a0027fc <Board_LED_Toggle>
     xSemaphoreGive( xBinarySemaphore );
1a000330:	2300      	movs	r3, #0
1a000332:	461a      	mov	r2, r3
1a000334:	4619      	mov	r1, r3
1a000336:	6820      	ldr	r0, [r4, #0]
1a000338:	f000 fb96 	bl	1a000a68 <xQueueGenericSend>
1a00033c:	e7ef      	b.n	1a00031e <vTask2+0x2>
1a00033e:	bf00      	nop
1a000340:	10002bc8 	.word	0x10002bc8

1a000344 <vTask1>:
{
1a000344:	b510      	push	{r4, lr}
      xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
1a000346:	4c09      	ldr	r4, [pc, #36]	; (1a00036c <vTask1+0x28>)
1a000348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00034c:	6820      	ldr	r0, [r4, #0]
1a00034e:	f000 fd6d 	bl	1a000e2c <xQueueSemaphoreTake>
      printf( "vTask1 running\n" );
1a000352:	4807      	ldr	r0, [pc, #28]	; (1a000370 <vTask1+0x2c>)
1a000354:	f004 fa08 	bl	1a004768 <puts>
      vTaskDelay( xDelay1000ms );
1a000358:	2064      	movs	r0, #100	; 0x64
1a00035a:	f001 fa83 	bl	1a001864 <vTaskDelay>
      xSemaphoreGive( xBinarySemaphore );
1a00035e:	2300      	movs	r3, #0
1a000360:	461a      	mov	r2, r3
1a000362:	4619      	mov	r1, r3
1a000364:	6820      	ldr	r0, [r4, #0]
1a000366:	f000 fb7f 	bl	1a000a68 <xQueueGenericSend>
1a00036a:	e7ec      	b.n	1a000346 <vTask1+0x2>
1a00036c:	10002bc8 	.word	0x10002bc8
1a000370:	1a004f88 	.word	0x1a004f88

1a000374 <main>:
{
1a000374:	b510      	push	{r4, lr}
1a000376:	b082      	sub	sp, #8
  vSemaphoreCreateBinary ( xBinarySemaphore );
1a000378:	2203      	movs	r2, #3
1a00037a:	2100      	movs	r1, #0
1a00037c:	2001      	movs	r0, #1
1a00037e:	f000 fb4c 	bl	1a000a1a <xQueueGenericCreate>
1a000382:	4b17      	ldr	r3, [pc, #92]	; (1a0003e0 <main+0x6c>)
1a000384:	6018      	str	r0, [r3, #0]
1a000386:	b120      	cbz	r0, 1a000392 <main+0x1e>
1a000388:	2300      	movs	r3, #0
1a00038a:	461a      	mov	r2, r3
1a00038c:	4619      	mov	r1, r3
1a00038e:	f000 fb6b 	bl	1a000a68 <xQueueGenericSend>
  if( xBinarySemaphore != NULL )
1a000392:	4b13      	ldr	r3, [pc, #76]	; (1a0003e0 <main+0x6c>)
1a000394:	681b      	ldr	r3, [r3, #0]
1a000396:	b1a3      	cbz	r3, 1a0003c2 <main+0x4e>
    xTaskCreate( vTask1, NULL, configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
1a000398:	2400      	movs	r4, #0
1a00039a:	9401      	str	r4, [sp, #4]
1a00039c:	2301      	movs	r3, #1
1a00039e:	9300      	str	r3, [sp, #0]
1a0003a0:	4623      	mov	r3, r4
1a0003a2:	2264      	movs	r2, #100	; 0x64
1a0003a4:	4621      	mov	r1, r4
1a0003a6:	480f      	ldr	r0, [pc, #60]	; (1a0003e4 <main+0x70>)
1a0003a8:	f001 f8ad 	bl	1a001506 <xTaskCreate>
  	xTaskCreate( vTask2, NULL, configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL );
1a0003ac:	9401      	str	r4, [sp, #4]
1a0003ae:	2302      	movs	r3, #2
1a0003b0:	9300      	str	r3, [sp, #0]
1a0003b2:	4623      	mov	r3, r4
1a0003b4:	2264      	movs	r2, #100	; 0x64
1a0003b6:	4621      	mov	r1, r4
1a0003b8:	480b      	ldr	r0, [pc, #44]	; (1a0003e8 <main+0x74>)
1a0003ba:	f001 f8a4 	bl	1a001506 <xTaskCreate>
  	vTaskStartScheduler ();
1a0003be:	f001 f8d5 	bl	1a00156c <vTaskStartScheduler>
  xTaskCreate( vFatalError, NULL, configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
1a0003c2:	2400      	movs	r4, #0
1a0003c4:	9401      	str	r4, [sp, #4]
1a0003c6:	2301      	movs	r3, #1
1a0003c8:	9300      	str	r3, [sp, #0]
1a0003ca:	4623      	mov	r3, r4
1a0003cc:	2264      	movs	r2, #100	; 0x64
1a0003ce:	4621      	mov	r1, r4
1a0003d0:	4806      	ldr	r0, [pc, #24]	; (1a0003ec <main+0x78>)
1a0003d2:	f001 f898 	bl	1a001506 <xTaskCreate>
  vTaskStartScheduler();
1a0003d6:	f001 f8c9 	bl	1a00156c <vTaskStartScheduler>
}
1a0003da:	4620      	mov	r0, r4
1a0003dc:	b002      	add	sp, #8
1a0003de:	bd10      	pop	{r4, pc}
1a0003e0:	10002bc8 	.word	0x10002bc8
1a0003e4:	1a000345 	.word	0x1a000345
1a0003e8:	1a00031d 	.word	0x1a00031d
1a0003ec:	1a000301 	.word	0x1a000301

1a0003f0 <initialise_monitor_handles>:
{
1a0003f0:	4770      	bx	lr
1a0003f2:	Address 0x000000001a0003f2 is out of bounds.


1a0003f4 <Reset_Handler>:
void Reset_Handler(void) {
1a0003f4:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0003f6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0003f8:	4a19      	ldr	r2, [pc, #100]	; (1a000460 <Reset_Handler+0x6c>)
1a0003fa:	4b1a      	ldr	r3, [pc, #104]	; (1a000464 <Reset_Handler+0x70>)
1a0003fc:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0003fe:	4a1a      	ldr	r2, [pc, #104]	; (1a000468 <Reset_Handler+0x74>)
1a000400:	3304      	adds	r3, #4
1a000402:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000404:	2300      	movs	r3, #0
1a000406:	e005      	b.n	1a000414 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00040c:	4a17      	ldr	r2, [pc, #92]	; (1a00046c <Reset_Handler+0x78>)
1a00040e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000412:	3301      	adds	r3, #1
1a000414:	2b07      	cmp	r3, #7
1a000416:	d9f7      	bls.n	1a000408 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000418:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00041a:	4b15      	ldr	r3, [pc, #84]	; (1a000470 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00041c:	e007      	b.n	1a00042e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00041e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000422:	689a      	ldr	r2, [r3, #8]
1a000424:	6859      	ldr	r1, [r3, #4]
1a000426:	6818      	ldr	r0, [r3, #0]
1a000428:	f7ff feaf 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00042c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00042e:	4a11      	ldr	r2, [pc, #68]	; (1a000474 <Reset_Handler+0x80>)
1a000430:	4293      	cmp	r3, r2
1a000432:	d3f4      	bcc.n	1a00041e <Reset_Handler+0x2a>
1a000434:	e006      	b.n	1a000444 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000436:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000438:	6859      	ldr	r1, [r3, #4]
1a00043a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00043e:	f7ff feb3 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000442:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000444:	4a0c      	ldr	r2, [pc, #48]	; (1a000478 <Reset_Handler+0x84>)
1a000446:	4293      	cmp	r3, r2
1a000448:	d3f5      	bcc.n	1a000436 <Reset_Handler+0x42>
    SystemInit();
1a00044a:	f002 ff8d 	bl	1a003368 <SystemInit>
    __libc_init_array();
1a00044e:	f003 fbcf 	bl	1a003bf0 <__libc_init_array>
    initialise_monitor_handles();
1a000452:	f7ff ffcd 	bl	1a0003f0 <initialise_monitor_handles>
    main();
1a000456:	f7ff ff8d 	bl	1a000374 <main>
        __asm__ volatile("wfi");
1a00045a:	bf30      	wfi
1a00045c:	e7fd      	b.n	1a00045a <Reset_Handler+0x66>
1a00045e:	bf00      	nop
1a000460:	10df1000 	.word	0x10df1000
1a000464:	40053100 	.word	0x40053100
1a000468:	01dff7ff 	.word	0x01dff7ff
1a00046c:	e000e280 	.word	0xe000e280
1a000470:	1a000114 	.word	0x1a000114
1a000474:	1a000150 	.word	0x1a000150
1a000478:	1a000178 	.word	0x1a000178

1a00047c <_fini>:
void _fini(void) {}
1a00047c:	4770      	bx	lr

1a00047e <_init>:
void _init(void) {}
1a00047e:	4770      	bx	lr

1a000480 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000480:	2309      	movs	r3, #9
1a000482:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000488:	4770      	bx	lr

1a00048a <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00048a:	2358      	movs	r3, #88	; 0x58
1a00048c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00048e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000492:	4770      	bx	lr

1a000494 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000494:	2902      	cmp	r1, #2
1a000496:	d801      	bhi.n	1a00049c <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000498:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a00049a:	4770      	bx	lr
       SET_ERR(EBADF);
1a00049c:	2309      	movs	r3, #9
1a00049e:	6003      	str	r3, [r0, #0]
       return -1;
1a0004a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004a4:	4770      	bx	lr

1a0004a6 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0004a6:	2358      	movs	r3, #88	; 0x58
1a0004a8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004ae:	4770      	bx	lr

1a0004b0 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0004b0:	2902      	cmp	r1, #2
1a0004b2:	d820      	bhi.n	1a0004f6 <_read_r+0x46>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0004b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0004b8:	461d      	mov	r5, r3
1a0004ba:	4617      	mov	r7, r2
1a0004bc:	4606      	mov	r6, r0
  switch (fd) {
1a0004be:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0004c0:	42ac      	cmp	r4, r5
1a0004c2:	d212      	bcs.n	1a0004ea <_read_r+0x3a>
         int c = __stdio_getchar();
1a0004c4:	f002 f9c3 	bl	1a00284e <__stdio_getchar>
         if( c != -1 ){
1a0004c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0004cc:	d0f8      	beq.n	1a0004c0 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0004ce:	f104 0801 	add.w	r8, r4, #1
1a0004d2:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0004d4:	280d      	cmp	r0, #13
1a0004d6:	d003      	beq.n	1a0004e0 <_read_r+0x30>
1a0004d8:	280a      	cmp	r0, #10
1a0004da:	d001      	beq.n	1a0004e0 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0004dc:	4644      	mov	r4, r8
1a0004de:	e7ef      	b.n	1a0004c0 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0004e0:	f002 f9b5 	bl	1a00284e <__stdio_getchar>
               return i;
1a0004e4:	4640      	mov	r0, r8
1a0004e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
         }
      }
      SET_ERR(ENODEV);
1a0004ea:	2313      	movs	r3, #19
1a0004ec:	6033      	str	r3, [r6, #0]
      return -1;
1a0004ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  default:
      SET_ERR(ENODEV);
1a0004f6:	2313      	movs	r3, #19
1a0004f8:	6003      	str	r3, [r0, #0]
      return -1;
1a0004fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004fe:	4770      	bx	lr

1a000500 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000500:	2902      	cmp	r1, #2
1a000502:	d80c      	bhi.n	1a00051e <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000504:	b570      	push	{r4, r5, r6, lr}
1a000506:	461d      	mov	r5, r3
1a000508:	4616      	mov	r6, r2
   switch (fd) {
1a00050a:	2400      	movs	r4, #0
1a00050c:	e003      	b.n	1a000516 <_write_r+0x16>
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
           __stdio_putchar(((char*) b)[i]);
1a00050e:	5d30      	ldrb	r0, [r6, r4]
1a000510:	f002 f998 	bl	1a002844 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000514:	3401      	adds	r4, #1
1a000516:	42ac      	cmp	r4, r5
1a000518:	d3f9      	bcc.n	1a00050e <_write_r+0xe>
       return n;
1a00051a:	4628      	mov	r0, r5
1a00051c:	bd70      	pop	{r4, r5, r6, pc}
   default:
       SET_ERR(ENODEV);
1a00051e:	2313      	movs	r3, #19
1a000520:	6003      	str	r3, [r0, #0]
       return -1;
1a000522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000526:	4770      	bx	lr

1a000528 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000528:	4b05      	ldr	r3, [pc, #20]	; (1a000540 <_sbrk_r+0x18>)
1a00052a:	681b      	ldr	r3, [r3, #0]
1a00052c:	b123      	cbz	r3, 1a000538 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00052e:	4b04      	ldr	r3, [pc, #16]	; (1a000540 <_sbrk_r+0x18>)
1a000530:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000532:	4401      	add	r1, r0
1a000534:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000536:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000538:	4a02      	ldr	r2, [pc, #8]	; (1a000544 <_sbrk_r+0x1c>)
1a00053a:	4b01      	ldr	r3, [pc, #4]	; (1a000540 <_sbrk_r+0x18>)
1a00053c:	601a      	str	r2, [r3, #0]
1a00053e:	e7f6      	b.n	1a00052e <_sbrk_r+0x6>
1a000540:	100000a4 	.word	0x100000a4
1a000544:	10002c14 	.word	0x10002c14

1a000548 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000548:	4a12      	ldr	r2, [pc, #72]	; (1a000594 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00054a:	f012 0f07 	tst.w	r2, #7
1a00054e:	d01e      	beq.n	1a00058e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000550:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000552:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000556:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00055a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00055c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00055e:	480e      	ldr	r0, [pc, #56]	; (1a000598 <prvHeapInit+0x50>)
1a000560:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000562:	2100      	movs	r1, #0
1a000564:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000566:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000568:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00056a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00056e:	480b      	ldr	r0, [pc, #44]	; (1a00059c <prvHeapInit+0x54>)
1a000570:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000572:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000574:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000576:	1a99      	subs	r1, r3, r2
1a000578:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a00057a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00057c:	4b08      	ldr	r3, [pc, #32]	; (1a0005a0 <prvHeapInit+0x58>)
1a00057e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000580:	4b08      	ldr	r3, [pc, #32]	; (1a0005a4 <prvHeapInit+0x5c>)
1a000582:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000584:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000588:	4b07      	ldr	r3, [pc, #28]	; (1a0005a8 <prvHeapInit+0x60>)
1a00058a:	601a      	str	r2, [r3, #0]
1a00058c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00058e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a000592:	e7e4      	b.n	1a00055e <prvHeapInit+0x16>
1a000594:	100000ac 	.word	0x100000ac
1a000598:	100020b8 	.word	0x100020b8
1a00059c:	100000a8 	.word	0x100000a8
1a0005a0:	100020b4 	.word	0x100020b4
1a0005a4:	100020b0 	.word	0x100020b0
1a0005a8:	100020ac 	.word	0x100020ac

1a0005ac <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a0005ac:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0005ae:	4b13      	ldr	r3, [pc, #76]	; (1a0005fc <prvInsertBlockIntoFreeList+0x50>)
1a0005b0:	681a      	ldr	r2, [r3, #0]
1a0005b2:	4282      	cmp	r2, r0
1a0005b4:	d31b      	bcc.n	1a0005ee <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0005b6:	6859      	ldr	r1, [r3, #4]
1a0005b8:	185c      	adds	r4, r3, r1
1a0005ba:	42a0      	cmp	r0, r4
1a0005bc:	d103      	bne.n	1a0005c6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0005be:	6840      	ldr	r0, [r0, #4]
1a0005c0:	4401      	add	r1, r0
1a0005c2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a0005c4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0005c6:	6841      	ldr	r1, [r0, #4]
1a0005c8:	1844      	adds	r4, r0, r1
1a0005ca:	42a2      	cmp	r2, r4
1a0005cc:	d113      	bne.n	1a0005f6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0005ce:	4c0c      	ldr	r4, [pc, #48]	; (1a000600 <prvInsertBlockIntoFreeList+0x54>)
1a0005d0:	6824      	ldr	r4, [r4, #0]
1a0005d2:	42a2      	cmp	r2, r4
1a0005d4:	d00d      	beq.n	1a0005f2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0005d6:	6852      	ldr	r2, [r2, #4]
1a0005d8:	4411      	add	r1, r2
1a0005da:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0005dc:	681a      	ldr	r2, [r3, #0]
1a0005de:	6812      	ldr	r2, [r2, #0]
1a0005e0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0005e2:	4298      	cmp	r0, r3
1a0005e4:	d000      	beq.n	1a0005e8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0005e6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0005e8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0005ec:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0005ee:	4613      	mov	r3, r2
1a0005f0:	e7de      	b.n	1a0005b0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0005f2:	6004      	str	r4, [r0, #0]
1a0005f4:	e7f5      	b.n	1a0005e2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0005f6:	6002      	str	r2, [r0, #0]
1a0005f8:	e7f3      	b.n	1a0005e2 <prvInsertBlockIntoFreeList+0x36>
1a0005fa:	bf00      	nop
1a0005fc:	100020b8 	.word	0x100020b8
1a000600:	100000a8 	.word	0x100000a8

1a000604 <pvPortMalloc>:
{
1a000604:	b570      	push	{r4, r5, r6, lr}
1a000606:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000608:	f001 f810 	bl	1a00162c <vTaskSuspendAll>
		if( pxEnd == NULL )
1a00060c:	4b3c      	ldr	r3, [pc, #240]	; (1a000700 <pvPortMalloc+0xfc>)
1a00060e:	681b      	ldr	r3, [r3, #0]
1a000610:	b1bb      	cbz	r3, 1a000642 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000612:	4b3c      	ldr	r3, [pc, #240]	; (1a000704 <pvPortMalloc+0x100>)
1a000614:	681b      	ldr	r3, [r3, #0]
1a000616:	421c      	tst	r4, r3
1a000618:	d164      	bne.n	1a0006e4 <pvPortMalloc+0xe0>
			if( xWantedSize > 0 )
1a00061a:	b1ac      	cbz	r4, 1a000648 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
1a00061c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a00061e:	f014 0f07 	tst.w	r4, #7
1a000622:	d011      	beq.n	1a000648 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000624:	f024 0407 	bic.w	r4, r4, #7
1a000628:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a00062a:	f004 0307 	and.w	r3, r4, #7
1a00062e:	b15b      	cbz	r3, 1a000648 <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000630:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000634:	f383 8811 	msr	BASEPRI, r3
1a000638:	f3bf 8f6f 	isb	sy
1a00063c:	f3bf 8f4f 	dsb	sy
1a000640:	e7fe      	b.n	1a000640 <pvPortMalloc+0x3c>
			prvHeapInit();
1a000642:	f7ff ff81 	bl	1a000548 <prvHeapInit>
1a000646:	e7e4      	b.n	1a000612 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000648:	2c00      	cmp	r4, #0
1a00064a:	d04d      	beq.n	1a0006e8 <pvPortMalloc+0xe4>
1a00064c:	4b2e      	ldr	r3, [pc, #184]	; (1a000708 <pvPortMalloc+0x104>)
1a00064e:	681b      	ldr	r3, [r3, #0]
1a000650:	429c      	cmp	r4, r3
1a000652:	d84b      	bhi.n	1a0006ec <pvPortMalloc+0xe8>
				pxBlock = xStart.pxNextFreeBlock;
1a000654:	4b2d      	ldr	r3, [pc, #180]	; (1a00070c <pvPortMalloc+0x108>)
1a000656:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000658:	e001      	b.n	1a00065e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
1a00065a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a00065c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00065e:	686a      	ldr	r2, [r5, #4]
1a000660:	4294      	cmp	r4, r2
1a000662:	d902      	bls.n	1a00066a <pvPortMalloc+0x66>
1a000664:	682a      	ldr	r2, [r5, #0]
1a000666:	2a00      	cmp	r2, #0
1a000668:	d1f7      	bne.n	1a00065a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
1a00066a:	4a25      	ldr	r2, [pc, #148]	; (1a000700 <pvPortMalloc+0xfc>)
1a00066c:	6812      	ldr	r2, [r2, #0]
1a00066e:	4295      	cmp	r5, r2
1a000670:	d03e      	beq.n	1a0006f0 <pvPortMalloc+0xec>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000672:	681e      	ldr	r6, [r3, #0]
1a000674:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000676:	682a      	ldr	r2, [r5, #0]
1a000678:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00067a:	686b      	ldr	r3, [r5, #4]
1a00067c:	1b1b      	subs	r3, r3, r4
1a00067e:	2b10      	cmp	r3, #16
1a000680:	d910      	bls.n	1a0006a4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000682:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000684:	f010 0f07 	tst.w	r0, #7
1a000688:	d008      	beq.n	1a00069c <pvPortMalloc+0x98>
1a00068a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00068e:	f383 8811 	msr	BASEPRI, r3
1a000692:	f3bf 8f6f 	isb	sy
1a000696:	f3bf 8f4f 	dsb	sy
1a00069a:	e7fe      	b.n	1a00069a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a00069c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a00069e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0006a0:	f7ff ff84 	bl	1a0005ac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0006a4:	686a      	ldr	r2, [r5, #4]
1a0006a6:	4918      	ldr	r1, [pc, #96]	; (1a000708 <pvPortMalloc+0x104>)
1a0006a8:	680b      	ldr	r3, [r1, #0]
1a0006aa:	1a9b      	subs	r3, r3, r2
1a0006ac:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0006ae:	4918      	ldr	r1, [pc, #96]	; (1a000710 <pvPortMalloc+0x10c>)
1a0006b0:	6809      	ldr	r1, [r1, #0]
1a0006b2:	428b      	cmp	r3, r1
1a0006b4:	d201      	bcs.n	1a0006ba <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0006b6:	4916      	ldr	r1, [pc, #88]	; (1a000710 <pvPortMalloc+0x10c>)
1a0006b8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0006ba:	4b12      	ldr	r3, [pc, #72]	; (1a000704 <pvPortMalloc+0x100>)
1a0006bc:	681b      	ldr	r3, [r3, #0]
1a0006be:	4313      	orrs	r3, r2
1a0006c0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0006c2:	2300      	movs	r3, #0
1a0006c4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0006c6:	f001 f84f 	bl	1a001768 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0006ca:	b19e      	cbz	r6, 1a0006f4 <pvPortMalloc+0xf0>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0006cc:	f016 0f07 	tst.w	r6, #7
1a0006d0:	d013      	beq.n	1a0006fa <pvPortMalloc+0xf6>
1a0006d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006d6:	f383 8811 	msr	BASEPRI, r3
1a0006da:	f3bf 8f6f 	isb	sy
1a0006de:	f3bf 8f4f 	dsb	sy
1a0006e2:	e7fe      	b.n	1a0006e2 <pvPortMalloc+0xde>
void *pvReturn = NULL;
1a0006e4:	2600      	movs	r6, #0
1a0006e6:	e7ee      	b.n	1a0006c6 <pvPortMalloc+0xc2>
1a0006e8:	2600      	movs	r6, #0
1a0006ea:	e7ec      	b.n	1a0006c6 <pvPortMalloc+0xc2>
1a0006ec:	2600      	movs	r6, #0
1a0006ee:	e7ea      	b.n	1a0006c6 <pvPortMalloc+0xc2>
1a0006f0:	2600      	movs	r6, #0
1a0006f2:	e7e8      	b.n	1a0006c6 <pvPortMalloc+0xc2>
			vApplicationMallocFailedHook();
1a0006f4:	f000 fd20 	bl	1a001138 <vApplicationMallocFailedHook>
1a0006f8:	e7e8      	b.n	1a0006cc <pvPortMalloc+0xc8>
}
1a0006fa:	4630      	mov	r0, r6
1a0006fc:	bd70      	pop	{r4, r5, r6, pc}
1a0006fe:	bf00      	nop
1a000700:	100000a8 	.word	0x100000a8
1a000704:	100020ac 	.word	0x100020ac
1a000708:	100020b0 	.word	0x100020b0
1a00070c:	100020b8 	.word	0x100020b8
1a000710:	100020b4 	.word	0x100020b4

1a000714 <vPortFree>:
	if( pv != NULL )
1a000714:	b380      	cbz	r0, 1a000778 <vPortFree+0x64>
{
1a000716:	b538      	push	{r3, r4, r5, lr}
1a000718:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a00071a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00071e:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000722:	4916      	ldr	r1, [pc, #88]	; (1a00077c <vPortFree+0x68>)
1a000724:	6809      	ldr	r1, [r1, #0]
1a000726:	420a      	tst	r2, r1
1a000728:	d108      	bne.n	1a00073c <vPortFree+0x28>
1a00072a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00072e:	f383 8811 	msr	BASEPRI, r3
1a000732:	f3bf 8f6f 	isb	sy
1a000736:	f3bf 8f4f 	dsb	sy
1a00073a:	e7fe      	b.n	1a00073a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a00073c:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000740:	b140      	cbz	r0, 1a000754 <vPortFree+0x40>
1a000742:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000746:	f383 8811 	msr	BASEPRI, r3
1a00074a:	f3bf 8f6f 	isb	sy
1a00074e:	f3bf 8f4f 	dsb	sy
1a000752:	e7fe      	b.n	1a000752 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000754:	ea22 0201 	bic.w	r2, r2, r1
1a000758:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a00075c:	f000 ff66 	bl	1a00162c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000760:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000764:	4a06      	ldr	r2, [pc, #24]	; (1a000780 <vPortFree+0x6c>)
1a000766:	6813      	ldr	r3, [r2, #0]
1a000768:	440b      	add	r3, r1
1a00076a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a00076c:	4628      	mov	r0, r5
1a00076e:	f7ff ff1d 	bl	1a0005ac <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000772:	f000 fff9 	bl	1a001768 <xTaskResumeAll>
1a000776:	bd38      	pop	{r3, r4, r5, pc}
1a000778:	4770      	bx	lr
1a00077a:	bf00      	nop
1a00077c:	100020ac 	.word	0x100020ac
1a000780:	100020b0 	.word	0x100020b0

1a000784 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000784:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000786:	b123      	cbz	r3, 1a000792 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000788:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00078a:	6818      	ldr	r0, [r3, #0]
1a00078c:	f1c0 0007 	rsb	r0, r0, #7
1a000790:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000792:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000794:	4770      	bx	lr

1a000796 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000796:	b510      	push	{r4, lr}
1a000798:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00079a:	f001 fd95 	bl	1a0022c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00079e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0007a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0007a2:	429a      	cmp	r2, r3
1a0007a4:	d004      	beq.n	1a0007b0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0007a6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0007a8:	f001 fdb0 	bl	1a00230c <vPortExitCritical>

	return xReturn;
}
1a0007ac:	4620      	mov	r0, r4
1a0007ae:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0007b0:	2401      	movs	r4, #1
1a0007b2:	e7f9      	b.n	1a0007a8 <prvIsQueueFull+0x12>

1a0007b4 <prvIsQueueEmpty>:
{
1a0007b4:	b510      	push	{r4, lr}
1a0007b6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0007b8:	f001 fd86 	bl	1a0022c8 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0007bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0007be:	b123      	cbz	r3, 1a0007ca <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0007c0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0007c2:	f001 fda3 	bl	1a00230c <vPortExitCritical>
}
1a0007c6:	4620      	mov	r0, r4
1a0007c8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0007ca:	2401      	movs	r4, #1
1a0007cc:	e7f9      	b.n	1a0007c2 <prvIsQueueEmpty+0xe>

1a0007ce <prvCopyDataToQueue>:
{
1a0007ce:	b570      	push	{r4, r5, r6, lr}
1a0007d0:	4604      	mov	r4, r0
1a0007d2:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0007d4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0007d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0007d8:	b94a      	cbnz	r2, 1a0007ee <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0007da:	6803      	ldr	r3, [r0, #0]
1a0007dc:	bb53      	cbnz	r3, 1a000834 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0007de:	6840      	ldr	r0, [r0, #4]
1a0007e0:	f001 fa0a 	bl	1a001bf8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0007e4:	2300      	movs	r3, #0
1a0007e6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0007e8:	3501      	adds	r5, #1
1a0007ea:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0007ec:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
1a0007ee:	b96e      	cbnz	r6, 1a00080c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0007f0:	6880      	ldr	r0, [r0, #8]
1a0007f2:	f003 fa25 	bl	1a003c40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0007f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0007f8:	68a3      	ldr	r3, [r4, #8]
1a0007fa:	4413      	add	r3, r2
1a0007fc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0007fe:	6862      	ldr	r2, [r4, #4]
1a000800:	4293      	cmp	r3, r2
1a000802:	d319      	bcc.n	1a000838 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000804:	6823      	ldr	r3, [r4, #0]
1a000806:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000808:	2000      	movs	r0, #0
1a00080a:	e7ed      	b.n	1a0007e8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00080c:	68c0      	ldr	r0, [r0, #12]
1a00080e:	f003 fa17 	bl	1a003c40 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000812:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000814:	425b      	negs	r3, r3
1a000816:	68e2      	ldr	r2, [r4, #12]
1a000818:	441a      	add	r2, r3
1a00081a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00081c:	6821      	ldr	r1, [r4, #0]
1a00081e:	428a      	cmp	r2, r1
1a000820:	d202      	bcs.n	1a000828 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000822:	6862      	ldr	r2, [r4, #4]
1a000824:	4413      	add	r3, r2
1a000826:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000828:	2e02      	cmp	r6, #2
1a00082a:	d107      	bne.n	1a00083c <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00082c:	b145      	cbz	r5, 1a000840 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a00082e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000830:	2000      	movs	r0, #0
1a000832:	e7d9      	b.n	1a0007e8 <prvCopyDataToQueue+0x1a>
1a000834:	2000      	movs	r0, #0
1a000836:	e7d7      	b.n	1a0007e8 <prvCopyDataToQueue+0x1a>
1a000838:	2000      	movs	r0, #0
1a00083a:	e7d5      	b.n	1a0007e8 <prvCopyDataToQueue+0x1a>
1a00083c:	2000      	movs	r0, #0
1a00083e:	e7d3      	b.n	1a0007e8 <prvCopyDataToQueue+0x1a>
1a000840:	2000      	movs	r0, #0
1a000842:	e7d1      	b.n	1a0007e8 <prvCopyDataToQueue+0x1a>

1a000844 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000844:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000846:	b172      	cbz	r2, 1a000866 <prvCopyDataFromQueue+0x22>
{
1a000848:	b510      	push	{r4, lr}
1a00084a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00084c:	68c4      	ldr	r4, [r0, #12]
1a00084e:	4414      	add	r4, r2
1a000850:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000852:	6840      	ldr	r0, [r0, #4]
1a000854:	4284      	cmp	r4, r0
1a000856:	d301      	bcc.n	1a00085c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000858:	6818      	ldr	r0, [r3, #0]
1a00085a:	60d8      	str	r0, [r3, #12]
1a00085c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00085e:	68d9      	ldr	r1, [r3, #12]
1a000860:	f003 f9ee 	bl	1a003c40 <memcpy>
1a000864:	bd10      	pop	{r4, pc}
1a000866:	4770      	bx	lr

1a000868 <prvUnlockQueue>:
{
1a000868:	b538      	push	{r3, r4, r5, lr}
1a00086a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00086c:	f001 fd2c 	bl	1a0022c8 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000870:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000874:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000876:	e001      	b.n	1a00087c <prvUnlockQueue+0x14>
			--cTxLock;
1a000878:	3c01      	subs	r4, #1
1a00087a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00087c:	2c00      	cmp	r4, #0
1a00087e:	dd0a      	ble.n	1a000896 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000880:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000882:	b143      	cbz	r3, 1a000896 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000884:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000888:	f001 f8ae 	bl	1a0019e8 <xTaskRemoveFromEventList>
1a00088c:	2800      	cmp	r0, #0
1a00088e:	d0f3      	beq.n	1a000878 <prvUnlockQueue+0x10>
						vTaskMissedYield();
1a000890:	f001 f93c 	bl	1a001b0c <vTaskMissedYield>
1a000894:	e7f0      	b.n	1a000878 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000896:	23ff      	movs	r3, #255	; 0xff
1a000898:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00089c:	f001 fd36 	bl	1a00230c <vPortExitCritical>
	taskENTER_CRITICAL();
1a0008a0:	f001 fd12 	bl	1a0022c8 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0008a4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0008a8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0008aa:	e001      	b.n	1a0008b0 <prvUnlockQueue+0x48>
				--cRxLock;
1a0008ac:	3c01      	subs	r4, #1
1a0008ae:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0008b0:	2c00      	cmp	r4, #0
1a0008b2:	dd0a      	ble.n	1a0008ca <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0008b4:	692b      	ldr	r3, [r5, #16]
1a0008b6:	b143      	cbz	r3, 1a0008ca <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0008b8:	f105 0010 	add.w	r0, r5, #16
1a0008bc:	f001 f894 	bl	1a0019e8 <xTaskRemoveFromEventList>
1a0008c0:	2800      	cmp	r0, #0
1a0008c2:	d0f3      	beq.n	1a0008ac <prvUnlockQueue+0x44>
					vTaskMissedYield();
1a0008c4:	f001 f922 	bl	1a001b0c <vTaskMissedYield>
1a0008c8:	e7f0      	b.n	1a0008ac <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0008ca:	23ff      	movs	r3, #255	; 0xff
1a0008cc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0008d0:	f001 fd1c 	bl	1a00230c <vPortExitCritical>
1a0008d4:	bd38      	pop	{r3, r4, r5, pc}
1a0008d6:	Address 0x000000001a0008d6 is out of bounds.


1a0008d8 <xQueueGenericReset>:
{
1a0008d8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0008da:	b330      	cbz	r0, 1a00092a <xQueueGenericReset+0x52>
1a0008dc:	4604      	mov	r4, r0
1a0008de:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0008e0:	f001 fcf2 	bl	1a0022c8 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0008e4:	6821      	ldr	r1, [r4, #0]
1a0008e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0008e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0008ea:	fb03 1002 	mla	r0, r3, r2, r1
1a0008ee:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0008f0:	2000      	movs	r0, #0
1a0008f2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0008f4:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0008f6:	3a01      	subs	r2, #1
1a0008f8:	fb02 1303 	mla	r3, r2, r3, r1
1a0008fc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0008fe:	23ff      	movs	r3, #255	; 0xff
1a000900:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000908:	b9c5      	cbnz	r5, 1a00093c <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00090a:	6923      	ldr	r3, [r4, #16]
1a00090c:	b1f3      	cbz	r3, 1a00094c <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00090e:	f104 0010 	add.w	r0, r4, #16
1a000912:	f001 f869 	bl	1a0019e8 <xTaskRemoveFromEventList>
1a000916:	b1c8      	cbz	r0, 1a00094c <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
1a000918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00091c:	4b0d      	ldr	r3, [pc, #52]	; (1a000954 <xQueueGenericReset+0x7c>)
1a00091e:	601a      	str	r2, [r3, #0]
1a000920:	f3bf 8f4f 	dsb	sy
1a000924:	f3bf 8f6f 	isb	sy
1a000928:	e010      	b.n	1a00094c <xQueueGenericReset+0x74>
1a00092a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00092e:	f383 8811 	msr	BASEPRI, r3
1a000932:	f3bf 8f6f 	isb	sy
1a000936:	f3bf 8f4f 	dsb	sy
1a00093a:	e7fe      	b.n	1a00093a <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00093c:	f104 0010 	add.w	r0, r4, #16
1a000940:	f000 fb83 	bl	1a00104a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000944:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000948:	f000 fb7f 	bl	1a00104a <vListInitialise>
	taskEXIT_CRITICAL();
1a00094c:	f001 fcde 	bl	1a00230c <vPortExitCritical>
}
1a000950:	2001      	movs	r0, #1
1a000952:	bd38      	pop	{r3, r4, r5, pc}
1a000954:	e000ed04 	.word	0xe000ed04

1a000958 <prvInitialiseNewQueue>:
{
1a000958:	b538      	push	{r3, r4, r5, lr}
1a00095a:	461d      	mov	r5, r3
1a00095c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00095e:	460b      	mov	r3, r1
1a000960:	b149      	cbz	r1, 1a000976 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000962:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000964:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000966:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000968:	2101      	movs	r1, #1
1a00096a:	4620      	mov	r0, r4
1a00096c:	f7ff ffb4 	bl	1a0008d8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000970:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000974:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000976:	6024      	str	r4, [r4, #0]
1a000978:	e7f4      	b.n	1a000964 <prvInitialiseNewQueue+0xc>

1a00097a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00097a:	b940      	cbnz	r0, 1a00098e <xQueueGenericCreateStatic+0x14>
1a00097c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000980:	f383 8811 	msr	BASEPRI, r3
1a000984:	f3bf 8f6f 	isb	sy
1a000988:	f3bf 8f4f 	dsb	sy
1a00098c:	e7fe      	b.n	1a00098c <xQueueGenericCreateStatic+0x12>
	{
1a00098e:	b510      	push	{r4, lr}
1a000990:	b084      	sub	sp, #16
1a000992:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000994:	b163      	cbz	r3, 1a0009b0 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000996:	b1a2      	cbz	r2, 1a0009c2 <xQueueGenericCreateStatic+0x48>
1a000998:	b1a9      	cbz	r1, 1a0009c6 <xQueueGenericCreateStatic+0x4c>
1a00099a:	2001      	movs	r0, #1
1a00099c:	b9a8      	cbnz	r0, 1a0009ca <xQueueGenericCreateStatic+0x50>
1a00099e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009a2:	f383 8811 	msr	BASEPRI, r3
1a0009a6:	f3bf 8f6f 	isb	sy
1a0009aa:	f3bf 8f4f 	dsb	sy
1a0009ae:	e7fe      	b.n	1a0009ae <xQueueGenericCreateStatic+0x34>
1a0009b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009b4:	f383 8811 	msr	BASEPRI, r3
1a0009b8:	f3bf 8f6f 	isb	sy
1a0009bc:	f3bf 8f4f 	dsb	sy
1a0009c0:	e7fe      	b.n	1a0009c0 <xQueueGenericCreateStatic+0x46>
1a0009c2:	2001      	movs	r0, #1
1a0009c4:	e7ea      	b.n	1a00099c <xQueueGenericCreateStatic+0x22>
1a0009c6:	2000      	movs	r0, #0
1a0009c8:	e7e8      	b.n	1a00099c <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0009ca:	b90a      	cbnz	r2, 1a0009d0 <xQueueGenericCreateStatic+0x56>
1a0009cc:	b101      	cbz	r1, 1a0009d0 <xQueueGenericCreateStatic+0x56>
1a0009ce:	2000      	movs	r0, #0
1a0009d0:	b940      	cbnz	r0, 1a0009e4 <xQueueGenericCreateStatic+0x6a>
1a0009d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009d6:	f383 8811 	msr	BASEPRI, r3
1a0009da:	f3bf 8f6f 	isb	sy
1a0009de:	f3bf 8f4f 	dsb	sy
1a0009e2:	e7fe      	b.n	1a0009e2 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0009e4:	2050      	movs	r0, #80	; 0x50
1a0009e6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0009e8:	9803      	ldr	r0, [sp, #12]
1a0009ea:	2850      	cmp	r0, #80	; 0x50
1a0009ec:	d008      	beq.n	1a000a00 <xQueueGenericCreateStatic+0x86>
1a0009ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009f2:	f383 8811 	msr	BASEPRI, r3
1a0009f6:	f3bf 8f6f 	isb	sy
1a0009fa:	f3bf 8f4f 	dsb	sy
1a0009fe:	e7fe      	b.n	1a0009fe <xQueueGenericCreateStatic+0x84>
1a000a00:	4620      	mov	r0, r4
1a000a02:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000a04:	2301      	movs	r3, #1
1a000a06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a0a:	9400      	str	r4, [sp, #0]
1a000a0c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000a10:	f7ff ffa2 	bl	1a000958 <prvInitialiseNewQueue>
	}
1a000a14:	4620      	mov	r0, r4
1a000a16:	b004      	add	sp, #16
1a000a18:	bd10      	pop	{r4, pc}

1a000a1a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a1a:	b940      	cbnz	r0, 1a000a2e <xQueueGenericCreate+0x14>
1a000a1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a20:	f383 8811 	msr	BASEPRI, r3
1a000a24:	f3bf 8f6f 	isb	sy
1a000a28:	f3bf 8f4f 	dsb	sy
1a000a2c:	e7fe      	b.n	1a000a2c <xQueueGenericCreate+0x12>
	{
1a000a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a30:	b083      	sub	sp, #12
1a000a32:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000a34:	b111      	cbz	r1, 1a000a3c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a36:	fb01 f000 	mul.w	r0, r1, r0
1a000a3a:	e000      	b.n	1a000a3e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000a3c:	2000      	movs	r0, #0
1a000a3e:	4617      	mov	r7, r2
1a000a40:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000a42:	3050      	adds	r0, #80	; 0x50
1a000a44:	f7ff fdde 	bl	1a000604 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000a48:	4605      	mov	r5, r0
1a000a4a:	b150      	cbz	r0, 1a000a62 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000a4c:	2300      	movs	r3, #0
1a000a4e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a52:	9000      	str	r0, [sp, #0]
1a000a54:	463b      	mov	r3, r7
1a000a56:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000a5a:	4621      	mov	r1, r4
1a000a5c:	4630      	mov	r0, r6
1a000a5e:	f7ff ff7b 	bl	1a000958 <prvInitialiseNewQueue>
	}
1a000a62:	4628      	mov	r0, r5
1a000a64:	b003      	add	sp, #12
1a000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000a68 <xQueueGenericSend>:
{
1a000a68:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a6a:	b085      	sub	sp, #20
1a000a6c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000a6e:	b160      	cbz	r0, 1a000a8a <xQueueGenericSend+0x22>
1a000a70:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000a72:	b199      	cbz	r1, 1a000a9c <xQueueGenericSend+0x34>
1a000a74:	2501      	movs	r5, #1
1a000a76:	b9bd      	cbnz	r5, 1a000aa8 <xQueueGenericSend+0x40>
1a000a78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a7c:	f383 8811 	msr	BASEPRI, r3
1a000a80:	f3bf 8f6f 	isb	sy
1a000a84:	f3bf 8f4f 	dsb	sy
1a000a88:	e7fe      	b.n	1a000a88 <xQueueGenericSend+0x20>
1a000a8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a8e:	f383 8811 	msr	BASEPRI, r3
1a000a92:	f3bf 8f6f 	isb	sy
1a000a96:	f3bf 8f4f 	dsb	sy
1a000a9a:	e7fe      	b.n	1a000a9a <xQueueGenericSend+0x32>
1a000a9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000a9e:	b90a      	cbnz	r2, 1a000aa4 <xQueueGenericSend+0x3c>
1a000aa0:	2501      	movs	r5, #1
1a000aa2:	e7e8      	b.n	1a000a76 <xQueueGenericSend+0xe>
1a000aa4:	2500      	movs	r5, #0
1a000aa6:	e7e6      	b.n	1a000a76 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000aa8:	2b02      	cmp	r3, #2
1a000aaa:	d009      	beq.n	1a000ac0 <xQueueGenericSend+0x58>
1a000aac:	b96d      	cbnz	r5, 1a000aca <xQueueGenericSend+0x62>
1a000aae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ab2:	f383 8811 	msr	BASEPRI, r3
1a000ab6:	f3bf 8f6f 	isb	sy
1a000aba:	f3bf 8f4f 	dsb	sy
1a000abe:	e7fe      	b.n	1a000abe <xQueueGenericSend+0x56>
1a000ac0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000ac2:	2a01      	cmp	r2, #1
1a000ac4:	d0f2      	beq.n	1a000aac <xQueueGenericSend+0x44>
1a000ac6:	2500      	movs	r5, #0
1a000ac8:	e7f0      	b.n	1a000aac <xQueueGenericSend+0x44>
1a000aca:	461e      	mov	r6, r3
1a000acc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000ace:	f001 f823 	bl	1a001b18 <xTaskGetSchedulerState>
1a000ad2:	b910      	cbnz	r0, 1a000ada <xQueueGenericSend+0x72>
1a000ad4:	9b01      	ldr	r3, [sp, #4]
1a000ad6:	b103      	cbz	r3, 1a000ada <xQueueGenericSend+0x72>
1a000ad8:	2500      	movs	r5, #0
1a000ada:	b945      	cbnz	r5, 1a000aee <xQueueGenericSend+0x86>
1a000adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae0:	f383 8811 	msr	BASEPRI, r3
1a000ae4:	f3bf 8f6f 	isb	sy
1a000ae8:	f3bf 8f4f 	dsb	sy
1a000aec:	e7fe      	b.n	1a000aec <xQueueGenericSend+0x84>
1a000aee:	2500      	movs	r5, #0
1a000af0:	e02c      	b.n	1a000b4c <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000af2:	4632      	mov	r2, r6
1a000af4:	4639      	mov	r1, r7
1a000af6:	4620      	mov	r0, r4
1a000af8:	f7ff fe69 	bl	1a0007ce <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000afe:	b18b      	cbz	r3, 1a000b24 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b00:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b04:	f000 ff70 	bl	1a0019e8 <xTaskRemoveFromEventList>
1a000b08:	b138      	cbz	r0, 1a000b1a <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
1a000b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b0e:	4b37      	ldr	r3, [pc, #220]	; (1a000bec <xQueueGenericSend+0x184>)
1a000b10:	601a      	str	r2, [r3, #0]
1a000b12:	f3bf 8f4f 	dsb	sy
1a000b16:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000b1a:	f001 fbf7 	bl	1a00230c <vPortExitCritical>
				return pdPASS;
1a000b1e:	2001      	movs	r0, #1
}
1a000b20:	b005      	add	sp, #20
1a000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
1a000b24:	2800      	cmp	r0, #0
1a000b26:	d0f8      	beq.n	1a000b1a <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
1a000b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b2c:	4b2f      	ldr	r3, [pc, #188]	; (1a000bec <xQueueGenericSend+0x184>)
1a000b2e:	601a      	str	r2, [r3, #0]
1a000b30:	f3bf 8f4f 	dsb	sy
1a000b34:	f3bf 8f6f 	isb	sy
1a000b38:	e7ef      	b.n	1a000b1a <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
1a000b3a:	f001 fbe7 	bl	1a00230c <vPortExitCritical>
					return errQUEUE_FULL;
1a000b3e:	2000      	movs	r0, #0
1a000b40:	e7ee      	b.n	1a000b20 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
1a000b42:	4620      	mov	r0, r4
1a000b44:	f7ff fe90 	bl	1a000868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000b48:	f000 fe0e 	bl	1a001768 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000b4c:	f001 fbbc 	bl	1a0022c8 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000b50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000b54:	429a      	cmp	r2, r3
1a000b56:	d3cc      	bcc.n	1a000af2 <xQueueGenericSend+0x8a>
1a000b58:	2e02      	cmp	r6, #2
1a000b5a:	d0ca      	beq.n	1a000af2 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000b5c:	9b01      	ldr	r3, [sp, #4]
1a000b5e:	2b00      	cmp	r3, #0
1a000b60:	d0eb      	beq.n	1a000b3a <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
1a000b62:	b91d      	cbnz	r5, 1a000b6c <xQueueGenericSend+0x104>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000b64:	a802      	add	r0, sp, #8
1a000b66:	f000 ff85 	bl	1a001a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000b6a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
1a000b6c:	f001 fbce 	bl	1a00230c <vPortExitCritical>
		vTaskSuspendAll();
1a000b70:	f000 fd5c 	bl	1a00162c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000b74:	f001 fba8 	bl	1a0022c8 <vPortEnterCritical>
1a000b78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000b7c:	b25b      	sxtb	r3, r3
1a000b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b82:	d102      	bne.n	1a000b8a <xQueueGenericSend+0x122>
1a000b84:	2300      	movs	r3, #0
1a000b86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000b8e:	b25b      	sxtb	r3, r3
1a000b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b94:	d102      	bne.n	1a000b9c <xQueueGenericSend+0x134>
1a000b96:	2300      	movs	r3, #0
1a000b98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000b9c:	f001 fbb6 	bl	1a00230c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000ba0:	a901      	add	r1, sp, #4
1a000ba2:	a802      	add	r0, sp, #8
1a000ba4:	f000 ff72 	bl	1a001a8c <xTaskCheckForTimeOut>
1a000ba8:	b9c8      	cbnz	r0, 1a000bde <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000baa:	4620      	mov	r0, r4
1a000bac:	f7ff fdf3 	bl	1a000796 <prvIsQueueFull>
1a000bb0:	2800      	cmp	r0, #0
1a000bb2:	d0c6      	beq.n	1a000b42 <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000bb4:	9901      	ldr	r1, [sp, #4]
1a000bb6:	f104 0010 	add.w	r0, r4, #16
1a000bba:	f000 fee1 	bl	1a001980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000bbe:	4620      	mov	r0, r4
1a000bc0:	f7ff fe52 	bl	1a000868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000bc4:	f000 fdd0 	bl	1a001768 <xTaskResumeAll>
1a000bc8:	2800      	cmp	r0, #0
1a000bca:	d1bf      	bne.n	1a000b4c <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
1a000bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bd0:	4b06      	ldr	r3, [pc, #24]	; (1a000bec <xQueueGenericSend+0x184>)
1a000bd2:	601a      	str	r2, [r3, #0]
1a000bd4:	f3bf 8f4f 	dsb	sy
1a000bd8:	f3bf 8f6f 	isb	sy
1a000bdc:	e7b6      	b.n	1a000b4c <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
1a000bde:	4620      	mov	r0, r4
1a000be0:	f7ff fe42 	bl	1a000868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000be4:	f000 fdc0 	bl	1a001768 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000be8:	2000      	movs	r0, #0
1a000bea:	e799      	b.n	1a000b20 <xQueueGenericSend+0xb8>
1a000bec:	e000ed04 	.word	0xe000ed04

1a000bf0 <xQueueGenericSendFromISR>:
{
1a000bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000bf4:	b160      	cbz	r0, 1a000c10 <xQueueGenericSendFromISR+0x20>
1a000bf6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000bf8:	b199      	cbz	r1, 1a000c22 <xQueueGenericSendFromISR+0x32>
1a000bfa:	2001      	movs	r0, #1
1a000bfc:	b9b8      	cbnz	r0, 1a000c2e <xQueueGenericSendFromISR+0x3e>
1a000bfe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c02:	f383 8811 	msr	BASEPRI, r3
1a000c06:	f3bf 8f6f 	isb	sy
1a000c0a:	f3bf 8f4f 	dsb	sy
1a000c0e:	e7fe      	b.n	1a000c0e <xQueueGenericSendFromISR+0x1e>
1a000c10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c14:	f383 8811 	msr	BASEPRI, r3
1a000c18:	f3bf 8f6f 	isb	sy
1a000c1c:	f3bf 8f4f 	dsb	sy
1a000c20:	e7fe      	b.n	1a000c20 <xQueueGenericSendFromISR+0x30>
1a000c22:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000c24:	b908      	cbnz	r0, 1a000c2a <xQueueGenericSendFromISR+0x3a>
1a000c26:	2001      	movs	r0, #1
1a000c28:	e7e8      	b.n	1a000bfc <xQueueGenericSendFromISR+0xc>
1a000c2a:	2000      	movs	r0, #0
1a000c2c:	e7e6      	b.n	1a000bfc <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c2e:	2b02      	cmp	r3, #2
1a000c30:	d009      	beq.n	1a000c46 <xQueueGenericSendFromISR+0x56>
1a000c32:	b968      	cbnz	r0, 1a000c50 <xQueueGenericSendFromISR+0x60>
1a000c34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c38:	f383 8811 	msr	BASEPRI, r3
1a000c3c:	f3bf 8f6f 	isb	sy
1a000c40:	f3bf 8f4f 	dsb	sy
1a000c44:	e7fe      	b.n	1a000c44 <xQueueGenericSendFromISR+0x54>
1a000c46:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a000c48:	2d01      	cmp	r5, #1
1a000c4a:	d0f2      	beq.n	1a000c32 <xQueueGenericSendFromISR+0x42>
1a000c4c:	2000      	movs	r0, #0
1a000c4e:	e7f0      	b.n	1a000c32 <xQueueGenericSendFromISR+0x42>
1a000c50:	461f      	mov	r7, r3
1a000c52:	4690      	mov	r8, r2
1a000c54:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000c56:	f001 fc5f 	bl	1a002518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000c5a:	f3ef 8611 	mrs	r6, BASEPRI
1a000c5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c62:	f383 8811 	msr	BASEPRI, r3
1a000c66:	f3bf 8f6f 	isb	sy
1a000c6a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000c6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c72:	429a      	cmp	r2, r3
1a000c74:	d301      	bcc.n	1a000c7a <xQueueGenericSendFromISR+0x8a>
1a000c76:	2f02      	cmp	r7, #2
1a000c78:	d121      	bne.n	1a000cbe <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000c7a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000c7e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000c80:	463a      	mov	r2, r7
1a000c82:	4649      	mov	r1, r9
1a000c84:	4620      	mov	r0, r4
1a000c86:	f7ff fda2 	bl	1a0007ce <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000c8a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000c8e:	d110      	bne.n	1a000cb2 <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000c92:	b1b3      	cbz	r3, 1a000cc2 <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c98:	f000 fea6 	bl	1a0019e8 <xTaskRemoveFromEventList>
1a000c9c:	b198      	cbz	r0, 1a000cc6 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000c9e:	f1b8 0f00 	cmp.w	r8, #0
1a000ca2:	d012      	beq.n	1a000cca <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000ca4:	2001      	movs	r0, #1
1a000ca6:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000caa:	f386 8811 	msr	BASEPRI, r6
}
1a000cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000cb2:	1c6b      	adds	r3, r5, #1
1a000cb4:	b25b      	sxtb	r3, r3
1a000cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000cba:	2001      	movs	r0, #1
1a000cbc:	e7f5      	b.n	1a000caa <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
1a000cbe:	2000      	movs	r0, #0
1a000cc0:	e7f3      	b.n	1a000caa <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
1a000cc2:	2001      	movs	r0, #1
1a000cc4:	e7f1      	b.n	1a000caa <xQueueGenericSendFromISR+0xba>
1a000cc6:	2001      	movs	r0, #1
1a000cc8:	e7ef      	b.n	1a000caa <xQueueGenericSendFromISR+0xba>
1a000cca:	2001      	movs	r0, #1
1a000ccc:	e7ed      	b.n	1a000caa <xQueueGenericSendFromISR+0xba>
1a000cce:	Address 0x000000001a000cce is out of bounds.


1a000cd0 <xQueueReceive>:
{
1a000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cd2:	b085      	sub	sp, #20
1a000cd4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000cd6:	b160      	cbz	r0, 1a000cf2 <xQueueReceive+0x22>
1a000cd8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cda:	b199      	cbz	r1, 1a000d04 <xQueueReceive+0x34>
1a000cdc:	2501      	movs	r5, #1
1a000cde:	b9bd      	cbnz	r5, 1a000d10 <xQueueReceive+0x40>
	__asm volatile
1a000ce0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ce4:	f383 8811 	msr	BASEPRI, r3
1a000ce8:	f3bf 8f6f 	isb	sy
1a000cec:	f3bf 8f4f 	dsb	sy
1a000cf0:	e7fe      	b.n	1a000cf0 <xQueueReceive+0x20>
1a000cf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cf6:	f383 8811 	msr	BASEPRI, r3
1a000cfa:	f3bf 8f6f 	isb	sy
1a000cfe:	f3bf 8f4f 	dsb	sy
1a000d02:	e7fe      	b.n	1a000d02 <xQueueReceive+0x32>
1a000d04:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000d06:	b90b      	cbnz	r3, 1a000d0c <xQueueReceive+0x3c>
1a000d08:	2501      	movs	r5, #1
1a000d0a:	e7e8      	b.n	1a000cde <xQueueReceive+0xe>
1a000d0c:	2500      	movs	r5, #0
1a000d0e:	e7e6      	b.n	1a000cde <xQueueReceive+0xe>
1a000d10:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d12:	f000 ff01 	bl	1a001b18 <xTaskGetSchedulerState>
1a000d16:	b910      	cbnz	r0, 1a000d1e <xQueueReceive+0x4e>
1a000d18:	9b01      	ldr	r3, [sp, #4]
1a000d1a:	b103      	cbz	r3, 1a000d1e <xQueueReceive+0x4e>
1a000d1c:	2500      	movs	r5, #0
1a000d1e:	b945      	cbnz	r5, 1a000d32 <xQueueReceive+0x62>
1a000d20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d24:	f383 8811 	msr	BASEPRI, r3
1a000d28:	f3bf 8f6f 	isb	sy
1a000d2c:	f3bf 8f4f 	dsb	sy
1a000d30:	e7fe      	b.n	1a000d30 <xQueueReceive+0x60>
1a000d32:	2700      	movs	r7, #0
1a000d34:	e02f      	b.n	1a000d96 <xQueueReceive+0xc6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000d36:	4631      	mov	r1, r6
1a000d38:	4620      	mov	r0, r4
1a000d3a:	f7ff fd83 	bl	1a000844 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000d3e:	3d01      	subs	r5, #1
1a000d40:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d42:	6923      	ldr	r3, [r4, #16]
1a000d44:	b163      	cbz	r3, 1a000d60 <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d46:	f104 0010 	add.w	r0, r4, #16
1a000d4a:	f000 fe4d 	bl	1a0019e8 <xTaskRemoveFromEventList>
1a000d4e:	b138      	cbz	r0, 1a000d60 <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
1a000d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d54:	4b34      	ldr	r3, [pc, #208]	; (1a000e28 <xQueueReceive+0x158>)
1a000d56:	601a      	str	r2, [r3, #0]
1a000d58:	f3bf 8f4f 	dsb	sy
1a000d5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000d60:	f001 fad4 	bl	1a00230c <vPortExitCritical>
				return pdPASS;
1a000d64:	2001      	movs	r0, #1
}
1a000d66:	b005      	add	sp, #20
1a000d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000d6a:	f001 facf 	bl	1a00230c <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000d6e:	2000      	movs	r0, #0
1a000d70:	e7f9      	b.n	1a000d66 <xQueueReceive+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000d72:	a802      	add	r0, sp, #8
1a000d74:	f000 fe7e 	bl	1a001a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000d78:	2701      	movs	r7, #1
1a000d7a:	e016      	b.n	1a000daa <xQueueReceive+0xda>
		prvLockQueue( pxQueue );
1a000d7c:	2300      	movs	r3, #0
1a000d7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000d82:	e01e      	b.n	1a000dc2 <xQueueReceive+0xf2>
1a000d84:	2300      	movs	r3, #0
1a000d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000d8a:	e020      	b.n	1a000dce <xQueueReceive+0xfe>
				prvUnlockQueue( pxQueue );
1a000d8c:	4620      	mov	r0, r4
1a000d8e:	f7ff fd6b 	bl	1a000868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000d92:	f000 fce9 	bl	1a001768 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000d96:	f001 fa97 	bl	1a0022c8 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000d9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000d9c:	2d00      	cmp	r5, #0
1a000d9e:	d1ca      	bne.n	1a000d36 <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000da0:	9b01      	ldr	r3, [sp, #4]
1a000da2:	2b00      	cmp	r3, #0
1a000da4:	d0e1      	beq.n	1a000d6a <xQueueReceive+0x9a>
				else if( xEntryTimeSet == pdFALSE )
1a000da6:	2f00      	cmp	r7, #0
1a000da8:	d0e3      	beq.n	1a000d72 <xQueueReceive+0xa2>
		taskEXIT_CRITICAL();
1a000daa:	f001 faaf 	bl	1a00230c <vPortExitCritical>
		vTaskSuspendAll();
1a000dae:	f000 fc3d 	bl	1a00162c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000db2:	f001 fa89 	bl	1a0022c8 <vPortEnterCritical>
1a000db6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000dba:	b25b      	sxtb	r3, r3
1a000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dc0:	d0dc      	beq.n	1a000d7c <xQueueReceive+0xac>
1a000dc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000dc6:	b25b      	sxtb	r3, r3
1a000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dcc:	d0da      	beq.n	1a000d84 <xQueueReceive+0xb4>
1a000dce:	f001 fa9d 	bl	1a00230c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000dd2:	a901      	add	r1, sp, #4
1a000dd4:	a802      	add	r0, sp, #8
1a000dd6:	f000 fe59 	bl	1a001a8c <xTaskCheckForTimeOut>
1a000dda:	b9c8      	cbnz	r0, 1a000e10 <xQueueReceive+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000ddc:	4620      	mov	r0, r4
1a000dde:	f7ff fce9 	bl	1a0007b4 <prvIsQueueEmpty>
1a000de2:	2800      	cmp	r0, #0
1a000de4:	d0d2      	beq.n	1a000d8c <xQueueReceive+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000de6:	9901      	ldr	r1, [sp, #4]
1a000de8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000dec:	f000 fdc8 	bl	1a001980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000df0:	4620      	mov	r0, r4
1a000df2:	f7ff fd39 	bl	1a000868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000df6:	f000 fcb7 	bl	1a001768 <xTaskResumeAll>
1a000dfa:	2800      	cmp	r0, #0
1a000dfc:	d1cb      	bne.n	1a000d96 <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
1a000dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e02:	4b09      	ldr	r3, [pc, #36]	; (1a000e28 <xQueueReceive+0x158>)
1a000e04:	601a      	str	r2, [r3, #0]
1a000e06:	f3bf 8f4f 	dsb	sy
1a000e0a:	f3bf 8f6f 	isb	sy
1a000e0e:	e7c2      	b.n	1a000d96 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
1a000e10:	4620      	mov	r0, r4
1a000e12:	f7ff fd29 	bl	1a000868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e16:	f000 fca7 	bl	1a001768 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e1a:	4620      	mov	r0, r4
1a000e1c:	f7ff fcca 	bl	1a0007b4 <prvIsQueueEmpty>
1a000e20:	2800      	cmp	r0, #0
1a000e22:	d0b8      	beq.n	1a000d96 <xQueueReceive+0xc6>
				return errQUEUE_EMPTY;
1a000e24:	2000      	movs	r0, #0
1a000e26:	e79e      	b.n	1a000d66 <xQueueReceive+0x96>
1a000e28:	e000ed04 	.word	0xe000ed04

1a000e2c <xQueueSemaphoreTake>:
{
1a000e2c:	b570      	push	{r4, r5, r6, lr}
1a000e2e:	b084      	sub	sp, #16
1a000e30:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000e32:	b158      	cbz	r0, 1a000e4c <xQueueSemaphoreTake+0x20>
1a000e34:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000e36:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000e38:	b18b      	cbz	r3, 1a000e5e <xQueueSemaphoreTake+0x32>
1a000e3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e3e:	f383 8811 	msr	BASEPRI, r3
1a000e42:	f3bf 8f6f 	isb	sy
1a000e46:	f3bf 8f4f 	dsb	sy
1a000e4a:	e7fe      	b.n	1a000e4a <xQueueSemaphoreTake+0x1e>
1a000e4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e50:	f383 8811 	msr	BASEPRI, r3
1a000e54:	f3bf 8f6f 	isb	sy
1a000e58:	f3bf 8f4f 	dsb	sy
1a000e5c:	e7fe      	b.n	1a000e5c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e5e:	f000 fe5b 	bl	1a001b18 <xTaskGetSchedulerState>
1a000e62:	b960      	cbnz	r0, 1a000e7e <xQueueSemaphoreTake+0x52>
1a000e64:	9b01      	ldr	r3, [sp, #4]
1a000e66:	b963      	cbnz	r3, 1a000e82 <xQueueSemaphoreTake+0x56>
1a000e68:	2301      	movs	r3, #1
1a000e6a:	b963      	cbnz	r3, 1a000e86 <xQueueSemaphoreTake+0x5a>
1a000e6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e70:	f383 8811 	msr	BASEPRI, r3
1a000e74:	f3bf 8f6f 	isb	sy
1a000e78:	f3bf 8f4f 	dsb	sy
1a000e7c:	e7fe      	b.n	1a000e7c <xQueueSemaphoreTake+0x50>
1a000e7e:	2301      	movs	r3, #1
1a000e80:	e7f3      	b.n	1a000e6a <xQueueSemaphoreTake+0x3e>
1a000e82:	2300      	movs	r3, #0
1a000e84:	e7f1      	b.n	1a000e6a <xQueueSemaphoreTake+0x3e>
1a000e86:	2500      	movs	r5, #0
1a000e88:	462e      	mov	r6, r5
1a000e8a:	e04e      	b.n	1a000f2a <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000e8c:	3b01      	subs	r3, #1
1a000e8e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000e90:	6823      	ldr	r3, [r4, #0]
1a000e92:	b913      	cbnz	r3, 1a000e9a <xQueueSemaphoreTake+0x6e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a000e94:	f000 ff70 	bl	1a001d78 <pvTaskIncrementMutexHeldCount>
1a000e98:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000e9a:	6923      	ldr	r3, [r4, #16]
1a000e9c:	b163      	cbz	r3, 1a000eb8 <xQueueSemaphoreTake+0x8c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000e9e:	f104 0010 	add.w	r0, r4, #16
1a000ea2:	f000 fda1 	bl	1a0019e8 <xTaskRemoveFromEventList>
1a000ea6:	b138      	cbz	r0, 1a000eb8 <xQueueSemaphoreTake+0x8c>
						queueYIELD_IF_USING_PREEMPTION();
1a000ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000eac:	4b47      	ldr	r3, [pc, #284]	; (1a000fcc <xQueueSemaphoreTake+0x1a0>)
1a000eae:	601a      	str	r2, [r3, #0]
1a000eb0:	f3bf 8f4f 	dsb	sy
1a000eb4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000eb8:	f001 fa28 	bl	1a00230c <vPortExitCritical>
				return pdPASS;
1a000ebc:	2501      	movs	r5, #1
}
1a000ebe:	4628      	mov	r0, r5
1a000ec0:	b004      	add	sp, #16
1a000ec2:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a000ec4:	b145      	cbz	r5, 1a000ed8 <xQueueSemaphoreTake+0xac>
1a000ec6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eca:	f383 8811 	msr	BASEPRI, r3
1a000ece:	f3bf 8f6f 	isb	sy
1a000ed2:	f3bf 8f4f 	dsb	sy
1a000ed6:	e7fe      	b.n	1a000ed6 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a000ed8:	f001 fa18 	bl	1a00230c <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000edc:	e7ef      	b.n	1a000ebe <xQueueSemaphoreTake+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000ede:	a802      	add	r0, sp, #8
1a000ee0:	f000 fdc8 	bl	1a001a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000ee4:	2601      	movs	r6, #1
1a000ee6:	e02a      	b.n	1a000f3e <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a000ee8:	2300      	movs	r3, #0
1a000eea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000eee:	e032      	b.n	1a000f56 <xQueueSemaphoreTake+0x12a>
1a000ef0:	2300      	movs	r3, #0
1a000ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ef6:	e034      	b.n	1a000f62 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a000ef8:	f001 f9e6 	bl	1a0022c8 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a000efc:	6860      	ldr	r0, [r4, #4]
1a000efe:	f000 fe1b 	bl	1a001b38 <xTaskPriorityInherit>
1a000f02:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a000f04:	f001 fa02 	bl	1a00230c <vPortExitCritical>
1a000f08:	e03b      	b.n	1a000f82 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a000f0a:	4620      	mov	r0, r4
1a000f0c:	f7ff fcac 	bl	1a000868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000f10:	f000 fc2a 	bl	1a001768 <xTaskResumeAll>
1a000f14:	e009      	b.n	1a000f2a <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a000f16:	4620      	mov	r0, r4
1a000f18:	f7ff fca6 	bl	1a000868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000f1c:	f000 fc24 	bl	1a001768 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f20:	4620      	mov	r0, r4
1a000f22:	f7ff fc47 	bl	1a0007b4 <prvIsQueueEmpty>
1a000f26:	2800      	cmp	r0, #0
1a000f28:	d140      	bne.n	1a000fac <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a000f2a:	f001 f9cd 	bl	1a0022c8 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a000f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a000f30:	2b00      	cmp	r3, #0
1a000f32:	d1ab      	bne.n	1a000e8c <xQueueSemaphoreTake+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000f34:	9b01      	ldr	r3, [sp, #4]
1a000f36:	2b00      	cmp	r3, #0
1a000f38:	d0c4      	beq.n	1a000ec4 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a000f3a:	2e00      	cmp	r6, #0
1a000f3c:	d0cf      	beq.n	1a000ede <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a000f3e:	f001 f9e5 	bl	1a00230c <vPortExitCritical>
		vTaskSuspendAll();
1a000f42:	f000 fb73 	bl	1a00162c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000f46:	f001 f9bf 	bl	1a0022c8 <vPortEnterCritical>
1a000f4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f4e:	b25b      	sxtb	r3, r3
1a000f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f54:	d0c8      	beq.n	1a000ee8 <xQueueSemaphoreTake+0xbc>
1a000f56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f5a:	b25b      	sxtb	r3, r3
1a000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f60:	d0c6      	beq.n	1a000ef0 <xQueueSemaphoreTake+0xc4>
1a000f62:	f001 f9d3 	bl	1a00230c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000f66:	a901      	add	r1, sp, #4
1a000f68:	a802      	add	r0, sp, #8
1a000f6a:	f000 fd8f 	bl	1a001a8c <xTaskCheckForTimeOut>
1a000f6e:	2800      	cmp	r0, #0
1a000f70:	d1d1      	bne.n	1a000f16 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f72:	4620      	mov	r0, r4
1a000f74:	f7ff fc1e 	bl	1a0007b4 <prvIsQueueEmpty>
1a000f78:	2800      	cmp	r0, #0
1a000f7a:	d0c6      	beq.n	1a000f0a <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000f7c:	6823      	ldr	r3, [r4, #0]
1a000f7e:	2b00      	cmp	r3, #0
1a000f80:	d0ba      	beq.n	1a000ef8 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000f82:	9901      	ldr	r1, [sp, #4]
1a000f84:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f88:	f000 fcfa 	bl	1a001980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000f8c:	4620      	mov	r0, r4
1a000f8e:	f7ff fc6b 	bl	1a000868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000f92:	f000 fbe9 	bl	1a001768 <xTaskResumeAll>
1a000f96:	2800      	cmp	r0, #0
1a000f98:	d1c7      	bne.n	1a000f2a <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a000f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f9e:	4b0b      	ldr	r3, [pc, #44]	; (1a000fcc <xQueueSemaphoreTake+0x1a0>)
1a000fa0:	601a      	str	r2, [r3, #0]
1a000fa2:	f3bf 8f4f 	dsb	sy
1a000fa6:	f3bf 8f6f 	isb	sy
1a000faa:	e7be      	b.n	1a000f2a <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a000fac:	2d00      	cmp	r5, #0
1a000fae:	d086      	beq.n	1a000ebe <xQueueSemaphoreTake+0x92>
						taskENTER_CRITICAL();
1a000fb0:	f001 f98a 	bl	1a0022c8 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a000fb4:	4620      	mov	r0, r4
1a000fb6:	f7ff fbe5 	bl	1a000784 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a000fba:	4601      	mov	r1, r0
1a000fbc:	6860      	ldr	r0, [r4, #4]
1a000fbe:	f000 fe75 	bl	1a001cac <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a000fc2:	f001 f9a3 	bl	1a00230c <vPortExitCritical>
				return errQUEUE_EMPTY;
1a000fc6:	2500      	movs	r5, #0
1a000fc8:	e779      	b.n	1a000ebe <xQueueSemaphoreTake+0x92>
1a000fca:	bf00      	nop
1a000fcc:	e000ed04 	.word	0xe000ed04

1a000fd0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000fd0:	2300      	movs	r3, #0
1a000fd2:	2b07      	cmp	r3, #7
1a000fd4:	d80c      	bhi.n	1a000ff0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000fd6:	4a07      	ldr	r2, [pc, #28]	; (1a000ff4 <vQueueAddToRegistry+0x24>)
1a000fd8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000fdc:	b10a      	cbz	r2, 1a000fe2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000fde:	3301      	adds	r3, #1
1a000fe0:	e7f7      	b.n	1a000fd2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000fe2:	4a04      	ldr	r2, [pc, #16]	; (1a000ff4 <vQueueAddToRegistry+0x24>)
1a000fe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000fe8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000fec:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000fee:	4770      	bx	lr
1a000ff0:	4770      	bx	lr
1a000ff2:	bf00      	nop
1a000ff4:	10002bcc 	.word	0x10002bcc

1a000ff8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000ff8:	b570      	push	{r4, r5, r6, lr}
1a000ffa:	4604      	mov	r4, r0
1a000ffc:	460d      	mov	r5, r1
1a000ffe:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001000:	f001 f962 	bl	1a0022c8 <vPortEnterCritical>
1a001004:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001008:	b25b      	sxtb	r3, r3
1a00100a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00100e:	d00d      	beq.n	1a00102c <vQueueWaitForMessageRestricted+0x34>
1a001010:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001014:	b25b      	sxtb	r3, r3
1a001016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00101a:	d00b      	beq.n	1a001034 <vQueueWaitForMessageRestricted+0x3c>
1a00101c:	f001 f976 	bl	1a00230c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001022:	b15b      	cbz	r3, 1a00103c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001024:	4620      	mov	r0, r4
1a001026:	f7ff fc1f 	bl	1a000868 <prvUnlockQueue>
1a00102a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00102c:	2300      	movs	r3, #0
1a00102e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001032:	e7ed      	b.n	1a001010 <vQueueWaitForMessageRestricted+0x18>
1a001034:	2300      	movs	r3, #0
1a001036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00103a:	e7ef      	b.n	1a00101c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a00103c:	4632      	mov	r2, r6
1a00103e:	4629      	mov	r1, r5
1a001040:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001044:	f000 fcb4 	bl	1a0019b0 <vTaskPlaceOnEventListRestricted>
1a001048:	e7ec      	b.n	1a001024 <vQueueWaitForMessageRestricted+0x2c>

1a00104a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00104a:	f100 0308 	add.w	r3, r0, #8
1a00104e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001054:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001056:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001058:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00105a:	2300      	movs	r3, #0
1a00105c:	6003      	str	r3, [r0, #0]
1a00105e:	4770      	bx	lr

1a001060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001060:	2300      	movs	r3, #0
1a001062:	6103      	str	r3, [r0, #16]
1a001064:	4770      	bx	lr

1a001066 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001066:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001068:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00106a:	689a      	ldr	r2, [r3, #8]
1a00106c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00106e:	689a      	ldr	r2, [r3, #8]
1a001070:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001072:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001074:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001076:	6803      	ldr	r3, [r0, #0]
1a001078:	3301      	adds	r3, #1
1a00107a:	6003      	str	r3, [r0, #0]
1a00107c:	4770      	bx	lr

1a00107e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00107e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001080:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001082:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001086:	d002      	beq.n	1a00108e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001088:	f100 0208 	add.w	r2, r0, #8
1a00108c:	e002      	b.n	1a001094 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00108e:	6902      	ldr	r2, [r0, #16]
1a001090:	e004      	b.n	1a00109c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001092:	461a      	mov	r2, r3
1a001094:	6853      	ldr	r3, [r2, #4]
1a001096:	681c      	ldr	r4, [r3, #0]
1a001098:	42a5      	cmp	r5, r4
1a00109a:	d2fa      	bcs.n	1a001092 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00109c:	6853      	ldr	r3, [r2, #4]
1a00109e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0010a0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0010a2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0010a4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0010a6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0010a8:	6803      	ldr	r3, [r0, #0]
1a0010aa:	3301      	adds	r3, #1
1a0010ac:	6003      	str	r3, [r0, #0]
}
1a0010ae:	bc30      	pop	{r4, r5}
1a0010b0:	4770      	bx	lr

1a0010b2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0010b2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0010b4:	6842      	ldr	r2, [r0, #4]
1a0010b6:	6881      	ldr	r1, [r0, #8]
1a0010b8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0010ba:	6882      	ldr	r2, [r0, #8]
1a0010bc:	6841      	ldr	r1, [r0, #4]
1a0010be:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0010c0:	685a      	ldr	r2, [r3, #4]
1a0010c2:	4290      	cmp	r0, r2
1a0010c4:	d006      	beq.n	1a0010d4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0010c6:	2200      	movs	r2, #0
1a0010c8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0010ca:	681a      	ldr	r2, [r3, #0]
1a0010cc:	3a01      	subs	r2, #1
1a0010ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0010d0:	6818      	ldr	r0, [r3, #0]
}
1a0010d2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0010d4:	6882      	ldr	r2, [r0, #8]
1a0010d6:	605a      	str	r2, [r3, #4]
1a0010d8:	e7f5      	b.n	1a0010c6 <uxListRemove+0x14>
1a0010da:	Address 0x000000001a0010da is out of bounds.


1a0010dc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0010dc:	4b03      	ldr	r3, [pc, #12]	; (1a0010ec <vApplicationGetIdleTaskMemory+0x10>)
1a0010de:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0010e0:	4b03      	ldr	r3, [pc, #12]	; (1a0010f0 <vApplicationGetIdleTaskMemory+0x14>)
1a0010e2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0010e4:	2364      	movs	r3, #100	; 0x64
1a0010e6:	6013      	str	r3, [r2, #0]
1a0010e8:	4770      	bx	lr
1a0010ea:	bf00      	nop
1a0010ec:	10002890 	.word	0x10002890
1a0010f0:	100020c0 	.word	0x100020c0

1a0010f4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0010f4:	4b03      	ldr	r3, [pc, #12]	; (1a001104 <vApplicationGetTimerTaskMemory+0x10>)
1a0010f6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0010f8:	4b03      	ldr	r3, [pc, #12]	; (1a001108 <vApplicationGetTimerTaskMemory+0x14>)
1a0010fa:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0010fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
1a001100:	6013      	str	r3, [r2, #0]
1a001102:	4770      	bx	lr
1a001104:	100028f0 	.word	0x100028f0
1a001108:	10002250 	.word	0x10002250

1a00110c <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a00110c:	b510      	push	{r4, lr}
1a00110e:	b082      	sub	sp, #8
1a001110:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001112:	9001      	str	r0, [sp, #4]
1a001114:	2300      	movs	r3, #0
1a001116:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001118:	f001 f8d6 	bl	1a0022c8 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a00111c:	9901      	ldr	r1, [sp, #4]
1a00111e:	4622      	mov	r2, r4
1a001120:	4804      	ldr	r0, [pc, #16]	; (1a001134 <vAssertCalled+0x28>)
1a001122:	f003 fa97 	bl	1a004654 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001126:	9b00      	ldr	r3, [sp, #0]
1a001128:	2b00      	cmp	r3, #0
1a00112a:	d0fc      	beq.n	1a001126 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a00112c:	f001 f8ee 	bl	1a00230c <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001130:	b002      	add	sp, #8
1a001132:	bd10      	pop	{r4, pc}
1a001134:	1a00500c 	.word	0x1a00500c

1a001138 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001138:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a00113a:	4804      	ldr	r0, [pc, #16]	; (1a00114c <vApplicationMallocFailedHook+0x14>)
1a00113c:	f003 fb14 	bl	1a004768 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001140:	4903      	ldr	r1, [pc, #12]	; (1a001150 <vApplicationMallocFailedHook+0x18>)
1a001142:	202c      	movs	r0, #44	; 0x2c
1a001144:	f7ff ffe2 	bl	1a00110c <vAssertCalled>
1a001148:	bd08      	pop	{r3, pc}
1a00114a:	bf00      	nop
1a00114c:	1a004f98 	.word	0x1a004f98
1a001150:	1a004fbc 	.word	0x1a004fbc

1a001154 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001154:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001156:	4804      	ldr	r0, [pc, #16]	; (1a001168 <vApplicationStackOverflowHook+0x14>)
1a001158:	f003 fa7c 	bl	1a004654 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a00115c:	4903      	ldr	r1, [pc, #12]	; (1a00116c <vApplicationStackOverflowHook+0x18>)
1a00115e:	2050      	movs	r0, #80	; 0x50
1a001160:	f7ff ffd4 	bl	1a00110c <vAssertCalled>
1a001164:	bd08      	pop	{r3, pc}
1a001166:	bf00      	nop
1a001168:	1a004fdc 	.word	0x1a004fdc
1a00116c:	1a004fbc 	.word	0x1a004fbc

1a001170 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001170:	4b0a      	ldr	r3, [pc, #40]	; (1a00119c <prvResetNextTaskUnblockTime+0x2c>)
1a001172:	681b      	ldr	r3, [r3, #0]
1a001174:	681b      	ldr	r3, [r3, #0]
1a001176:	b94b      	cbnz	r3, 1a00118c <prvResetNextTaskUnblockTime+0x1c>
1a001178:	2301      	movs	r3, #1
1a00117a:	b94b      	cbnz	r3, 1a001190 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00117c:	4b07      	ldr	r3, [pc, #28]	; (1a00119c <prvResetNextTaskUnblockTime+0x2c>)
1a00117e:	681b      	ldr	r3, [r3, #0]
1a001180:	68db      	ldr	r3, [r3, #12]
1a001182:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001184:	685a      	ldr	r2, [r3, #4]
1a001186:	4b06      	ldr	r3, [pc, #24]	; (1a0011a0 <prvResetNextTaskUnblockTime+0x30>)
1a001188:	601a      	str	r2, [r3, #0]
1a00118a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00118c:	2300      	movs	r3, #0
1a00118e:	e7f4      	b.n	1a00117a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
1a001190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001194:	4b02      	ldr	r3, [pc, #8]	; (1a0011a0 <prvResetNextTaskUnblockTime+0x30>)
1a001196:	601a      	str	r2, [r3, #0]
1a001198:	4770      	bx	lr
1a00119a:	bf00      	nop
1a00119c:	10002954 	.word	0x10002954
1a0011a0:	10002a28 	.word	0x10002a28

1a0011a4 <prvInitialiseNewTask>:
{
1a0011a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0011a8:	4681      	mov	r9, r0
1a0011aa:	460d      	mov	r5, r1
1a0011ac:	4617      	mov	r7, r2
1a0011ae:	469a      	mov	sl, r3
1a0011b0:	9e08      	ldr	r6, [sp, #32]
1a0011b2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0011b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0011b8:	0092      	lsls	r2, r2, #2
1a0011ba:	21a5      	movs	r1, #165	; 0xa5
1a0011bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0011be:	f002 fdd9 	bl	1a003d74 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0011c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0011c4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0011c8:	3a01      	subs	r2, #1
1a0011ca:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0011ce:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0011d2:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0011d4:	2300      	movs	r3, #0
1a0011d6:	2b0f      	cmp	r3, #15
1a0011d8:	d807      	bhi.n	1a0011ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0011da:	5ce9      	ldrb	r1, [r5, r3]
1a0011dc:	18e2      	adds	r2, r4, r3
1a0011de:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0011e2:	5cea      	ldrb	r2, [r5, r3]
1a0011e4:	b10a      	cbz	r2, 1a0011ea <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0011e6:	3301      	adds	r3, #1
1a0011e8:	e7f5      	b.n	1a0011d6 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0011ea:	2300      	movs	r3, #0
1a0011ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0011f0:	2e06      	cmp	r6, #6
1a0011f2:	d900      	bls.n	1a0011f6 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0011f4:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0011f6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0011f8:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0011fa:	2500      	movs	r5, #0
1a0011fc:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0011fe:	1d20      	adds	r0, r4, #4
1a001200:	f7ff ff2e 	bl	1a001060 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001204:	f104 0018 	add.w	r0, r4, #24
1a001208:	f7ff ff2a 	bl	1a001060 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00120c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00120e:	f1c6 0607 	rsb	r6, r6, #7
1a001212:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001214:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001216:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001218:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a00121c:	4652      	mov	r2, sl
1a00121e:	4649      	mov	r1, r9
1a001220:	4638      	mov	r0, r7
1a001222:	f001 f815 	bl	1a002250 <pxPortInitialiseStack>
1a001226:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001228:	f1b8 0f00 	cmp.w	r8, #0
1a00122c:	d001      	beq.n	1a001232 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00122e:	f8c8 4000 	str.w	r4, [r8]
1a001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001236:	Address 0x000000001a001236 is out of bounds.


1a001238 <prvInitialiseTaskLists>:
{
1a001238:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00123a:	2400      	movs	r4, #0
1a00123c:	e007      	b.n	1a00124e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00123e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001242:	0093      	lsls	r3, r2, #2
1a001244:	480e      	ldr	r0, [pc, #56]	; (1a001280 <prvInitialiseTaskLists+0x48>)
1a001246:	4418      	add	r0, r3
1a001248:	f7ff feff 	bl	1a00104a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00124c:	3401      	adds	r4, #1
1a00124e:	2c06      	cmp	r4, #6
1a001250:	d9f5      	bls.n	1a00123e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001252:	4d0c      	ldr	r5, [pc, #48]	; (1a001284 <prvInitialiseTaskLists+0x4c>)
1a001254:	4628      	mov	r0, r5
1a001256:	f7ff fef8 	bl	1a00104a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00125a:	4c0b      	ldr	r4, [pc, #44]	; (1a001288 <prvInitialiseTaskLists+0x50>)
1a00125c:	4620      	mov	r0, r4
1a00125e:	f7ff fef4 	bl	1a00104a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001262:	480a      	ldr	r0, [pc, #40]	; (1a00128c <prvInitialiseTaskLists+0x54>)
1a001264:	f7ff fef1 	bl	1a00104a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001268:	4809      	ldr	r0, [pc, #36]	; (1a001290 <prvInitialiseTaskLists+0x58>)
1a00126a:	f7ff feee 	bl	1a00104a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00126e:	4809      	ldr	r0, [pc, #36]	; (1a001294 <prvInitialiseTaskLists+0x5c>)
1a001270:	f7ff feeb 	bl	1a00104a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001274:	4b08      	ldr	r3, [pc, #32]	; (1a001298 <prvInitialiseTaskLists+0x60>)
1a001276:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001278:	4b08      	ldr	r3, [pc, #32]	; (1a00129c <prvInitialiseTaskLists+0x64>)
1a00127a:	601c      	str	r4, [r3, #0]
1a00127c:	bd38      	pop	{r3, r4, r5, pc}
1a00127e:	bf00      	nop
1a001280:	1000295c 	.word	0x1000295c
1a001284:	10002a00 	.word	0x10002a00
1a001288:	10002a14 	.word	0x10002a14
1a00128c:	10002a30 	.word	0x10002a30
1a001290:	10002a5c 	.word	0x10002a5c
1a001294:	10002a48 	.word	0x10002a48
1a001298:	10002954 	.word	0x10002954
1a00129c:	10002958 	.word	0x10002958

1a0012a0 <prvAddNewTaskToReadyList>:
{
1a0012a0:	b510      	push	{r4, lr}
1a0012a2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0012a4:	f001 f810 	bl	1a0022c8 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0012a8:	4a21      	ldr	r2, [pc, #132]	; (1a001330 <prvAddNewTaskToReadyList+0x90>)
1a0012aa:	6813      	ldr	r3, [r2, #0]
1a0012ac:	3301      	adds	r3, #1
1a0012ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0012b0:	4b20      	ldr	r3, [pc, #128]	; (1a001334 <prvAddNewTaskToReadyList+0x94>)
1a0012b2:	681b      	ldr	r3, [r3, #0]
1a0012b4:	2b00      	cmp	r3, #0
1a0012b6:	d032      	beq.n	1a00131e <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
1a0012b8:	4b1f      	ldr	r3, [pc, #124]	; (1a001338 <prvAddNewTaskToReadyList+0x98>)
1a0012ba:	681b      	ldr	r3, [r3, #0]
1a0012bc:	b93b      	cbnz	r3, 1a0012ce <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0012be:	4b1d      	ldr	r3, [pc, #116]	; (1a001334 <prvAddNewTaskToReadyList+0x94>)
1a0012c0:	681b      	ldr	r3, [r3, #0]
1a0012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0012c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0012c6:	429a      	cmp	r2, r3
1a0012c8:	d801      	bhi.n	1a0012ce <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
1a0012ca:	4b1a      	ldr	r3, [pc, #104]	; (1a001334 <prvAddNewTaskToReadyList+0x94>)
1a0012cc:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
1a0012ce:	4a1b      	ldr	r2, [pc, #108]	; (1a00133c <prvAddNewTaskToReadyList+0x9c>)
1a0012d0:	6813      	ldr	r3, [r2, #0]
1a0012d2:	3301      	adds	r3, #1
1a0012d4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0012d6:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0012d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0012da:	2201      	movs	r2, #1
1a0012dc:	409a      	lsls	r2, r3
1a0012de:	4918      	ldr	r1, [pc, #96]	; (1a001340 <prvAddNewTaskToReadyList+0xa0>)
1a0012e0:	6808      	ldr	r0, [r1, #0]
1a0012e2:	4302      	orrs	r2, r0
1a0012e4:	600a      	str	r2, [r1, #0]
1a0012e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0012ea:	009a      	lsls	r2, r3, #2
1a0012ec:	1d21      	adds	r1, r4, #4
1a0012ee:	4815      	ldr	r0, [pc, #84]	; (1a001344 <prvAddNewTaskToReadyList+0xa4>)
1a0012f0:	4410      	add	r0, r2
1a0012f2:	f7ff feb8 	bl	1a001066 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0012f6:	f001 f809 	bl	1a00230c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0012fa:	4b0f      	ldr	r3, [pc, #60]	; (1a001338 <prvAddNewTaskToReadyList+0x98>)
1a0012fc:	681b      	ldr	r3, [r3, #0]
1a0012fe:	b16b      	cbz	r3, 1a00131c <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001300:	4b0c      	ldr	r3, [pc, #48]	; (1a001334 <prvAddNewTaskToReadyList+0x94>)
1a001302:	681b      	ldr	r3, [r3, #0]
1a001304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001306:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001308:	429a      	cmp	r2, r3
1a00130a:	d207      	bcs.n	1a00131c <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
1a00130c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001310:	4b0d      	ldr	r3, [pc, #52]	; (1a001348 <prvAddNewTaskToReadyList+0xa8>)
1a001312:	601a      	str	r2, [r3, #0]
1a001314:	f3bf 8f4f 	dsb	sy
1a001318:	f3bf 8f6f 	isb	sy
1a00131c:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
1a00131e:	4b05      	ldr	r3, [pc, #20]	; (1a001334 <prvAddNewTaskToReadyList+0x94>)
1a001320:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001322:	6813      	ldr	r3, [r2, #0]
1a001324:	2b01      	cmp	r3, #1
1a001326:	d1d2      	bne.n	1a0012ce <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
1a001328:	f7ff ff86 	bl	1a001238 <prvInitialiseTaskLists>
1a00132c:	e7cf      	b.n	1a0012ce <prvAddNewTaskToReadyList+0x2e>
1a00132e:	bf00      	nop
1a001330:	100029e8 	.word	0x100029e8
1a001334:	10002950 	.word	0x10002950
1a001338:	10002a44 	.word	0x10002a44
1a00133c:	100029f8 	.word	0x100029f8
1a001340:	100029fc 	.word	0x100029fc
1a001344:	1000295c 	.word	0x1000295c
1a001348:	e000ed04 	.word	0xe000ed04

1a00134c <prvDeleteTCB>:
	{
1a00134c:	b510      	push	{r4, lr}
1a00134e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001350:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001354:	b163      	cbz	r3, 1a001370 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001356:	2b01      	cmp	r3, #1
1a001358:	d011      	beq.n	1a00137e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a00135a:	2b02      	cmp	r3, #2
1a00135c:	d012      	beq.n	1a001384 <prvDeleteTCB+0x38>
1a00135e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001362:	f383 8811 	msr	BASEPRI, r3
1a001366:	f3bf 8f6f 	isb	sy
1a00136a:	f3bf 8f4f 	dsb	sy
1a00136e:	e7fe      	b.n	1a00136e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a001370:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001372:	f7ff f9cf 	bl	1a000714 <vPortFree>
				vPortFree( pxTCB );
1a001376:	4620      	mov	r0, r4
1a001378:	f7ff f9cc 	bl	1a000714 <vPortFree>
1a00137c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a00137e:	f7ff f9c9 	bl	1a000714 <vPortFree>
1a001382:	bd10      	pop	{r4, pc}
1a001384:	bd10      	pop	{r4, pc}
1a001386:	Address 0x000000001a001386 is out of bounds.


1a001388 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001388:	4b0f      	ldr	r3, [pc, #60]	; (1a0013c8 <prvCheckTasksWaitingTermination+0x40>)
1a00138a:	681b      	ldr	r3, [r3, #0]
1a00138c:	b1d3      	cbz	r3, 1a0013c4 <prvCheckTasksWaitingTermination+0x3c>
{
1a00138e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001390:	f000 ff9a 	bl	1a0022c8 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001394:	4b0d      	ldr	r3, [pc, #52]	; (1a0013cc <prvCheckTasksWaitingTermination+0x44>)
1a001396:	68db      	ldr	r3, [r3, #12]
1a001398:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00139a:	1d20      	adds	r0, r4, #4
1a00139c:	f7ff fe89 	bl	1a0010b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0013a0:	4a0b      	ldr	r2, [pc, #44]	; (1a0013d0 <prvCheckTasksWaitingTermination+0x48>)
1a0013a2:	6813      	ldr	r3, [r2, #0]
1a0013a4:	3b01      	subs	r3, #1
1a0013a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0013a8:	4a07      	ldr	r2, [pc, #28]	; (1a0013c8 <prvCheckTasksWaitingTermination+0x40>)
1a0013aa:	6813      	ldr	r3, [r2, #0]
1a0013ac:	3b01      	subs	r3, #1
1a0013ae:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0013b0:	f000 ffac 	bl	1a00230c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0013b4:	4620      	mov	r0, r4
1a0013b6:	f7ff ffc9 	bl	1a00134c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0013ba:	4b03      	ldr	r3, [pc, #12]	; (1a0013c8 <prvCheckTasksWaitingTermination+0x40>)
1a0013bc:	681b      	ldr	r3, [r3, #0]
1a0013be:	2b00      	cmp	r3, #0
1a0013c0:	d1e6      	bne.n	1a001390 <prvCheckTasksWaitingTermination+0x8>
}
1a0013c2:	bd10      	pop	{r4, pc}
1a0013c4:	4770      	bx	lr
1a0013c6:	bf00      	nop
1a0013c8:	100029ec 	.word	0x100029ec
1a0013cc:	10002a5c 	.word	0x10002a5c
1a0013d0:	100029e8 	.word	0x100029e8

1a0013d4 <prvIdleTask>:
{
1a0013d4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0013d6:	f7ff ffd7 	bl	1a001388 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0013da:	4b06      	ldr	r3, [pc, #24]	; (1a0013f4 <prvIdleTask+0x20>)
1a0013dc:	681b      	ldr	r3, [r3, #0]
1a0013de:	2b01      	cmp	r3, #1
1a0013e0:	d9f9      	bls.n	1a0013d6 <prvIdleTask+0x2>
				taskYIELD();
1a0013e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013e6:	4b04      	ldr	r3, [pc, #16]	; (1a0013f8 <prvIdleTask+0x24>)
1a0013e8:	601a      	str	r2, [r3, #0]
1a0013ea:	f3bf 8f4f 	dsb	sy
1a0013ee:	f3bf 8f6f 	isb	sy
1a0013f2:	e7f0      	b.n	1a0013d6 <prvIdleTask+0x2>
1a0013f4:	1000295c 	.word	0x1000295c
1a0013f8:	e000ed04 	.word	0xe000ed04

1a0013fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0013fc:	b570      	push	{r4, r5, r6, lr}
1a0013fe:	4604      	mov	r4, r0
1a001400:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001402:	4b1d      	ldr	r3, [pc, #116]	; (1a001478 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001404:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001406:	4b1d      	ldr	r3, [pc, #116]	; (1a00147c <prvAddCurrentTaskToDelayedList+0x80>)
1a001408:	6818      	ldr	r0, [r3, #0]
1a00140a:	3004      	adds	r0, #4
1a00140c:	f7ff fe51 	bl	1a0010b2 <uxListRemove>
1a001410:	b950      	cbnz	r0, 1a001428 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001412:	4b1a      	ldr	r3, [pc, #104]	; (1a00147c <prvAddCurrentTaskToDelayedList+0x80>)
1a001414:	681b      	ldr	r3, [r3, #0]
1a001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001418:	2301      	movs	r3, #1
1a00141a:	fa03 f202 	lsl.w	r2, r3, r2
1a00141e:	4918      	ldr	r1, [pc, #96]	; (1a001480 <prvAddCurrentTaskToDelayedList+0x84>)
1a001420:	680b      	ldr	r3, [r1, #0]
1a001422:	ea23 0302 	bic.w	r3, r3, r2
1a001426:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001428:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a00142c:	d013      	beq.n	1a001456 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00142e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001430:	4b12      	ldr	r3, [pc, #72]	; (1a00147c <prvAddCurrentTaskToDelayedList+0x80>)
1a001432:	681b      	ldr	r3, [r3, #0]
1a001434:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001436:	42a5      	cmp	r5, r4
1a001438:	d816      	bhi.n	1a001468 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00143a:	4b12      	ldr	r3, [pc, #72]	; (1a001484 <prvAddCurrentTaskToDelayedList+0x88>)
1a00143c:	6818      	ldr	r0, [r3, #0]
1a00143e:	4b0f      	ldr	r3, [pc, #60]	; (1a00147c <prvAddCurrentTaskToDelayedList+0x80>)
1a001440:	6819      	ldr	r1, [r3, #0]
1a001442:	3104      	adds	r1, #4
1a001444:	f7ff fe1b 	bl	1a00107e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001448:	4b0f      	ldr	r3, [pc, #60]	; (1a001488 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00144a:	681b      	ldr	r3, [r3, #0]
1a00144c:	429c      	cmp	r4, r3
1a00144e:	d201      	bcs.n	1a001454 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001450:	4b0d      	ldr	r3, [pc, #52]	; (1a001488 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001452:	601c      	str	r4, [r3, #0]
1a001454:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001456:	2e00      	cmp	r6, #0
1a001458:	d0e9      	beq.n	1a00142e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00145a:	4b08      	ldr	r3, [pc, #32]	; (1a00147c <prvAddCurrentTaskToDelayedList+0x80>)
1a00145c:	6819      	ldr	r1, [r3, #0]
1a00145e:	3104      	adds	r1, #4
1a001460:	480a      	ldr	r0, [pc, #40]	; (1a00148c <prvAddCurrentTaskToDelayedList+0x90>)
1a001462:	f7ff fe00 	bl	1a001066 <vListInsertEnd>
1a001466:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001468:	4b09      	ldr	r3, [pc, #36]	; (1a001490 <prvAddCurrentTaskToDelayedList+0x94>)
1a00146a:	6818      	ldr	r0, [r3, #0]
1a00146c:	4b03      	ldr	r3, [pc, #12]	; (1a00147c <prvAddCurrentTaskToDelayedList+0x80>)
1a00146e:	6819      	ldr	r1, [r3, #0]
1a001470:	3104      	adds	r1, #4
1a001472:	f7ff fe04 	bl	1a00107e <vListInsert>
1a001476:	bd70      	pop	{r4, r5, r6, pc}
1a001478:	10002a70 	.word	0x10002a70
1a00147c:	10002950 	.word	0x10002950
1a001480:	100029fc 	.word	0x100029fc
1a001484:	10002954 	.word	0x10002954
1a001488:	10002a28 	.word	0x10002a28
1a00148c:	10002a48 	.word	0x10002a48
1a001490:	10002958 	.word	0x10002958

1a001494 <xTaskCreateStatic>:
	{
1a001494:	b570      	push	{r4, r5, r6, lr}
1a001496:	b086      	sub	sp, #24
1a001498:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00149a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a00149c:	b175      	cbz	r5, 1a0014bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a00149e:	b1b4      	cbz	r4, 1a0014ce <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0014a0:	2660      	movs	r6, #96	; 0x60
1a0014a2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0014a4:	9e04      	ldr	r6, [sp, #16]
1a0014a6:	2e60      	cmp	r6, #96	; 0x60
1a0014a8:	d01a      	beq.n	1a0014e0 <xTaskCreateStatic+0x4c>
1a0014aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ae:	f383 8811 	msr	BASEPRI, r3
1a0014b2:	f3bf 8f6f 	isb	sy
1a0014b6:	f3bf 8f4f 	dsb	sy
1a0014ba:	e7fe      	b.n	1a0014ba <xTaskCreateStatic+0x26>
1a0014bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014c0:	f383 8811 	msr	BASEPRI, r3
1a0014c4:	f3bf 8f6f 	isb	sy
1a0014c8:	f3bf 8f4f 	dsb	sy
1a0014cc:	e7fe      	b.n	1a0014cc <xTaskCreateStatic+0x38>
1a0014ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014d2:	f383 8811 	msr	BASEPRI, r3
1a0014d6:	f3bf 8f6f 	isb	sy
1a0014da:	f3bf 8f4f 	dsb	sy
1a0014de:	e7fe      	b.n	1a0014de <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0014e0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0014e2:	2502      	movs	r5, #2
1a0014e4:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0014e8:	2500      	movs	r5, #0
1a0014ea:	9503      	str	r5, [sp, #12]
1a0014ec:	9402      	str	r4, [sp, #8]
1a0014ee:	ad05      	add	r5, sp, #20
1a0014f0:	9501      	str	r5, [sp, #4]
1a0014f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0014f4:	9500      	str	r5, [sp, #0]
1a0014f6:	f7ff fe55 	bl	1a0011a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0014fa:	4620      	mov	r0, r4
1a0014fc:	f7ff fed0 	bl	1a0012a0 <prvAddNewTaskToReadyList>
	}
1a001500:	9805      	ldr	r0, [sp, #20]
1a001502:	b006      	add	sp, #24
1a001504:	bd70      	pop	{r4, r5, r6, pc}

1a001506 <xTaskCreate>:
	{
1a001506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00150a:	b085      	sub	sp, #20
1a00150c:	4606      	mov	r6, r0
1a00150e:	460f      	mov	r7, r1
1a001510:	4615      	mov	r5, r2
1a001512:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001514:	0090      	lsls	r0, r2, #2
1a001516:	f7ff f875 	bl	1a000604 <pvPortMalloc>
			if( pxStack != NULL )
1a00151a:	b310      	cbz	r0, 1a001562 <xTaskCreate+0x5c>
1a00151c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00151e:	2060      	movs	r0, #96	; 0x60
1a001520:	f7ff f870 	bl	1a000604 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001524:	4604      	mov	r4, r0
1a001526:	b1c0      	cbz	r0, 1a00155a <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
1a001528:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a00152c:	b1dc      	cbz	r4, 1a001566 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a00152e:	2300      	movs	r3, #0
1a001530:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001534:	9303      	str	r3, [sp, #12]
1a001536:	9402      	str	r4, [sp, #8]
1a001538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00153a:	9301      	str	r3, [sp, #4]
1a00153c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00153e:	9300      	str	r3, [sp, #0]
1a001540:	4643      	mov	r3, r8
1a001542:	462a      	mov	r2, r5
1a001544:	4639      	mov	r1, r7
1a001546:	4630      	mov	r0, r6
1a001548:	f7ff fe2c 	bl	1a0011a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00154c:	4620      	mov	r0, r4
1a00154e:	f7ff fea7 	bl	1a0012a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001552:	2001      	movs	r0, #1
	}
1a001554:	b005      	add	sp, #20
1a001556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a00155a:	4648      	mov	r0, r9
1a00155c:	f7ff f8da 	bl	1a000714 <vPortFree>
1a001560:	e7e4      	b.n	1a00152c <xTaskCreate+0x26>
				pxNewTCB = NULL;
1a001562:	2400      	movs	r4, #0
1a001564:	e7e2      	b.n	1a00152c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00156a:	e7f3      	b.n	1a001554 <xTaskCreate+0x4e>

1a00156c <vTaskStartScheduler>:
{
1a00156c:	b510      	push	{r4, lr}
1a00156e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001570:	2400      	movs	r4, #0
1a001572:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001574:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001576:	aa07      	add	r2, sp, #28
1a001578:	a906      	add	r1, sp, #24
1a00157a:	a805      	add	r0, sp, #20
1a00157c:	f7ff fdae 	bl	1a0010dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001580:	9b05      	ldr	r3, [sp, #20]
1a001582:	9302      	str	r3, [sp, #8]
1a001584:	9b06      	ldr	r3, [sp, #24]
1a001586:	9301      	str	r3, [sp, #4]
1a001588:	9400      	str	r4, [sp, #0]
1a00158a:	4623      	mov	r3, r4
1a00158c:	9a07      	ldr	r2, [sp, #28]
1a00158e:	4919      	ldr	r1, [pc, #100]	; (1a0015f4 <vTaskStartScheduler+0x88>)
1a001590:	4819      	ldr	r0, [pc, #100]	; (1a0015f8 <vTaskStartScheduler+0x8c>)
1a001592:	f7ff ff7f 	bl	1a001494 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001596:	b148      	cbz	r0, 1a0015ac <vTaskStartScheduler+0x40>
			xReturn = pdPASS;
1a001598:	2001      	movs	r0, #1
		if( xReturn == pdPASS )
1a00159a:	2801      	cmp	r0, #1
1a00159c:	d008      	beq.n	1a0015b0 <vTaskStartScheduler+0x44>
	if( xReturn == pdPASS )
1a00159e:	2801      	cmp	r0, #1
1a0015a0:	d009      	beq.n	1a0015b6 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0015a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0015a6:	d01b      	beq.n	1a0015e0 <vTaskStartScheduler+0x74>
}
1a0015a8:	b008      	add	sp, #32
1a0015aa:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0015ac:	2000      	movs	r0, #0
1a0015ae:	e7f4      	b.n	1a00159a <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
1a0015b0:	f000 fc5c 	bl	1a001e6c <xTimerCreateTimerTask>
1a0015b4:	e7f3      	b.n	1a00159e <vTaskStartScheduler+0x32>
1a0015b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ba:	f383 8811 	msr	BASEPRI, r3
1a0015be:	f3bf 8f6f 	isb	sy
1a0015c2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0015c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0015ca:	4b0c      	ldr	r3, [pc, #48]	; (1a0015fc <vTaskStartScheduler+0x90>)
1a0015cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0015ce:	2201      	movs	r2, #1
1a0015d0:	4b0b      	ldr	r3, [pc, #44]	; (1a001600 <vTaskStartScheduler+0x94>)
1a0015d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0015d4:	2200      	movs	r2, #0
1a0015d6:	4b0b      	ldr	r3, [pc, #44]	; (1a001604 <vTaskStartScheduler+0x98>)
1a0015d8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0015da:	f000 ff15 	bl	1a002408 <xPortStartScheduler>
1a0015de:	e7e3      	b.n	1a0015a8 <vTaskStartScheduler+0x3c>
1a0015e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015e4:	f383 8811 	msr	BASEPRI, r3
1a0015e8:	f3bf 8f6f 	isb	sy
1a0015ec:	f3bf 8f4f 	dsb	sy
1a0015f0:	e7fe      	b.n	1a0015f0 <vTaskStartScheduler+0x84>
1a0015f2:	bf00      	nop
1a0015f4:	1a00504c 	.word	0x1a00504c
1a0015f8:	1a0013d5 	.word	0x1a0013d5
1a0015fc:	10002a28 	.word	0x10002a28
1a001600:	10002a44 	.word	0x10002a44
1a001604:	10002a70 	.word	0x10002a70

1a001608 <vTaskEndScheduler>:
{
1a001608:	b508      	push	{r3, lr}
1a00160a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00160e:	f383 8811 	msr	BASEPRI, r3
1a001612:	f3bf 8f6f 	isb	sy
1a001616:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
1a00161a:	2200      	movs	r2, #0
1a00161c:	4b02      	ldr	r3, [pc, #8]	; (1a001628 <vTaskEndScheduler+0x20>)
1a00161e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
1a001620:	f000 fe40 	bl	1a0022a4 <vPortEndScheduler>
1a001624:	bd08      	pop	{r3, pc}
1a001626:	bf00      	nop
1a001628:	10002a44 	.word	0x10002a44

1a00162c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a00162c:	4a02      	ldr	r2, [pc, #8]	; (1a001638 <vTaskSuspendAll+0xc>)
1a00162e:	6813      	ldr	r3, [r2, #0]
1a001630:	3301      	adds	r3, #1
1a001632:	6013      	str	r3, [r2, #0]
1a001634:	4770      	bx	lr
1a001636:	bf00      	nop
1a001638:	100029f4 	.word	0x100029f4

1a00163c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a00163c:	4b01      	ldr	r3, [pc, #4]	; (1a001644 <xTaskGetTickCount+0x8>)
1a00163e:	6818      	ldr	r0, [r3, #0]
}
1a001640:	4770      	bx	lr
1a001642:	bf00      	nop
1a001644:	10002a70 	.word	0x10002a70

1a001648 <xTaskIncrementTick>:
{
1a001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00164a:	4b3c      	ldr	r3, [pc, #240]	; (1a00173c <xTaskIncrementTick+0xf4>)
1a00164c:	681b      	ldr	r3, [r3, #0]
1a00164e:	2b00      	cmp	r3, #0
1a001650:	d168      	bne.n	1a001724 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001652:	4b3b      	ldr	r3, [pc, #236]	; (1a001740 <xTaskIncrementTick+0xf8>)
1a001654:	681d      	ldr	r5, [r3, #0]
1a001656:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001658:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00165a:	b9c5      	cbnz	r5, 1a00168e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00165c:	4b39      	ldr	r3, [pc, #228]	; (1a001744 <xTaskIncrementTick+0xfc>)
1a00165e:	681b      	ldr	r3, [r3, #0]
1a001660:	681b      	ldr	r3, [r3, #0]
1a001662:	b143      	cbz	r3, 1a001676 <xTaskIncrementTick+0x2e>
1a001664:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001668:	f383 8811 	msr	BASEPRI, r3
1a00166c:	f3bf 8f6f 	isb	sy
1a001670:	f3bf 8f4f 	dsb	sy
1a001674:	e7fe      	b.n	1a001674 <xTaskIncrementTick+0x2c>
1a001676:	4a33      	ldr	r2, [pc, #204]	; (1a001744 <xTaskIncrementTick+0xfc>)
1a001678:	6811      	ldr	r1, [r2, #0]
1a00167a:	4b33      	ldr	r3, [pc, #204]	; (1a001748 <xTaskIncrementTick+0x100>)
1a00167c:	6818      	ldr	r0, [r3, #0]
1a00167e:	6010      	str	r0, [r2, #0]
1a001680:	6019      	str	r1, [r3, #0]
1a001682:	4a32      	ldr	r2, [pc, #200]	; (1a00174c <xTaskIncrementTick+0x104>)
1a001684:	6813      	ldr	r3, [r2, #0]
1a001686:	3301      	adds	r3, #1
1a001688:	6013      	str	r3, [r2, #0]
1a00168a:	f7ff fd71 	bl	1a001170 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00168e:	4b30      	ldr	r3, [pc, #192]	; (1a001750 <xTaskIncrementTick+0x108>)
1a001690:	681b      	ldr	r3, [r3, #0]
1a001692:	429d      	cmp	r5, r3
1a001694:	d23a      	bcs.n	1a00170c <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
1a001696:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001698:	4b2e      	ldr	r3, [pc, #184]	; (1a001754 <xTaskIncrementTick+0x10c>)
1a00169a:	681b      	ldr	r3, [r3, #0]
1a00169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00169e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016a2:	009a      	lsls	r2, r3, #2
1a0016a4:	4b2c      	ldr	r3, [pc, #176]	; (1a001758 <xTaskIncrementTick+0x110>)
1a0016a6:	589b      	ldr	r3, [r3, r2]
1a0016a8:	2b01      	cmp	r3, #1
1a0016aa:	d940      	bls.n	1a00172e <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
1a0016ac:	2401      	movs	r4, #1
1a0016ae:	e03e      	b.n	1a00172e <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
1a0016b0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0016b2:	4b24      	ldr	r3, [pc, #144]	; (1a001744 <xTaskIncrementTick+0xfc>)
1a0016b4:	681b      	ldr	r3, [r3, #0]
1a0016b6:	681b      	ldr	r3, [r3, #0]
1a0016b8:	b353      	cbz	r3, 1a001710 <xTaskIncrementTick+0xc8>
1a0016ba:	2300      	movs	r3, #0
1a0016bc:	bb53      	cbnz	r3, 1a001714 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0016be:	4b21      	ldr	r3, [pc, #132]	; (1a001744 <xTaskIncrementTick+0xfc>)
1a0016c0:	681b      	ldr	r3, [r3, #0]
1a0016c2:	68db      	ldr	r3, [r3, #12]
1a0016c4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0016c6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0016c8:	429d      	cmp	r5, r3
1a0016ca:	d328      	bcc.n	1a00171e <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0016cc:	1d37      	adds	r7, r6, #4
1a0016ce:	4638      	mov	r0, r7
1a0016d0:	f7ff fcef 	bl	1a0010b2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0016d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0016d6:	b11b      	cbz	r3, 1a0016e0 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0016d8:	f106 0018 	add.w	r0, r6, #24
1a0016dc:	f7ff fce9 	bl	1a0010b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0016e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0016e2:	2201      	movs	r2, #1
1a0016e4:	409a      	lsls	r2, r3
1a0016e6:	491d      	ldr	r1, [pc, #116]	; (1a00175c <xTaskIncrementTick+0x114>)
1a0016e8:	6808      	ldr	r0, [r1, #0]
1a0016ea:	4302      	orrs	r2, r0
1a0016ec:	600a      	str	r2, [r1, #0]
1a0016ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016f2:	009a      	lsls	r2, r3, #2
1a0016f4:	4639      	mov	r1, r7
1a0016f6:	4818      	ldr	r0, [pc, #96]	; (1a001758 <xTaskIncrementTick+0x110>)
1a0016f8:	4410      	add	r0, r2
1a0016fa:	f7ff fcb4 	bl	1a001066 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0016fe:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001700:	4b14      	ldr	r3, [pc, #80]	; (1a001754 <xTaskIncrementTick+0x10c>)
1a001702:	681b      	ldr	r3, [r3, #0]
1a001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001706:	429a      	cmp	r2, r3
1a001708:	d2d2      	bcs.n	1a0016b0 <xTaskIncrementTick+0x68>
1a00170a:	e7d2      	b.n	1a0016b2 <xTaskIncrementTick+0x6a>
1a00170c:	2400      	movs	r4, #0
1a00170e:	e7d0      	b.n	1a0016b2 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001710:	2301      	movs	r3, #1
1a001712:	e7d3      	b.n	1a0016bc <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001718:	4b0d      	ldr	r3, [pc, #52]	; (1a001750 <xTaskIncrementTick+0x108>)
1a00171a:	601a      	str	r2, [r3, #0]
					break;
1a00171c:	e7bc      	b.n	1a001698 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00171e:	4a0c      	ldr	r2, [pc, #48]	; (1a001750 <xTaskIncrementTick+0x108>)
1a001720:	6013      	str	r3, [r2, #0]
						break;
1a001722:	e7b9      	b.n	1a001698 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001724:	4a0e      	ldr	r2, [pc, #56]	; (1a001760 <xTaskIncrementTick+0x118>)
1a001726:	6813      	ldr	r3, [r2, #0]
1a001728:	3301      	adds	r3, #1
1a00172a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00172c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00172e:	4b0d      	ldr	r3, [pc, #52]	; (1a001764 <xTaskIncrementTick+0x11c>)
1a001730:	681b      	ldr	r3, [r3, #0]
1a001732:	b103      	cbz	r3, 1a001736 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
1a001734:	2401      	movs	r4, #1
}
1a001736:	4620      	mov	r0, r4
1a001738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00173a:	bf00      	nop
1a00173c:	100029f4 	.word	0x100029f4
1a001740:	10002a70 	.word	0x10002a70
1a001744:	10002954 	.word	0x10002954
1a001748:	10002958 	.word	0x10002958
1a00174c:	10002a2c 	.word	0x10002a2c
1a001750:	10002a28 	.word	0x10002a28
1a001754:	10002950 	.word	0x10002950
1a001758:	1000295c 	.word	0x1000295c
1a00175c:	100029fc 	.word	0x100029fc
1a001760:	100029f0 	.word	0x100029f0
1a001764:	10002a74 	.word	0x10002a74

1a001768 <xTaskResumeAll>:
{
1a001768:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00176a:	4b35      	ldr	r3, [pc, #212]	; (1a001840 <xTaskResumeAll+0xd8>)
1a00176c:	681b      	ldr	r3, [r3, #0]
1a00176e:	b943      	cbnz	r3, 1a001782 <xTaskResumeAll+0x1a>
1a001770:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001774:	f383 8811 	msr	BASEPRI, r3
1a001778:	f3bf 8f6f 	isb	sy
1a00177c:	f3bf 8f4f 	dsb	sy
1a001780:	e7fe      	b.n	1a001780 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001782:	f000 fda1 	bl	1a0022c8 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001786:	4b2e      	ldr	r3, [pc, #184]	; (1a001840 <xTaskResumeAll+0xd8>)
1a001788:	681a      	ldr	r2, [r3, #0]
1a00178a:	3a01      	subs	r2, #1
1a00178c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00178e:	681b      	ldr	r3, [r3, #0]
1a001790:	2b00      	cmp	r3, #0
1a001792:	d150      	bne.n	1a001836 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001794:	4b2b      	ldr	r3, [pc, #172]	; (1a001844 <xTaskResumeAll+0xdc>)
1a001796:	681b      	ldr	r3, [r3, #0]
1a001798:	b923      	cbnz	r3, 1a0017a4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00179a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00179c:	f000 fdb6 	bl	1a00230c <vPortExitCritical>
}
1a0017a0:	4620      	mov	r0, r4
1a0017a2:	bd38      	pop	{r3, r4, r5, pc}
1a0017a4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0017a6:	4b28      	ldr	r3, [pc, #160]	; (1a001848 <xTaskResumeAll+0xe0>)
1a0017a8:	681b      	ldr	r3, [r3, #0]
1a0017aa:	b31b      	cbz	r3, 1a0017f4 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0017ac:	4b26      	ldr	r3, [pc, #152]	; (1a001848 <xTaskResumeAll+0xe0>)
1a0017ae:	68db      	ldr	r3, [r3, #12]
1a0017b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0017b2:	f104 0018 	add.w	r0, r4, #24
1a0017b6:	f7ff fc7c 	bl	1a0010b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0017ba:	1d25      	adds	r5, r4, #4
1a0017bc:	4628      	mov	r0, r5
1a0017be:	f7ff fc78 	bl	1a0010b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0017c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0017c4:	2201      	movs	r2, #1
1a0017c6:	409a      	lsls	r2, r3
1a0017c8:	4920      	ldr	r1, [pc, #128]	; (1a00184c <xTaskResumeAll+0xe4>)
1a0017ca:	6808      	ldr	r0, [r1, #0]
1a0017cc:	4302      	orrs	r2, r0
1a0017ce:	600a      	str	r2, [r1, #0]
1a0017d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017d4:	009a      	lsls	r2, r3, #2
1a0017d6:	4629      	mov	r1, r5
1a0017d8:	481d      	ldr	r0, [pc, #116]	; (1a001850 <xTaskResumeAll+0xe8>)
1a0017da:	4410      	add	r0, r2
1a0017dc:	f7ff fc43 	bl	1a001066 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0017e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0017e2:	4b1c      	ldr	r3, [pc, #112]	; (1a001854 <xTaskResumeAll+0xec>)
1a0017e4:	681b      	ldr	r3, [r3, #0]
1a0017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0017e8:	429a      	cmp	r2, r3
1a0017ea:	d3dc      	bcc.n	1a0017a6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0017ec:	2201      	movs	r2, #1
1a0017ee:	4b1a      	ldr	r3, [pc, #104]	; (1a001858 <xTaskResumeAll+0xf0>)
1a0017f0:	601a      	str	r2, [r3, #0]
1a0017f2:	e7d8      	b.n	1a0017a6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0017f4:	b10c      	cbz	r4, 1a0017fa <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0017f6:	f7ff fcbb 	bl	1a001170 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0017fa:	4b18      	ldr	r3, [pc, #96]	; (1a00185c <xTaskResumeAll+0xf4>)
1a0017fc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0017fe:	b974      	cbnz	r4, 1a00181e <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
1a001800:	4b15      	ldr	r3, [pc, #84]	; (1a001858 <xTaskResumeAll+0xf0>)
1a001802:	681b      	ldr	r3, [r3, #0]
1a001804:	b1cb      	cbz	r3, 1a00183a <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a001806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00180a:	4b15      	ldr	r3, [pc, #84]	; (1a001860 <xTaskResumeAll+0xf8>)
1a00180c:	601a      	str	r2, [r3, #0]
1a00180e:	f3bf 8f4f 	dsb	sy
1a001812:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001816:	2401      	movs	r4, #1
1a001818:	e7c0      	b.n	1a00179c <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00181a:	3c01      	subs	r4, #1
1a00181c:	d007      	beq.n	1a00182e <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
1a00181e:	f7ff ff13 	bl	1a001648 <xTaskIncrementTick>
1a001822:	2800      	cmp	r0, #0
1a001824:	d0f9      	beq.n	1a00181a <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
1a001826:	2201      	movs	r2, #1
1a001828:	4b0b      	ldr	r3, [pc, #44]	; (1a001858 <xTaskResumeAll+0xf0>)
1a00182a:	601a      	str	r2, [r3, #0]
1a00182c:	e7f5      	b.n	1a00181a <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
1a00182e:	2200      	movs	r2, #0
1a001830:	4b0a      	ldr	r3, [pc, #40]	; (1a00185c <xTaskResumeAll+0xf4>)
1a001832:	601a      	str	r2, [r3, #0]
1a001834:	e7e4      	b.n	1a001800 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
1a001836:	2400      	movs	r4, #0
1a001838:	e7b0      	b.n	1a00179c <xTaskResumeAll+0x34>
1a00183a:	2400      	movs	r4, #0
1a00183c:	e7ae      	b.n	1a00179c <xTaskResumeAll+0x34>
1a00183e:	bf00      	nop
1a001840:	100029f4 	.word	0x100029f4
1a001844:	100029e8 	.word	0x100029e8
1a001848:	10002a30 	.word	0x10002a30
1a00184c:	100029fc 	.word	0x100029fc
1a001850:	1000295c 	.word	0x1000295c
1a001854:	10002950 	.word	0x10002950
1a001858:	10002a74 	.word	0x10002a74
1a00185c:	100029f0 	.word	0x100029f0
1a001860:	e000ed04 	.word	0xe000ed04

1a001864 <vTaskDelay>:
	{
1a001864:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001866:	b1a8      	cbz	r0, 1a001894 <vTaskDelay+0x30>
1a001868:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a00186a:	4b10      	ldr	r3, [pc, #64]	; (1a0018ac <vTaskDelay+0x48>)
1a00186c:	681b      	ldr	r3, [r3, #0]
1a00186e:	b143      	cbz	r3, 1a001882 <vTaskDelay+0x1e>
1a001870:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001874:	f383 8811 	msr	BASEPRI, r3
1a001878:	f3bf 8f6f 	isb	sy
1a00187c:	f3bf 8f4f 	dsb	sy
1a001880:	e7fe      	b.n	1a001880 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001882:	f7ff fed3 	bl	1a00162c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001886:	2100      	movs	r1, #0
1a001888:	4620      	mov	r0, r4
1a00188a:	f7ff fdb7 	bl	1a0013fc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00188e:	f7ff ff6b 	bl	1a001768 <xTaskResumeAll>
1a001892:	e000      	b.n	1a001896 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
1a001894:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
1a001896:	b938      	cbnz	r0, 1a0018a8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
1a001898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00189c:	4b04      	ldr	r3, [pc, #16]	; (1a0018b0 <vTaskDelay+0x4c>)
1a00189e:	601a      	str	r2, [r3, #0]
1a0018a0:	f3bf 8f4f 	dsb	sy
1a0018a4:	f3bf 8f6f 	isb	sy
1a0018a8:	bd10      	pop	{r4, pc}
1a0018aa:	bf00      	nop
1a0018ac:	100029f4 	.word	0x100029f4
1a0018b0:	e000ed04 	.word	0xe000ed04

1a0018b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0018b4:	4b2d      	ldr	r3, [pc, #180]	; (1a00196c <vTaskSwitchContext+0xb8>)
1a0018b6:	681b      	ldr	r3, [r3, #0]
1a0018b8:	bb53      	cbnz	r3, 1a001910 <vTaskSwitchContext+0x5c>
{
1a0018ba:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0018bc:	2200      	movs	r2, #0
1a0018be:	4b2c      	ldr	r3, [pc, #176]	; (1a001970 <vTaskSwitchContext+0xbc>)
1a0018c0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0018c2:	4b2c      	ldr	r3, [pc, #176]	; (1a001974 <vTaskSwitchContext+0xc0>)
1a0018c4:	681b      	ldr	r3, [r3, #0]
1a0018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0018c8:	681a      	ldr	r2, [r3, #0]
1a0018ca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0018ce:	d103      	bne.n	1a0018d8 <vTaskSwitchContext+0x24>
1a0018d0:	685a      	ldr	r2, [r3, #4]
1a0018d2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0018d6:	d01f      	beq.n	1a001918 <vTaskSwitchContext+0x64>
1a0018d8:	4b26      	ldr	r3, [pc, #152]	; (1a001974 <vTaskSwitchContext+0xc0>)
1a0018da:	6818      	ldr	r0, [r3, #0]
1a0018dc:	6819      	ldr	r1, [r3, #0]
1a0018de:	3134      	adds	r1, #52	; 0x34
1a0018e0:	f7ff fc38 	bl	1a001154 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0018e4:	4b24      	ldr	r3, [pc, #144]	; (1a001978 <vTaskSwitchContext+0xc4>)
1a0018e6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0018e8:	fab3 f383 	clz	r3, r3
1a0018ec:	b2db      	uxtb	r3, r3
1a0018ee:	f1c3 031f 	rsb	r3, r3, #31
1a0018f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0018f6:	008a      	lsls	r2, r1, #2
1a0018f8:	4920      	ldr	r1, [pc, #128]	; (1a00197c <vTaskSwitchContext+0xc8>)
1a0018fa:	588a      	ldr	r2, [r1, r2]
1a0018fc:	b9aa      	cbnz	r2, 1a00192a <vTaskSwitchContext+0x76>
	__asm volatile
1a0018fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001902:	f383 8811 	msr	BASEPRI, r3
1a001906:	f3bf 8f6f 	isb	sy
1a00190a:	f3bf 8f4f 	dsb	sy
1a00190e:	e7fe      	b.n	1a00190e <vTaskSwitchContext+0x5a>
		xYieldPending = pdTRUE;
1a001910:	2201      	movs	r2, #1
1a001912:	4b17      	ldr	r3, [pc, #92]	; (1a001970 <vTaskSwitchContext+0xbc>)
1a001914:	601a      	str	r2, [r3, #0]
1a001916:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
1a001918:	689a      	ldr	r2, [r3, #8]
1a00191a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00191e:	d1db      	bne.n	1a0018d8 <vTaskSwitchContext+0x24>
1a001920:	68db      	ldr	r3, [r3, #12]
1a001922:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001926:	d1d7      	bne.n	1a0018d8 <vTaskSwitchContext+0x24>
1a001928:	e7dc      	b.n	1a0018e4 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00192a:	4814      	ldr	r0, [pc, #80]	; (1a00197c <vTaskSwitchContext+0xc8>)
1a00192c:	009a      	lsls	r2, r3, #2
1a00192e:	18d4      	adds	r4, r2, r3
1a001930:	00a1      	lsls	r1, r4, #2
1a001932:	4401      	add	r1, r0
1a001934:	684c      	ldr	r4, [r1, #4]
1a001936:	6864      	ldr	r4, [r4, #4]
1a001938:	604c      	str	r4, [r1, #4]
1a00193a:	441a      	add	r2, r3
1a00193c:	0091      	lsls	r1, r2, #2
1a00193e:	3108      	adds	r1, #8
1a001940:	4408      	add	r0, r1
1a001942:	4284      	cmp	r4, r0
1a001944:	d009      	beq.n	1a00195a <vTaskSwitchContext+0xa6>
1a001946:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00194a:	009a      	lsls	r2, r3, #2
1a00194c:	4b0b      	ldr	r3, [pc, #44]	; (1a00197c <vTaskSwitchContext+0xc8>)
1a00194e:	4413      	add	r3, r2
1a001950:	685b      	ldr	r3, [r3, #4]
1a001952:	68da      	ldr	r2, [r3, #12]
1a001954:	4b07      	ldr	r3, [pc, #28]	; (1a001974 <vTaskSwitchContext+0xc0>)
1a001956:	601a      	str	r2, [r3, #0]
1a001958:	bd10      	pop	{r4, pc}
1a00195a:	6860      	ldr	r0, [r4, #4]
1a00195c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001960:	0091      	lsls	r1, r2, #2
1a001962:	4a06      	ldr	r2, [pc, #24]	; (1a00197c <vTaskSwitchContext+0xc8>)
1a001964:	440a      	add	r2, r1
1a001966:	6050      	str	r0, [r2, #4]
1a001968:	e7ed      	b.n	1a001946 <vTaskSwitchContext+0x92>
1a00196a:	bf00      	nop
1a00196c:	100029f4 	.word	0x100029f4
1a001970:	10002a74 	.word	0x10002a74
1a001974:	10002950 	.word	0x10002950
1a001978:	100029fc 	.word	0x100029fc
1a00197c:	1000295c 	.word	0x1000295c

1a001980 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001980:	b940      	cbnz	r0, 1a001994 <vTaskPlaceOnEventList+0x14>
1a001982:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001986:	f383 8811 	msr	BASEPRI, r3
1a00198a:	f3bf 8f6f 	isb	sy
1a00198e:	f3bf 8f4f 	dsb	sy
1a001992:	e7fe      	b.n	1a001992 <vTaskPlaceOnEventList+0x12>
{
1a001994:	b510      	push	{r4, lr}
1a001996:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001998:	4b04      	ldr	r3, [pc, #16]	; (1a0019ac <vTaskPlaceOnEventList+0x2c>)
1a00199a:	6819      	ldr	r1, [r3, #0]
1a00199c:	3118      	adds	r1, #24
1a00199e:	f7ff fb6e 	bl	1a00107e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0019a2:	2101      	movs	r1, #1
1a0019a4:	4620      	mov	r0, r4
1a0019a6:	f7ff fd29 	bl	1a0013fc <prvAddCurrentTaskToDelayedList>
1a0019aa:	bd10      	pop	{r4, pc}
1a0019ac:	10002950 	.word	0x10002950

1a0019b0 <vTaskPlaceOnEventListRestricted>:
	{
1a0019b0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0019b2:	b170      	cbz	r0, 1a0019d2 <vTaskPlaceOnEventListRestricted+0x22>
1a0019b4:	460c      	mov	r4, r1
1a0019b6:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0019b8:	4a0a      	ldr	r2, [pc, #40]	; (1a0019e4 <vTaskPlaceOnEventListRestricted+0x34>)
1a0019ba:	6811      	ldr	r1, [r2, #0]
1a0019bc:	3118      	adds	r1, #24
1a0019be:	f7ff fb52 	bl	1a001066 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0019c2:	b10d      	cbz	r5, 1a0019c8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a0019c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0019c8:	4629      	mov	r1, r5
1a0019ca:	4620      	mov	r0, r4
1a0019cc:	f7ff fd16 	bl	1a0013fc <prvAddCurrentTaskToDelayedList>
1a0019d0:	bd38      	pop	{r3, r4, r5, pc}
1a0019d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019d6:	f383 8811 	msr	BASEPRI, r3
1a0019da:	f3bf 8f6f 	isb	sy
1a0019de:	f3bf 8f4f 	dsb	sy
1a0019e2:	e7fe      	b.n	1a0019e2 <vTaskPlaceOnEventListRestricted+0x32>
1a0019e4:	10002950 	.word	0x10002950

1a0019e8 <xTaskRemoveFromEventList>:
{
1a0019e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0019ea:	68c3      	ldr	r3, [r0, #12]
1a0019ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0019ee:	b324      	cbz	r4, 1a001a3a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0019f0:	f104 0518 	add.w	r5, r4, #24
1a0019f4:	4628      	mov	r0, r5
1a0019f6:	f7ff fb5c 	bl	1a0010b2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0019fa:	4b18      	ldr	r3, [pc, #96]	; (1a001a5c <xTaskRemoveFromEventList+0x74>)
1a0019fc:	681b      	ldr	r3, [r3, #0]
1a0019fe:	bb2b      	cbnz	r3, 1a001a4c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001a00:	1d25      	adds	r5, r4, #4
1a001a02:	4628      	mov	r0, r5
1a001a04:	f7ff fb55 	bl	1a0010b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001a0a:	2201      	movs	r2, #1
1a001a0c:	409a      	lsls	r2, r3
1a001a0e:	4914      	ldr	r1, [pc, #80]	; (1a001a60 <xTaskRemoveFromEventList+0x78>)
1a001a10:	6808      	ldr	r0, [r1, #0]
1a001a12:	4302      	orrs	r2, r0
1a001a14:	600a      	str	r2, [r1, #0]
1a001a16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a1a:	009a      	lsls	r2, r3, #2
1a001a1c:	4629      	mov	r1, r5
1a001a1e:	4811      	ldr	r0, [pc, #68]	; (1a001a64 <xTaskRemoveFromEventList+0x7c>)
1a001a20:	4410      	add	r0, r2
1a001a22:	f7ff fb20 	bl	1a001066 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001a26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001a28:	4b0f      	ldr	r3, [pc, #60]	; (1a001a68 <xTaskRemoveFromEventList+0x80>)
1a001a2a:	681b      	ldr	r3, [r3, #0]
1a001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a2e:	429a      	cmp	r2, r3
1a001a30:	d911      	bls.n	1a001a56 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001a32:	2001      	movs	r0, #1
1a001a34:	4b0d      	ldr	r3, [pc, #52]	; (1a001a6c <xTaskRemoveFromEventList+0x84>)
1a001a36:	6018      	str	r0, [r3, #0]
1a001a38:	bd38      	pop	{r3, r4, r5, pc}
1a001a3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a3e:	f383 8811 	msr	BASEPRI, r3
1a001a42:	f3bf 8f6f 	isb	sy
1a001a46:	f3bf 8f4f 	dsb	sy
1a001a4a:	e7fe      	b.n	1a001a4a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001a4c:	4629      	mov	r1, r5
1a001a4e:	4808      	ldr	r0, [pc, #32]	; (1a001a70 <xTaskRemoveFromEventList+0x88>)
1a001a50:	f7ff fb09 	bl	1a001066 <vListInsertEnd>
1a001a54:	e7e7      	b.n	1a001a26 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a001a56:	2000      	movs	r0, #0
}
1a001a58:	bd38      	pop	{r3, r4, r5, pc}
1a001a5a:	bf00      	nop
1a001a5c:	100029f4 	.word	0x100029f4
1a001a60:	100029fc 	.word	0x100029fc
1a001a64:	1000295c 	.word	0x1000295c
1a001a68:	10002950 	.word	0x10002950
1a001a6c:	10002a74 	.word	0x10002a74
1a001a70:	10002a30 	.word	0x10002a30

1a001a74 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001a74:	4b03      	ldr	r3, [pc, #12]	; (1a001a84 <vTaskInternalSetTimeOutState+0x10>)
1a001a76:	681b      	ldr	r3, [r3, #0]
1a001a78:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001a7a:	4b03      	ldr	r3, [pc, #12]	; (1a001a88 <vTaskInternalSetTimeOutState+0x14>)
1a001a7c:	681b      	ldr	r3, [r3, #0]
1a001a7e:	6043      	str	r3, [r0, #4]
1a001a80:	4770      	bx	lr
1a001a82:	bf00      	nop
1a001a84:	10002a2c 	.word	0x10002a2c
1a001a88:	10002a70 	.word	0x10002a70

1a001a8c <xTaskCheckForTimeOut>:
{
1a001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001a8e:	b1e0      	cbz	r0, 1a001aca <xTaskCheckForTimeOut+0x3e>
1a001a90:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001a92:	b319      	cbz	r1, 1a001adc <xTaskCheckForTimeOut+0x50>
1a001a94:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001a96:	f000 fc17 	bl	1a0022c8 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001a9a:	4b1a      	ldr	r3, [pc, #104]	; (1a001b04 <xTaskCheckForTimeOut+0x78>)
1a001a9c:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001a9e:	6869      	ldr	r1, [r5, #4]
1a001aa0:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
1a001aa2:	6823      	ldr	r3, [r4, #0]
1a001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001aa8:	d028      	beq.n	1a001afc <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001aaa:	682f      	ldr	r7, [r5, #0]
1a001aac:	4e16      	ldr	r6, [pc, #88]	; (1a001b08 <xTaskCheckForTimeOut+0x7c>)
1a001aae:	6836      	ldr	r6, [r6, #0]
1a001ab0:	42b7      	cmp	r7, r6
1a001ab2:	d001      	beq.n	1a001ab8 <xTaskCheckForTimeOut+0x2c>
1a001ab4:	4288      	cmp	r0, r1
1a001ab6:	d223      	bcs.n	1a001b00 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001ab8:	429a      	cmp	r2, r3
1a001aba:	d318      	bcc.n	1a001aee <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
1a001abc:	2300      	movs	r3, #0
1a001abe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001ac0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a001ac2:	f000 fc23 	bl	1a00230c <vPortExitCritical>
}
1a001ac6:	4620      	mov	r0, r4
1a001ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001aca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ace:	f383 8811 	msr	BASEPRI, r3
1a001ad2:	f3bf 8f6f 	isb	sy
1a001ad6:	f3bf 8f4f 	dsb	sy
1a001ada:	e7fe      	b.n	1a001ada <xTaskCheckForTimeOut+0x4e>
1a001adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae0:	f383 8811 	msr	BASEPRI, r3
1a001ae4:	f3bf 8f6f 	isb	sy
1a001ae8:	f3bf 8f4f 	dsb	sy
1a001aec:	e7fe      	b.n	1a001aec <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
1a001aee:	1a9b      	subs	r3, r3, r2
1a001af0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001af2:	4628      	mov	r0, r5
1a001af4:	f7ff ffbe 	bl	1a001a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001af8:	2400      	movs	r4, #0
1a001afa:	e7e2      	b.n	1a001ac2 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
1a001afc:	2400      	movs	r4, #0
1a001afe:	e7e0      	b.n	1a001ac2 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
1a001b00:	2401      	movs	r4, #1
1a001b02:	e7de      	b.n	1a001ac2 <xTaskCheckForTimeOut+0x36>
1a001b04:	10002a70 	.word	0x10002a70
1a001b08:	10002a2c 	.word	0x10002a2c

1a001b0c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001b0c:	2201      	movs	r2, #1
1a001b0e:	4b01      	ldr	r3, [pc, #4]	; (1a001b14 <vTaskMissedYield+0x8>)
1a001b10:	601a      	str	r2, [r3, #0]
1a001b12:	4770      	bx	lr
1a001b14:	10002a74 	.word	0x10002a74

1a001b18 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001b18:	4b05      	ldr	r3, [pc, #20]	; (1a001b30 <xTaskGetSchedulerState+0x18>)
1a001b1a:	681b      	ldr	r3, [r3, #0]
1a001b1c:	b123      	cbz	r3, 1a001b28 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b1e:	4b05      	ldr	r3, [pc, #20]	; (1a001b34 <xTaskGetSchedulerState+0x1c>)
1a001b20:	681b      	ldr	r3, [r3, #0]
1a001b22:	b91b      	cbnz	r3, 1a001b2c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
1a001b24:	2002      	movs	r0, #2
1a001b26:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001b28:	2001      	movs	r0, #1
1a001b2a:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
1a001b2c:	2000      	movs	r0, #0
	}
1a001b2e:	4770      	bx	lr
1a001b30:	10002a44 	.word	0x10002a44
1a001b34:	100029f4 	.word	0x100029f4

1a001b38 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001b38:	2800      	cmp	r0, #0
1a001b3a:	d054      	beq.n	1a001be6 <xTaskPriorityInherit+0xae>
	{
1a001b3c:	b538      	push	{r3, r4, r5, lr}
1a001b3e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001b40:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001b42:	492a      	ldr	r1, [pc, #168]	; (1a001bec <xTaskPriorityInherit+0xb4>)
1a001b44:	6809      	ldr	r1, [r1, #0]
1a001b46:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001b48:	428a      	cmp	r2, r1
1a001b4a:	d242      	bcs.n	1a001bd2 <xTaskPriorityInherit+0x9a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001b4c:	6981      	ldr	r1, [r0, #24]
1a001b4e:	2900      	cmp	r1, #0
1a001b50:	db05      	blt.n	1a001b5e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b52:	4926      	ldr	r1, [pc, #152]	; (1a001bec <xTaskPriorityInherit+0xb4>)
1a001b54:	6809      	ldr	r1, [r1, #0]
1a001b56:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001b58:	f1c1 0107 	rsb	r1, r1, #7
1a001b5c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001b5e:	6960      	ldr	r0, [r4, #20]
1a001b60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001b64:	0091      	lsls	r1, r2, #2
1a001b66:	4a22      	ldr	r2, [pc, #136]	; (1a001bf0 <xTaskPriorityInherit+0xb8>)
1a001b68:	440a      	add	r2, r1
1a001b6a:	4290      	cmp	r0, r2
1a001b6c:	d007      	beq.n	1a001b7e <xTaskPriorityInherit+0x46>
1a001b6e:	2200      	movs	r2, #0
1a001b70:	b93a      	cbnz	r2, 1a001b82 <xTaskPriorityInherit+0x4a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001b72:	4a1e      	ldr	r2, [pc, #120]	; (1a001bec <xTaskPriorityInherit+0xb4>)
1a001b74:	6812      	ldr	r2, [r2, #0]
1a001b76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001b78:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001b7a:	2001      	movs	r0, #1
1a001b7c:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001b7e:	2201      	movs	r2, #1
1a001b80:	e7f6      	b.n	1a001b70 <xTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001b82:	1d25      	adds	r5, r4, #4
1a001b84:	4628      	mov	r0, r5
1a001b86:	f7ff fa94 	bl	1a0010b2 <uxListRemove>
1a001b8a:	b968      	cbnz	r0, 1a001ba8 <xTaskPriorityInherit+0x70>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b8e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001b92:	008a      	lsls	r2, r1, #2
1a001b94:	4916      	ldr	r1, [pc, #88]	; (1a001bf0 <xTaskPriorityInherit+0xb8>)
1a001b96:	588a      	ldr	r2, [r1, r2]
1a001b98:	b932      	cbnz	r2, 1a001ba8 <xTaskPriorityInherit+0x70>
1a001b9a:	2201      	movs	r2, #1
1a001b9c:	409a      	lsls	r2, r3
1a001b9e:	4915      	ldr	r1, [pc, #84]	; (1a001bf4 <xTaskPriorityInherit+0xbc>)
1a001ba0:	680b      	ldr	r3, [r1, #0]
1a001ba2:	ea23 0302 	bic.w	r3, r3, r2
1a001ba6:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001ba8:	4b10      	ldr	r3, [pc, #64]	; (1a001bec <xTaskPriorityInherit+0xb4>)
1a001baa:	681b      	ldr	r3, [r3, #0]
1a001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001bae:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001bb0:	2401      	movs	r4, #1
1a001bb2:	fa04 f203 	lsl.w	r2, r4, r3
1a001bb6:	490f      	ldr	r1, [pc, #60]	; (1a001bf4 <xTaskPriorityInherit+0xbc>)
1a001bb8:	6808      	ldr	r0, [r1, #0]
1a001bba:	4302      	orrs	r2, r0
1a001bbc:	600a      	str	r2, [r1, #0]
1a001bbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001bc2:	009a      	lsls	r2, r3, #2
1a001bc4:	4629      	mov	r1, r5
1a001bc6:	480a      	ldr	r0, [pc, #40]	; (1a001bf0 <xTaskPriorityInherit+0xb8>)
1a001bc8:	4410      	add	r0, r2
1a001bca:	f7ff fa4c 	bl	1a001066 <vListInsertEnd>
				xReturn = pdTRUE;
1a001bce:	4620      	mov	r0, r4
1a001bd0:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001bd2:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001bd4:	4b05      	ldr	r3, [pc, #20]	; (1a001bec <xTaskPriorityInherit+0xb4>)
1a001bd6:	681b      	ldr	r3, [r3, #0]
1a001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001bda:	429a      	cmp	r2, r3
1a001bdc:	d201      	bcs.n	1a001be2 <xTaskPriorityInherit+0xaa>
					xReturn = pdTRUE;
1a001bde:	2001      	movs	r0, #1
	}
1a001be0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001be2:	2000      	movs	r0, #0
1a001be4:	bd38      	pop	{r3, r4, r5, pc}
1a001be6:	2000      	movs	r0, #0
1a001be8:	4770      	bx	lr
1a001bea:	bf00      	nop
1a001bec:	10002950 	.word	0x10002950
1a001bf0:	1000295c 	.word	0x1000295c
1a001bf4:	100029fc 	.word	0x100029fc

1a001bf8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001bf8:	2800      	cmp	r0, #0
1a001bfa:	d04a      	beq.n	1a001c92 <xTaskPriorityDisinherit+0x9a>
	{
1a001bfc:	b538      	push	{r3, r4, r5, lr}
1a001bfe:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001c00:	4a27      	ldr	r2, [pc, #156]	; (1a001ca0 <xTaskPriorityDisinherit+0xa8>)
1a001c02:	6812      	ldr	r2, [r2, #0]
1a001c04:	4290      	cmp	r0, r2
1a001c06:	d008      	beq.n	1a001c1a <xTaskPriorityDisinherit+0x22>
1a001c08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c0c:	f383 8811 	msr	BASEPRI, r3
1a001c10:	f3bf 8f6f 	isb	sy
1a001c14:	f3bf 8f4f 	dsb	sy
1a001c18:	e7fe      	b.n	1a001c18 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001c1a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001c1c:	b942      	cbnz	r2, 1a001c30 <xTaskPriorityDisinherit+0x38>
1a001c1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c22:	f383 8811 	msr	BASEPRI, r3
1a001c26:	f3bf 8f6f 	isb	sy
1a001c2a:	f3bf 8f4f 	dsb	sy
1a001c2e:	e7fe      	b.n	1a001c2e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001c30:	3a01      	subs	r2, #1
1a001c32:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001c34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001c36:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001c38:	4288      	cmp	r0, r1
1a001c3a:	d02c      	beq.n	1a001c96 <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001c3c:	bb6a      	cbnz	r2, 1a001c9a <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c3e:	1d25      	adds	r5, r4, #4
1a001c40:	4628      	mov	r0, r5
1a001c42:	f7ff fa36 	bl	1a0010b2 <uxListRemove>
1a001c46:	b970      	cbnz	r0, 1a001c66 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001c48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001c4a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001c4e:	008b      	lsls	r3, r1, #2
1a001c50:	4914      	ldr	r1, [pc, #80]	; (1a001ca4 <xTaskPriorityDisinherit+0xac>)
1a001c52:	58cb      	ldr	r3, [r1, r3]
1a001c54:	b93b      	cbnz	r3, 1a001c66 <xTaskPriorityDisinherit+0x6e>
1a001c56:	2301      	movs	r3, #1
1a001c58:	fa03 f202 	lsl.w	r2, r3, r2
1a001c5c:	4912      	ldr	r1, [pc, #72]	; (1a001ca8 <xTaskPriorityDisinherit+0xb0>)
1a001c5e:	680b      	ldr	r3, [r1, #0]
1a001c60:	ea23 0302 	bic.w	r3, r3, r2
1a001c64:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001c66:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001c68:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c6a:	f1c3 0207 	rsb	r2, r3, #7
1a001c6e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001c70:	2401      	movs	r4, #1
1a001c72:	fa04 f203 	lsl.w	r2, r4, r3
1a001c76:	490c      	ldr	r1, [pc, #48]	; (1a001ca8 <xTaskPriorityDisinherit+0xb0>)
1a001c78:	6808      	ldr	r0, [r1, #0]
1a001c7a:	4302      	orrs	r2, r0
1a001c7c:	600a      	str	r2, [r1, #0]
1a001c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c82:	009a      	lsls	r2, r3, #2
1a001c84:	4629      	mov	r1, r5
1a001c86:	4807      	ldr	r0, [pc, #28]	; (1a001ca4 <xTaskPriorityDisinherit+0xac>)
1a001c88:	4410      	add	r0, r2
1a001c8a:	f7ff f9ec 	bl	1a001066 <vListInsertEnd>
					xReturn = pdTRUE;
1a001c8e:	4620      	mov	r0, r4
1a001c90:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001c92:	2000      	movs	r0, #0
1a001c94:	4770      	bx	lr
1a001c96:	2000      	movs	r0, #0
1a001c98:	bd38      	pop	{r3, r4, r5, pc}
1a001c9a:	2000      	movs	r0, #0
	}
1a001c9c:	bd38      	pop	{r3, r4, r5, pc}
1a001c9e:	bf00      	nop
1a001ca0:	10002950 	.word	0x10002950
1a001ca4:	1000295c 	.word	0x1000295c
1a001ca8:	100029fc 	.word	0x100029fc

1a001cac <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001cac:	2800      	cmp	r0, #0
1a001cae:	d05b      	beq.n	1a001d68 <vTaskPriorityDisinheritAfterTimeout+0xbc>
	{
1a001cb0:	b538      	push	{r3, r4, r5, lr}
1a001cb2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001cb4:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001cb6:	b940      	cbnz	r0, 1a001cca <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001cb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cbc:	f383 8811 	msr	BASEPRI, r3
1a001cc0:	f3bf 8f6f 	isb	sy
1a001cc4:	f3bf 8f4f 	dsb	sy
1a001cc8:	e7fe      	b.n	1a001cc8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001cca:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a001ccc:	428a      	cmp	r2, r1
1a001cce:	d200      	bcs.n	1a001cd2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001cd0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001cd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a001cd4:	428a      	cmp	r2, r1
1a001cd6:	d001      	beq.n	1a001cdc <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001cd8:	2801      	cmp	r0, #1
1a001cda:	d000      	beq.n	1a001cde <vTaskPriorityDisinheritAfterTimeout+0x32>
1a001cdc:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001cde:	4823      	ldr	r0, [pc, #140]	; (1a001d6c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
1a001ce0:	6800      	ldr	r0, [r0, #0]
1a001ce2:	4284      	cmp	r4, r0
1a001ce4:	d108      	bne.n	1a001cf8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001ce6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cea:	f383 8811 	msr	BASEPRI, r3
1a001cee:	f3bf 8f6f 	isb	sy
1a001cf2:	f3bf 8f4f 	dsb	sy
1a001cf6:	e7fe      	b.n	1a001cf6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a001cf8:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001cfa:	69a0      	ldr	r0, [r4, #24]
1a001cfc:	2800      	cmp	r0, #0
1a001cfe:	db02      	blt.n	1a001d06 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d00:	f1c2 0207 	rsb	r2, r2, #7
1a001d04:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001d06:	6963      	ldr	r3, [r4, #20]
1a001d08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a001d0c:	0088      	lsls	r0, r1, #2
1a001d0e:	4a18      	ldr	r2, [pc, #96]	; (1a001d70 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a001d10:	4402      	add	r2, r0
1a001d12:	4293      	cmp	r3, r2
1a001d14:	d126      	bne.n	1a001d64 <vTaskPriorityDisinheritAfterTimeout+0xb8>
1a001d16:	2201      	movs	r2, #1
1a001d18:	2a00      	cmp	r2, #0
1a001d1a:	d0df      	beq.n	1a001cdc <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001d1c:	1d25      	adds	r5, r4, #4
1a001d1e:	4628      	mov	r0, r5
1a001d20:	f7ff f9c7 	bl	1a0010b2 <uxListRemove>
1a001d24:	b970      	cbnz	r0, 1a001d44 <vTaskPriorityDisinheritAfterTimeout+0x98>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001d26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d28:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001d2c:	008b      	lsls	r3, r1, #2
1a001d2e:	4910      	ldr	r1, [pc, #64]	; (1a001d70 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a001d30:	58cb      	ldr	r3, [r1, r3]
1a001d32:	b93b      	cbnz	r3, 1a001d44 <vTaskPriorityDisinheritAfterTimeout+0x98>
1a001d34:	2301      	movs	r3, #1
1a001d36:	fa03 f202 	lsl.w	r2, r3, r2
1a001d3a:	490e      	ldr	r1, [pc, #56]	; (1a001d74 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a001d3c:	680b      	ldr	r3, [r1, #0]
1a001d3e:	ea23 0302 	bic.w	r3, r3, r2
1a001d42:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d46:	2201      	movs	r2, #1
1a001d48:	409a      	lsls	r2, r3
1a001d4a:	490a      	ldr	r1, [pc, #40]	; (1a001d74 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a001d4c:	6808      	ldr	r0, [r1, #0]
1a001d4e:	4302      	orrs	r2, r0
1a001d50:	600a      	str	r2, [r1, #0]
1a001d52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d56:	009a      	lsls	r2, r3, #2
1a001d58:	4629      	mov	r1, r5
1a001d5a:	4805      	ldr	r0, [pc, #20]	; (1a001d70 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a001d5c:	4410      	add	r0, r2
1a001d5e:	f7ff f982 	bl	1a001066 <vListInsertEnd>
	}
1a001d62:	e7bb      	b.n	1a001cdc <vTaskPriorityDisinheritAfterTimeout+0x30>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001d64:	2200      	movs	r2, #0
1a001d66:	e7d7      	b.n	1a001d18 <vTaskPriorityDisinheritAfterTimeout+0x6c>
1a001d68:	4770      	bx	lr
1a001d6a:	bf00      	nop
1a001d6c:	10002950 	.word	0x10002950
1a001d70:	1000295c 	.word	0x1000295c
1a001d74:	100029fc 	.word	0x100029fc

1a001d78 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001d78:	4b05      	ldr	r3, [pc, #20]	; (1a001d90 <pvTaskIncrementMutexHeldCount+0x18>)
1a001d7a:	681b      	ldr	r3, [r3, #0]
1a001d7c:	b123      	cbz	r3, 1a001d88 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001d7e:	4b04      	ldr	r3, [pc, #16]	; (1a001d90 <pvTaskIncrementMutexHeldCount+0x18>)
1a001d80:	681a      	ldr	r2, [r3, #0]
1a001d82:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001d84:	3301      	adds	r3, #1
1a001d86:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001d88:	4b01      	ldr	r3, [pc, #4]	; (1a001d90 <pvTaskIncrementMutexHeldCount+0x18>)
1a001d8a:	6818      	ldr	r0, [r3, #0]
	}
1a001d8c:	4770      	bx	lr
1a001d8e:	bf00      	nop
1a001d90:	10002950 	.word	0x10002950

1a001d94 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001d94:	4b06      	ldr	r3, [pc, #24]	; (1a001db0 <prvGetNextExpireTime+0x1c>)
1a001d96:	681a      	ldr	r2, [r3, #0]
1a001d98:	6813      	ldr	r3, [r2, #0]
1a001d9a:	fab3 f383 	clz	r3, r3
1a001d9e:	095b      	lsrs	r3, r3, #5
1a001da0:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001da2:	b913      	cbnz	r3, 1a001daa <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001da4:	68d3      	ldr	r3, [r2, #12]
1a001da6:	6818      	ldr	r0, [r3, #0]
1a001da8:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001daa:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001dac:	4770      	bx	lr
1a001dae:	bf00      	nop
1a001db0:	10002a78 	.word	0x10002a78

1a001db4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001db4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001db6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001db8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001dba:	4291      	cmp	r1, r2
1a001dbc:	d80c      	bhi.n	1a001dd8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001dbe:	1ad2      	subs	r2, r2, r3
1a001dc0:	6983      	ldr	r3, [r0, #24]
1a001dc2:	429a      	cmp	r2, r3
1a001dc4:	d301      	bcc.n	1a001dca <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001dc6:	2001      	movs	r0, #1
1a001dc8:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001dca:	1d01      	adds	r1, r0, #4
1a001dcc:	4b09      	ldr	r3, [pc, #36]	; (1a001df4 <prvInsertTimerInActiveList+0x40>)
1a001dce:	6818      	ldr	r0, [r3, #0]
1a001dd0:	f7ff f955 	bl	1a00107e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001dd4:	2000      	movs	r0, #0
1a001dd6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001dd8:	429a      	cmp	r2, r3
1a001dda:	d201      	bcs.n	1a001de0 <prvInsertTimerInActiveList+0x2c>
1a001ddc:	4299      	cmp	r1, r3
1a001dde:	d206      	bcs.n	1a001dee <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001de0:	1d01      	adds	r1, r0, #4
1a001de2:	4b05      	ldr	r3, [pc, #20]	; (1a001df8 <prvInsertTimerInActiveList+0x44>)
1a001de4:	6818      	ldr	r0, [r3, #0]
1a001de6:	f7ff f94a 	bl	1a00107e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001dea:	2000      	movs	r0, #0
1a001dec:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001dee:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
1a001df0:	bd08      	pop	{r3, pc}
1a001df2:	bf00      	nop
1a001df4:	10002a7c 	.word	0x10002a7c
1a001df8:	10002a78 	.word	0x10002a78

1a001dfc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001dfc:	b530      	push	{r4, r5, lr}
1a001dfe:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001e00:	f000 fa62 	bl	1a0022c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001e04:	4b11      	ldr	r3, [pc, #68]	; (1a001e4c <prvCheckForValidListAndQueue+0x50>)
1a001e06:	681b      	ldr	r3, [r3, #0]
1a001e08:	b11b      	cbz	r3, 1a001e12 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001e0a:	f000 fa7f 	bl	1a00230c <vPortExitCritical>
}
1a001e0e:	b003      	add	sp, #12
1a001e10:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001e12:	4d0f      	ldr	r5, [pc, #60]	; (1a001e50 <prvCheckForValidListAndQueue+0x54>)
1a001e14:	4628      	mov	r0, r5
1a001e16:	f7ff f918 	bl	1a00104a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001e1a:	4c0e      	ldr	r4, [pc, #56]	; (1a001e54 <prvCheckForValidListAndQueue+0x58>)
1a001e1c:	4620      	mov	r0, r4
1a001e1e:	f7ff f914 	bl	1a00104a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001e22:	4b0d      	ldr	r3, [pc, #52]	; (1a001e58 <prvCheckForValidListAndQueue+0x5c>)
1a001e24:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001e26:	4b0d      	ldr	r3, [pc, #52]	; (1a001e5c <prvCheckForValidListAndQueue+0x60>)
1a001e28:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001e2a:	2300      	movs	r3, #0
1a001e2c:	9300      	str	r3, [sp, #0]
1a001e2e:	4b0c      	ldr	r3, [pc, #48]	; (1a001e60 <prvCheckForValidListAndQueue+0x64>)
1a001e30:	4a0c      	ldr	r2, [pc, #48]	; (1a001e64 <prvCheckForValidListAndQueue+0x68>)
1a001e32:	2110      	movs	r1, #16
1a001e34:	200a      	movs	r0, #10
1a001e36:	f7fe fda0 	bl	1a00097a <xQueueGenericCreateStatic>
1a001e3a:	4b04      	ldr	r3, [pc, #16]	; (1a001e4c <prvCheckForValidListAndQueue+0x50>)
1a001e3c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001e3e:	2800      	cmp	r0, #0
1a001e40:	d0e3      	beq.n	1a001e0a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001e42:	4909      	ldr	r1, [pc, #36]	; (1a001e68 <prvCheckForValidListAndQueue+0x6c>)
1a001e44:	f7ff f8c4 	bl	1a000fd0 <vQueueAddToRegistry>
1a001e48:	e7df      	b.n	1a001e0a <prvCheckForValidListAndQueue+0xe>
1a001e4a:	bf00      	nop
1a001e4c:	10002b9c 	.word	0x10002b9c
1a001e50:	10002b20 	.word	0x10002b20
1a001e54:	10002b34 	.word	0x10002b34
1a001e58:	10002a78 	.word	0x10002a78
1a001e5c:	10002a7c 	.word	0x10002a7c
1a001e60:	10002b4c 	.word	0x10002b4c
1a001e64:	10002a80 	.word	0x10002a80
1a001e68:	1a005054 	.word	0x1a005054

1a001e6c <xTimerCreateTimerTask>:
{
1a001e6c:	b510      	push	{r4, lr}
1a001e6e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001e70:	f7ff ffc4 	bl	1a001dfc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001e74:	4b15      	ldr	r3, [pc, #84]	; (1a001ecc <xTimerCreateTimerTask+0x60>)
1a001e76:	681b      	ldr	r3, [r3, #0]
1a001e78:	b31b      	cbz	r3, 1a001ec2 <xTimerCreateTimerTask+0x56>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001e7a:	2400      	movs	r4, #0
1a001e7c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001e7e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001e80:	aa07      	add	r2, sp, #28
1a001e82:	a906      	add	r1, sp, #24
1a001e84:	a805      	add	r0, sp, #20
1a001e86:	f7ff f935 	bl	1a0010f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001e8a:	9b05      	ldr	r3, [sp, #20]
1a001e8c:	9302      	str	r3, [sp, #8]
1a001e8e:	9b06      	ldr	r3, [sp, #24]
1a001e90:	9301      	str	r3, [sp, #4]
1a001e92:	2304      	movs	r3, #4
1a001e94:	9300      	str	r3, [sp, #0]
1a001e96:	4623      	mov	r3, r4
1a001e98:	9a07      	ldr	r2, [sp, #28]
1a001e9a:	490d      	ldr	r1, [pc, #52]	; (1a001ed0 <xTimerCreateTimerTask+0x64>)
1a001e9c:	480d      	ldr	r0, [pc, #52]	; (1a001ed4 <xTimerCreateTimerTask+0x68>)
1a001e9e:	f7ff faf9 	bl	1a001494 <xTaskCreateStatic>
1a001ea2:	4b0d      	ldr	r3, [pc, #52]	; (1a001ed8 <xTimerCreateTimerTask+0x6c>)
1a001ea4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001ea6:	b150      	cbz	r0, 1a001ebe <xTimerCreateTimerTask+0x52>
				xReturn = pdPASS;
1a001ea8:	2001      	movs	r0, #1
	configASSERT( xReturn );
1a001eaa:	b960      	cbnz	r0, 1a001ec6 <xTimerCreateTimerTask+0x5a>
1a001eac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eb0:	f383 8811 	msr	BASEPRI, r3
1a001eb4:	f3bf 8f6f 	isb	sy
1a001eb8:	f3bf 8f4f 	dsb	sy
1a001ebc:	e7fe      	b.n	1a001ebc <xTimerCreateTimerTask+0x50>
BaseType_t xReturn = pdFAIL;
1a001ebe:	4620      	mov	r0, r4
1a001ec0:	e7f3      	b.n	1a001eaa <xTimerCreateTimerTask+0x3e>
1a001ec2:	2000      	movs	r0, #0
1a001ec4:	e7f1      	b.n	1a001eaa <xTimerCreateTimerTask+0x3e>
}
1a001ec6:	b008      	add	sp, #32
1a001ec8:	bd10      	pop	{r4, pc}
1a001eca:	bf00      	nop
1a001ecc:	10002b9c 	.word	0x10002b9c
1a001ed0:	1a00505c 	.word	0x1a00505c
1a001ed4:	1a0021bd 	.word	0x1a0021bd
1a001ed8:	10002ba0 	.word	0x10002ba0

1a001edc <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001edc:	b1c0      	cbz	r0, 1a001f10 <xTimerGenericCommand+0x34>
{
1a001ede:	b530      	push	{r4, r5, lr}
1a001ee0:	b085      	sub	sp, #20
1a001ee2:	4615      	mov	r5, r2
1a001ee4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001ee6:	4a17      	ldr	r2, [pc, #92]	; (1a001f44 <xTimerGenericCommand+0x68>)
1a001ee8:	6810      	ldr	r0, [r2, #0]
1a001eea:	b340      	cbz	r0, 1a001f3e <xTimerGenericCommand+0x62>
1a001eec:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001eee:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001ef0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001ef2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001ef4:	2905      	cmp	r1, #5
1a001ef6:	dc1c      	bgt.n	1a001f32 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001ef8:	f7ff fe0e 	bl	1a001b18 <xTaskGetSchedulerState>
1a001efc:	2802      	cmp	r0, #2
1a001efe:	d010      	beq.n	1a001f22 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001f00:	2300      	movs	r3, #0
1a001f02:	461a      	mov	r2, r3
1a001f04:	4669      	mov	r1, sp
1a001f06:	480f      	ldr	r0, [pc, #60]	; (1a001f44 <xTimerGenericCommand+0x68>)
1a001f08:	6800      	ldr	r0, [r0, #0]
1a001f0a:	f7fe fdad 	bl	1a000a68 <xQueueGenericSend>
1a001f0e:	e014      	b.n	1a001f3a <xTimerGenericCommand+0x5e>
1a001f10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f14:	f383 8811 	msr	BASEPRI, r3
1a001f18:	f3bf 8f6f 	isb	sy
1a001f1c:	f3bf 8f4f 	dsb	sy
1a001f20:	e7fe      	b.n	1a001f20 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001f22:	2300      	movs	r3, #0
1a001f24:	9a08      	ldr	r2, [sp, #32]
1a001f26:	4669      	mov	r1, sp
1a001f28:	4806      	ldr	r0, [pc, #24]	; (1a001f44 <xTimerGenericCommand+0x68>)
1a001f2a:	6800      	ldr	r0, [r0, #0]
1a001f2c:	f7fe fd9c 	bl	1a000a68 <xQueueGenericSend>
1a001f30:	e003      	b.n	1a001f3a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001f32:	2300      	movs	r3, #0
1a001f34:	4669      	mov	r1, sp
1a001f36:	f7fe fe5b 	bl	1a000bf0 <xQueueGenericSendFromISR>
}
1a001f3a:	b005      	add	sp, #20
1a001f3c:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a001f3e:	2000      	movs	r0, #0
	return xReturn;
1a001f40:	e7fb      	b.n	1a001f3a <xTimerGenericCommand+0x5e>
1a001f42:	bf00      	nop
1a001f44:	10002b9c 	.word	0x10002b9c

1a001f48 <prvSwitchTimerLists>:
{
1a001f48:	b570      	push	{r4, r5, r6, lr}
1a001f4a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001f4c:	4b1a      	ldr	r3, [pc, #104]	; (1a001fb8 <prvSwitchTimerLists+0x70>)
1a001f4e:	681b      	ldr	r3, [r3, #0]
1a001f50:	681a      	ldr	r2, [r3, #0]
1a001f52:	b352      	cbz	r2, 1a001faa <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001f54:	68db      	ldr	r3, [r3, #12]
1a001f56:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001f58:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001f5a:	1d25      	adds	r5, r4, #4
1a001f5c:	4628      	mov	r0, r5
1a001f5e:	f7ff f8a8 	bl	1a0010b2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001f64:	4620      	mov	r0, r4
1a001f66:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001f68:	69e3      	ldr	r3, [r4, #28]
1a001f6a:	2b01      	cmp	r3, #1
1a001f6c:	d1ee      	bne.n	1a001f4c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001f6e:	69a3      	ldr	r3, [r4, #24]
1a001f70:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001f72:	429e      	cmp	r6, r3
1a001f74:	d207      	bcs.n	1a001f86 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001f76:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001f78:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001f7a:	4629      	mov	r1, r5
1a001f7c:	4b0e      	ldr	r3, [pc, #56]	; (1a001fb8 <prvSwitchTimerLists+0x70>)
1a001f7e:	6818      	ldr	r0, [r3, #0]
1a001f80:	f7ff f87d 	bl	1a00107e <vListInsert>
1a001f84:	e7e2      	b.n	1a001f4c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001f86:	2100      	movs	r1, #0
1a001f88:	9100      	str	r1, [sp, #0]
1a001f8a:	460b      	mov	r3, r1
1a001f8c:	4632      	mov	r2, r6
1a001f8e:	4620      	mov	r0, r4
1a001f90:	f7ff ffa4 	bl	1a001edc <xTimerGenericCommand>
				configASSERT( xResult );
1a001f94:	2800      	cmp	r0, #0
1a001f96:	d1d9      	bne.n	1a001f4c <prvSwitchTimerLists+0x4>
1a001f98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f9c:	f383 8811 	msr	BASEPRI, r3
1a001fa0:	f3bf 8f6f 	isb	sy
1a001fa4:	f3bf 8f4f 	dsb	sy
1a001fa8:	e7fe      	b.n	1a001fa8 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001faa:	4a04      	ldr	r2, [pc, #16]	; (1a001fbc <prvSwitchTimerLists+0x74>)
1a001fac:	6810      	ldr	r0, [r2, #0]
1a001fae:	4902      	ldr	r1, [pc, #8]	; (1a001fb8 <prvSwitchTimerLists+0x70>)
1a001fb0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001fb2:	6013      	str	r3, [r2, #0]
}
1a001fb4:	b002      	add	sp, #8
1a001fb6:	bd70      	pop	{r4, r5, r6, pc}
1a001fb8:	10002a78 	.word	0x10002a78
1a001fbc:	10002a7c 	.word	0x10002a7c

1a001fc0 <prvSampleTimeNow>:
{
1a001fc0:	b538      	push	{r3, r4, r5, lr}
1a001fc2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001fc4:	f7ff fb3a 	bl	1a00163c <xTaskGetTickCount>
1a001fc8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001fca:	4b07      	ldr	r3, [pc, #28]	; (1a001fe8 <prvSampleTimeNow+0x28>)
1a001fcc:	681b      	ldr	r3, [r3, #0]
1a001fce:	4298      	cmp	r0, r3
1a001fd0:	d305      	bcc.n	1a001fde <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001fd2:	2300      	movs	r3, #0
1a001fd4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001fd6:	4b04      	ldr	r3, [pc, #16]	; (1a001fe8 <prvSampleTimeNow+0x28>)
1a001fd8:	601c      	str	r4, [r3, #0]
}
1a001fda:	4620      	mov	r0, r4
1a001fdc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001fde:	f7ff ffb3 	bl	1a001f48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001fe2:	2301      	movs	r3, #1
1a001fe4:	602b      	str	r3, [r5, #0]
1a001fe6:	e7f6      	b.n	1a001fd6 <prvSampleTimeNow+0x16>
1a001fe8:	10002b48 	.word	0x10002b48

1a001fec <prvProcessExpiredTimer>:
{
1a001fec:	b570      	push	{r4, r5, r6, lr}
1a001fee:	b082      	sub	sp, #8
1a001ff0:	4605      	mov	r5, r0
1a001ff2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ff4:	4b14      	ldr	r3, [pc, #80]	; (1a002048 <prvProcessExpiredTimer+0x5c>)
1a001ff6:	681b      	ldr	r3, [r3, #0]
1a001ff8:	68db      	ldr	r3, [r3, #12]
1a001ffa:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001ffc:	1d20      	adds	r0, r4, #4
1a001ffe:	f7ff f858 	bl	1a0010b2 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002002:	69e3      	ldr	r3, [r4, #28]
1a002004:	2b01      	cmp	r3, #1
1a002006:	d004      	beq.n	1a002012 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002008:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00200a:	4620      	mov	r0, r4
1a00200c:	4798      	blx	r3
}
1a00200e:	b002      	add	sp, #8
1a002010:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002012:	69a1      	ldr	r1, [r4, #24]
1a002014:	462b      	mov	r3, r5
1a002016:	4632      	mov	r2, r6
1a002018:	4429      	add	r1, r5
1a00201a:	4620      	mov	r0, r4
1a00201c:	f7ff feca 	bl	1a001db4 <prvInsertTimerInActiveList>
1a002020:	2800      	cmp	r0, #0
1a002022:	d0f1      	beq.n	1a002008 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002024:	2100      	movs	r1, #0
1a002026:	9100      	str	r1, [sp, #0]
1a002028:	460b      	mov	r3, r1
1a00202a:	462a      	mov	r2, r5
1a00202c:	4620      	mov	r0, r4
1a00202e:	f7ff ff55 	bl	1a001edc <xTimerGenericCommand>
			configASSERT( xResult );
1a002032:	2800      	cmp	r0, #0
1a002034:	d1e8      	bne.n	1a002008 <prvProcessExpiredTimer+0x1c>
1a002036:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00203a:	f383 8811 	msr	BASEPRI, r3
1a00203e:	f3bf 8f6f 	isb	sy
1a002042:	f3bf 8f4f 	dsb	sy
1a002046:	e7fe      	b.n	1a002046 <prvProcessExpiredTimer+0x5a>
1a002048:	10002a78 	.word	0x10002a78

1a00204c <prvProcessTimerOrBlockTask>:
{
1a00204c:	b570      	push	{r4, r5, r6, lr}
1a00204e:	b082      	sub	sp, #8
1a002050:	4606      	mov	r6, r0
1a002052:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002054:	f7ff faea 	bl	1a00162c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002058:	a801      	add	r0, sp, #4
1a00205a:	f7ff ffb1 	bl	1a001fc0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00205e:	9b01      	ldr	r3, [sp, #4]
1a002060:	bb23      	cbnz	r3, 1a0020ac <prvProcessTimerOrBlockTask+0x60>
1a002062:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002064:	b90c      	cbnz	r4, 1a00206a <prvProcessTimerOrBlockTask+0x1e>
1a002066:	42b0      	cmp	r0, r6
1a002068:	d219      	bcs.n	1a00209e <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
1a00206a:	b12c      	cbz	r4, 1a002078 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00206c:	4b11      	ldr	r3, [pc, #68]	; (1a0020b4 <prvProcessTimerOrBlockTask+0x68>)
1a00206e:	681b      	ldr	r3, [r3, #0]
1a002070:	681c      	ldr	r4, [r3, #0]
1a002072:	fab4 f484 	clz	r4, r4
1a002076:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002078:	4622      	mov	r2, r4
1a00207a:	1b71      	subs	r1, r6, r5
1a00207c:	4b0e      	ldr	r3, [pc, #56]	; (1a0020b8 <prvProcessTimerOrBlockTask+0x6c>)
1a00207e:	6818      	ldr	r0, [r3, #0]
1a002080:	f7fe ffba 	bl	1a000ff8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002084:	f7ff fb70 	bl	1a001768 <xTaskResumeAll>
1a002088:	b938      	cbnz	r0, 1a00209a <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
1a00208a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00208e:	4b0b      	ldr	r3, [pc, #44]	; (1a0020bc <prvProcessTimerOrBlockTask+0x70>)
1a002090:	601a      	str	r2, [r3, #0]
1a002092:	f3bf 8f4f 	dsb	sy
1a002096:	f3bf 8f6f 	isb	sy
}
1a00209a:	b002      	add	sp, #8
1a00209c:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
1a00209e:	f7ff fb63 	bl	1a001768 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0020a2:	4629      	mov	r1, r5
1a0020a4:	4630      	mov	r0, r6
1a0020a6:	f7ff ffa1 	bl	1a001fec <prvProcessExpiredTimer>
1a0020aa:	e7f6      	b.n	1a00209a <prvProcessTimerOrBlockTask+0x4e>
			( void ) xTaskResumeAll();
1a0020ac:	f7ff fb5c 	bl	1a001768 <xTaskResumeAll>
}
1a0020b0:	e7f3      	b.n	1a00209a <prvProcessTimerOrBlockTask+0x4e>
1a0020b2:	bf00      	nop
1a0020b4:	10002a7c 	.word	0x10002a7c
1a0020b8:	10002b9c 	.word	0x10002b9c
1a0020bc:	e000ed04 	.word	0xe000ed04

1a0020c0 <prvProcessReceivedCommands>:
{
1a0020c0:	b530      	push	{r4, r5, lr}
1a0020c2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0020c4:	e002      	b.n	1a0020cc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0020c6:	9b04      	ldr	r3, [sp, #16]
1a0020c8:	2b00      	cmp	r3, #0
1a0020ca:	da0f      	bge.n	1a0020ec <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0020cc:	2200      	movs	r2, #0
1a0020ce:	a904      	add	r1, sp, #16
1a0020d0:	4b39      	ldr	r3, [pc, #228]	; (1a0021b8 <prvProcessReceivedCommands+0xf8>)
1a0020d2:	6818      	ldr	r0, [r3, #0]
1a0020d4:	f7fe fdfc 	bl	1a000cd0 <xQueueReceive>
1a0020d8:	2800      	cmp	r0, #0
1a0020da:	d06a      	beq.n	1a0021b2 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0020dc:	9b04      	ldr	r3, [sp, #16]
1a0020de:	2b00      	cmp	r3, #0
1a0020e0:	daf1      	bge.n	1a0020c6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0020e2:	9907      	ldr	r1, [sp, #28]
1a0020e4:	9806      	ldr	r0, [sp, #24]
1a0020e6:	9b05      	ldr	r3, [sp, #20]
1a0020e8:	4798      	blx	r3
1a0020ea:	e7ec      	b.n	1a0020c6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0020ec:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0020ee:	6963      	ldr	r3, [r4, #20]
1a0020f0:	b113      	cbz	r3, 1a0020f8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0020f2:	1d20      	adds	r0, r4, #4
1a0020f4:	f7fe ffdd 	bl	1a0010b2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0020f8:	a803      	add	r0, sp, #12
1a0020fa:	f7ff ff61 	bl	1a001fc0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0020fe:	9b04      	ldr	r3, [sp, #16]
1a002100:	2b09      	cmp	r3, #9
1a002102:	d8e3      	bhi.n	1a0020cc <prvProcessReceivedCommands+0xc>
1a002104:	a201      	add	r2, pc, #4	; (adr r2, 1a00210c <prvProcessReceivedCommands+0x4c>)
1a002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00210a:	bf00      	nop
1a00210c:	1a002135 	.word	0x1a002135
1a002110:	1a002135 	.word	0x1a002135
1a002114:	1a002135 	.word	0x1a002135
1a002118:	1a0020cd 	.word	0x1a0020cd
1a00211c:	1a00217d 	.word	0x1a00217d
1a002120:	1a0021a3 	.word	0x1a0021a3
1a002124:	1a002135 	.word	0x1a002135
1a002128:	1a002135 	.word	0x1a002135
1a00212c:	1a0020cd 	.word	0x1a0020cd
1a002130:	1a00217d 	.word	0x1a00217d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002134:	9905      	ldr	r1, [sp, #20]
1a002136:	69a5      	ldr	r5, [r4, #24]
1a002138:	460b      	mov	r3, r1
1a00213a:	4602      	mov	r2, r0
1a00213c:	4429      	add	r1, r5
1a00213e:	4620      	mov	r0, r4
1a002140:	f7ff fe38 	bl	1a001db4 <prvInsertTimerInActiveList>
1a002144:	2800      	cmp	r0, #0
1a002146:	d0c1      	beq.n	1a0020cc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002148:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00214a:	4620      	mov	r0, r4
1a00214c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00214e:	69e3      	ldr	r3, [r4, #28]
1a002150:	2b01      	cmp	r3, #1
1a002152:	d1bb      	bne.n	1a0020cc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002154:	69a2      	ldr	r2, [r4, #24]
1a002156:	2100      	movs	r1, #0
1a002158:	9100      	str	r1, [sp, #0]
1a00215a:	460b      	mov	r3, r1
1a00215c:	9805      	ldr	r0, [sp, #20]
1a00215e:	4402      	add	r2, r0
1a002160:	4620      	mov	r0, r4
1a002162:	f7ff febb 	bl	1a001edc <xTimerGenericCommand>
							configASSERT( xResult );
1a002166:	2800      	cmp	r0, #0
1a002168:	d1b0      	bne.n	1a0020cc <prvProcessReceivedCommands+0xc>
1a00216a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00216e:	f383 8811 	msr	BASEPRI, r3
1a002172:	f3bf 8f6f 	isb	sy
1a002176:	f3bf 8f4f 	dsb	sy
1a00217a:	e7fe      	b.n	1a00217a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00217c:	9905      	ldr	r1, [sp, #20]
1a00217e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002180:	b131      	cbz	r1, 1a002190 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002182:	4603      	mov	r3, r0
1a002184:	4602      	mov	r2, r0
1a002186:	4401      	add	r1, r0
1a002188:	4620      	mov	r0, r4
1a00218a:	f7ff fe13 	bl	1a001db4 <prvInsertTimerInActiveList>
					break;
1a00218e:	e79d      	b.n	1a0020cc <prvProcessReceivedCommands+0xc>
1a002190:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002194:	f383 8811 	msr	BASEPRI, r3
1a002198:	f3bf 8f6f 	isb	sy
1a00219c:	f3bf 8f4f 	dsb	sy
1a0021a0:	e7fe      	b.n	1a0021a0 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0021a2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0021a6:	2b00      	cmp	r3, #0
1a0021a8:	d190      	bne.n	1a0020cc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a0021aa:	4620      	mov	r0, r4
1a0021ac:	f7fe fab2 	bl	1a000714 <vPortFree>
1a0021b0:	e78c      	b.n	1a0020cc <prvProcessReceivedCommands+0xc>
}
1a0021b2:	b009      	add	sp, #36	; 0x24
1a0021b4:	bd30      	pop	{r4, r5, pc}
1a0021b6:	bf00      	nop
1a0021b8:	10002b9c 	.word	0x10002b9c

1a0021bc <prvTimerTask>:
{
1a0021bc:	b500      	push	{lr}
1a0021be:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0021c0:	a801      	add	r0, sp, #4
1a0021c2:	f7ff fde7 	bl	1a001d94 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0021c6:	9901      	ldr	r1, [sp, #4]
1a0021c8:	f7ff ff40 	bl	1a00204c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0021cc:	f7ff ff78 	bl	1a0020c0 <prvProcessReceivedCommands>
1a0021d0:	e7f6      	b.n	1a0021c0 <prvTimerTask+0x4>
1a0021d2:	Address 0x000000001a0021d2 is out of bounds.


1a0021d4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0021d4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0021d6:	2300      	movs	r3, #0
1a0021d8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0021da:	4b0d      	ldr	r3, [pc, #52]	; (1a002210 <prvTaskExitError+0x3c>)
1a0021dc:	681b      	ldr	r3, [r3, #0]
1a0021de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0021e2:	d008      	beq.n	1a0021f6 <prvTaskExitError+0x22>
1a0021e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021e8:	f383 8811 	msr	BASEPRI, r3
1a0021ec:	f3bf 8f6f 	isb	sy
1a0021f0:	f3bf 8f4f 	dsb	sy
1a0021f4:	e7fe      	b.n	1a0021f4 <prvTaskExitError+0x20>
1a0021f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021fa:	f383 8811 	msr	BASEPRI, r3
1a0021fe:	f3bf 8f6f 	isb	sy
1a002202:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002206:	9b01      	ldr	r3, [sp, #4]
1a002208:	2b00      	cmp	r3, #0
1a00220a:	d0fc      	beq.n	1a002206 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a00220c:	b002      	add	sp, #8
1a00220e:	4770      	bx	lr
1a002210:	10000000 	.word	0x10000000

1a002214 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002214:	4808      	ldr	r0, [pc, #32]	; (1a002238 <prvPortStartFirstTask+0x24>)
1a002216:	6800      	ldr	r0, [r0, #0]
1a002218:	6800      	ldr	r0, [r0, #0]
1a00221a:	f380 8808 	msr	MSP, r0
1a00221e:	f04f 0000 	mov.w	r0, #0
1a002222:	f380 8814 	msr	CONTROL, r0
1a002226:	b662      	cpsie	i
1a002228:	b661      	cpsie	f
1a00222a:	f3bf 8f4f 	dsb	sy
1a00222e:	f3bf 8f6f 	isb	sy
1a002232:	df00      	svc	0
1a002234:	bf00      	nop
1a002236:	0000      	.short	0x0000
1a002238:	e000ed08 	.word	0xe000ed08

1a00223c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a00223c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a00224c <vPortEnableVFP+0x10>
1a002240:	6801      	ldr	r1, [r0, #0]
1a002242:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002246:	6001      	str	r1, [r0, #0]
1a002248:	4770      	bx	lr
1a00224a:	0000      	.short	0x0000
1a00224c:	e000ed88 	.word	0xe000ed88

1a002250 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002254:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002258:	f021 0101 	bic.w	r1, r1, #1
1a00225c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002260:	4b05      	ldr	r3, [pc, #20]	; (1a002278 <pxPortInitialiseStack+0x28>)
1a002262:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002266:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00226a:	f06f 0302 	mvn.w	r3, #2
1a00226e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002272:	3844      	subs	r0, #68	; 0x44
1a002274:	4770      	bx	lr
1a002276:	bf00      	nop
1a002278:	1a0021d5 	.word	0x1a0021d5
1a00227c:	ffffffff 	.word	0xffffffff

1a002280 <SVC_Handler>:
	__asm volatile (
1a002280:	4b07      	ldr	r3, [pc, #28]	; (1a0022a0 <pxCurrentTCBConst2>)
1a002282:	6819      	ldr	r1, [r3, #0]
1a002284:	6808      	ldr	r0, [r1, #0]
1a002286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00228a:	f380 8809 	msr	PSP, r0
1a00228e:	f3bf 8f6f 	isb	sy
1a002292:	f04f 0000 	mov.w	r0, #0
1a002296:	f380 8811 	msr	BASEPRI, r0
1a00229a:	4770      	bx	lr
1a00229c:	f3af 8000 	nop.w

1a0022a0 <pxCurrentTCBConst2>:
1a0022a0:	10002950 	.word	0x10002950

1a0022a4 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
1a0022a4:	4b07      	ldr	r3, [pc, #28]	; (1a0022c4 <vPortEndScheduler+0x20>)
1a0022a6:	681b      	ldr	r3, [r3, #0]
1a0022a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a0022ac:	d008      	beq.n	1a0022c0 <vPortEndScheduler+0x1c>
1a0022ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022b2:	f383 8811 	msr	BASEPRI, r3
1a0022b6:	f3bf 8f6f 	isb	sy
1a0022ba:	f3bf 8f4f 	dsb	sy
1a0022be:	e7fe      	b.n	1a0022be <vPortEndScheduler+0x1a>
1a0022c0:	4770      	bx	lr
1a0022c2:	bf00      	nop
1a0022c4:	10000000 	.word	0x10000000

1a0022c8 <vPortEnterCritical>:
1a0022c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022cc:	f383 8811 	msr	BASEPRI, r3
1a0022d0:	f3bf 8f6f 	isb	sy
1a0022d4:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0022d8:	4a0a      	ldr	r2, [pc, #40]	; (1a002304 <vPortEnterCritical+0x3c>)
1a0022da:	6813      	ldr	r3, [r2, #0]
1a0022dc:	3301      	adds	r3, #1
1a0022de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0022e0:	2b01      	cmp	r3, #1
1a0022e2:	d10d      	bne.n	1a002300 <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0022e4:	4b08      	ldr	r3, [pc, #32]	; (1a002308 <vPortEnterCritical+0x40>)
1a0022e6:	681b      	ldr	r3, [r3, #0]
1a0022e8:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0022ec:	d008      	beq.n	1a002300 <vPortEnterCritical+0x38>
1a0022ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022f2:	f383 8811 	msr	BASEPRI, r3
1a0022f6:	f3bf 8f6f 	isb	sy
1a0022fa:	f3bf 8f4f 	dsb	sy
1a0022fe:	e7fe      	b.n	1a0022fe <vPortEnterCritical+0x36>
1a002300:	4770      	bx	lr
1a002302:	bf00      	nop
1a002304:	10000000 	.word	0x10000000
1a002308:	e000ed04 	.word	0xe000ed04

1a00230c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a00230c:	4b09      	ldr	r3, [pc, #36]	; (1a002334 <vPortExitCritical+0x28>)
1a00230e:	681b      	ldr	r3, [r3, #0]
1a002310:	b943      	cbnz	r3, 1a002324 <vPortExitCritical+0x18>
1a002312:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002316:	f383 8811 	msr	BASEPRI, r3
1a00231a:	f3bf 8f6f 	isb	sy
1a00231e:	f3bf 8f4f 	dsb	sy
1a002322:	e7fe      	b.n	1a002322 <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002324:	3b01      	subs	r3, #1
1a002326:	4a03      	ldr	r2, [pc, #12]	; (1a002334 <vPortExitCritical+0x28>)
1a002328:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a00232a:	b90b      	cbnz	r3, 1a002330 <vPortExitCritical+0x24>
	__asm volatile
1a00232c:	f383 8811 	msr	BASEPRI, r3
1a002330:	4770      	bx	lr
1a002332:	bf00      	nop
1a002334:	10000000 	.word	0x10000000
1a002338:	ffffffff 	.word	0xffffffff
1a00233c:	ffffffff 	.word	0xffffffff

1a002340 <PendSV_Handler>:
	__asm volatile
1a002340:	f3ef 8009 	mrs	r0, PSP
1a002344:	f3bf 8f6f 	isb	sy
1a002348:	4b15      	ldr	r3, [pc, #84]	; (1a0023a0 <pxCurrentTCBConst>)
1a00234a:	681a      	ldr	r2, [r3, #0]
1a00234c:	f01e 0f10 	tst.w	lr, #16
1a002350:	bf08      	it	eq
1a002352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00235a:	6010      	str	r0, [r2, #0]
1a00235c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002360:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002364:	f380 8811 	msr	BASEPRI, r0
1a002368:	f3bf 8f4f 	dsb	sy
1a00236c:	f3bf 8f6f 	isb	sy
1a002370:	f7ff faa0 	bl	1a0018b4 <vTaskSwitchContext>
1a002374:	f04f 0000 	mov.w	r0, #0
1a002378:	f380 8811 	msr	BASEPRI, r0
1a00237c:	bc09      	pop	{r0, r3}
1a00237e:	6819      	ldr	r1, [r3, #0]
1a002380:	6808      	ldr	r0, [r1, #0]
1a002382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002386:	f01e 0f10 	tst.w	lr, #16
1a00238a:	bf08      	it	eq
1a00238c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002390:	f380 8809 	msr	PSP, r0
1a002394:	f3bf 8f6f 	isb	sy
1a002398:	4770      	bx	lr
1a00239a:	bf00      	nop
1a00239c:	f3af 8000 	nop.w

1a0023a0 <pxCurrentTCBConst>:
1a0023a0:	10002950 	.word	0x10002950

1a0023a4 <SysTick_Handler>:
{
1a0023a4:	b508      	push	{r3, lr}
	__asm volatile
1a0023a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023aa:	f383 8811 	msr	BASEPRI, r3
1a0023ae:	f3bf 8f6f 	isb	sy
1a0023b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0023b6:	f7ff f947 	bl	1a001648 <xTaskIncrementTick>
1a0023ba:	b118      	cbz	r0, 1a0023c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0023bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0023c0:	4b02      	ldr	r3, [pc, #8]	; (1a0023cc <SysTick_Handler+0x28>)
1a0023c2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0023c4:	2300      	movs	r3, #0
1a0023c6:	f383 8811 	msr	BASEPRI, r3
1a0023ca:	bd08      	pop	{r3, pc}
1a0023cc:	e000ed04 	.word	0xe000ed04

1a0023d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0023d0:	4a08      	ldr	r2, [pc, #32]	; (1a0023f4 <vPortSetupTimerInterrupt+0x24>)
1a0023d2:	2300      	movs	r3, #0
1a0023d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0023d6:	4908      	ldr	r1, [pc, #32]	; (1a0023f8 <vPortSetupTimerInterrupt+0x28>)
1a0023d8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0023da:	4b08      	ldr	r3, [pc, #32]	; (1a0023fc <vPortSetupTimerInterrupt+0x2c>)
1a0023dc:	681b      	ldr	r3, [r3, #0]
1a0023de:	4908      	ldr	r1, [pc, #32]	; (1a002400 <vPortSetupTimerInterrupt+0x30>)
1a0023e0:	fba1 1303 	umull	r1, r3, r1, r3
1a0023e4:	095b      	lsrs	r3, r3, #5
1a0023e6:	3b01      	subs	r3, #1
1a0023e8:	4906      	ldr	r1, [pc, #24]	; (1a002404 <vPortSetupTimerInterrupt+0x34>)
1a0023ea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0023ec:	2307      	movs	r3, #7
1a0023ee:	6013      	str	r3, [r2, #0]
1a0023f0:	4770      	bx	lr
1a0023f2:	bf00      	nop
1a0023f4:	e000e010 	.word	0xe000e010
1a0023f8:	e000e018 	.word	0xe000e018
1a0023fc:	10002c0c 	.word	0x10002c0c
1a002400:	51eb851f 	.word	0x51eb851f
1a002404:	e000e014 	.word	0xe000e014

1a002408 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002408:	4b3a      	ldr	r3, [pc, #232]	; (1a0024f4 <xPortStartScheduler+0xec>)
1a00240a:	681a      	ldr	r2, [r3, #0]
1a00240c:	4b3a      	ldr	r3, [pc, #232]	; (1a0024f8 <xPortStartScheduler+0xf0>)
1a00240e:	429a      	cmp	r2, r3
1a002410:	d108      	bne.n	1a002424 <xPortStartScheduler+0x1c>
	__asm volatile
1a002412:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002416:	f383 8811 	msr	BASEPRI, r3
1a00241a:	f3bf 8f6f 	isb	sy
1a00241e:	f3bf 8f4f 	dsb	sy
1a002422:	e7fe      	b.n	1a002422 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002424:	4b33      	ldr	r3, [pc, #204]	; (1a0024f4 <xPortStartScheduler+0xec>)
1a002426:	681a      	ldr	r2, [r3, #0]
1a002428:	4b34      	ldr	r3, [pc, #208]	; (1a0024fc <xPortStartScheduler+0xf4>)
1a00242a:	429a      	cmp	r2, r3
1a00242c:	d108      	bne.n	1a002440 <xPortStartScheduler+0x38>
1a00242e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002432:	f383 8811 	msr	BASEPRI, r3
1a002436:	f3bf 8f6f 	isb	sy
1a00243a:	f3bf 8f4f 	dsb	sy
1a00243e:	e7fe      	b.n	1a00243e <xPortStartScheduler+0x36>
{
1a002440:	b510      	push	{r4, lr}
1a002442:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002444:	4b2e      	ldr	r3, [pc, #184]	; (1a002500 <xPortStartScheduler+0xf8>)
1a002446:	781a      	ldrb	r2, [r3, #0]
1a002448:	b2d2      	uxtb	r2, r2
1a00244a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00244c:	22ff      	movs	r2, #255	; 0xff
1a00244e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002450:	781b      	ldrb	r3, [r3, #0]
1a002452:	b2db      	uxtb	r3, r3
1a002454:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002458:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00245c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002460:	4a28      	ldr	r2, [pc, #160]	; (1a002504 <xPortStartScheduler+0xfc>)
1a002462:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002464:	2207      	movs	r2, #7
1a002466:	4b28      	ldr	r3, [pc, #160]	; (1a002508 <xPortStartScheduler+0x100>)
1a002468:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00246a:	e009      	b.n	1a002480 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00246c:	4a26      	ldr	r2, [pc, #152]	; (1a002508 <xPortStartScheduler+0x100>)
1a00246e:	6813      	ldr	r3, [r2, #0]
1a002470:	3b01      	subs	r3, #1
1a002472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002474:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002478:	005b      	lsls	r3, r3, #1
1a00247a:	b2db      	uxtb	r3, r3
1a00247c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002480:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002484:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002488:	d1f0      	bne.n	1a00246c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00248a:	4b1f      	ldr	r3, [pc, #124]	; (1a002508 <xPortStartScheduler+0x100>)
1a00248c:	681b      	ldr	r3, [r3, #0]
1a00248e:	2b04      	cmp	r3, #4
1a002490:	d008      	beq.n	1a0024a4 <xPortStartScheduler+0x9c>
1a002492:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002496:	f383 8811 	msr	BASEPRI, r3
1a00249a:	f3bf 8f6f 	isb	sy
1a00249e:	f3bf 8f4f 	dsb	sy
1a0024a2:	e7fe      	b.n	1a0024a2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0024a4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0024a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0024aa:	4a17      	ldr	r2, [pc, #92]	; (1a002508 <xPortStartScheduler+0x100>)
1a0024ac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0024ae:	9b01      	ldr	r3, [sp, #4]
1a0024b0:	b2db      	uxtb	r3, r3
1a0024b2:	4a13      	ldr	r2, [pc, #76]	; (1a002500 <xPortStartScheduler+0xf8>)
1a0024b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0024b6:	4b15      	ldr	r3, [pc, #84]	; (1a00250c <xPortStartScheduler+0x104>)
1a0024b8:	681a      	ldr	r2, [r3, #0]
1a0024ba:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0024be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0024c0:	681a      	ldr	r2, [r3, #0]
1a0024c2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0024c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0024c8:	f7ff ff82 	bl	1a0023d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0024cc:	2400      	movs	r4, #0
1a0024ce:	4b10      	ldr	r3, [pc, #64]	; (1a002510 <xPortStartScheduler+0x108>)
1a0024d0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0024d2:	f7ff feb3 	bl	1a00223c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0024d6:	4a0f      	ldr	r2, [pc, #60]	; (1a002514 <xPortStartScheduler+0x10c>)
1a0024d8:	6813      	ldr	r3, [r2, #0]
1a0024da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0024de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0024e0:	f7ff fe98 	bl	1a002214 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0024e4:	f7ff f9e6 	bl	1a0018b4 <vTaskSwitchContext>
	prvTaskExitError();
1a0024e8:	f7ff fe74 	bl	1a0021d4 <prvTaskExitError>
}
1a0024ec:	4620      	mov	r0, r4
1a0024ee:	b002      	add	sp, #8
1a0024f0:	bd10      	pop	{r4, pc}
1a0024f2:	bf00      	nop
1a0024f4:	e000ed00 	.word	0xe000ed00
1a0024f8:	410fc271 	.word	0x410fc271
1a0024fc:	410fc270 	.word	0x410fc270
1a002500:	e000e400 	.word	0xe000e400
1a002504:	10002ba4 	.word	0x10002ba4
1a002508:	10002ba8 	.word	0x10002ba8
1a00250c:	e000ed20 	.word	0xe000ed20
1a002510:	10000000 	.word	0x10000000
1a002514:	e000ef34 	.word	0xe000ef34

1a002518 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002518:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00251c:	2b0f      	cmp	r3, #15
1a00251e:	d90f      	bls.n	1a002540 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002520:	4a10      	ldr	r2, [pc, #64]	; (1a002564 <vPortValidateInterruptPriority+0x4c>)
1a002522:	5c9b      	ldrb	r3, [r3, r2]
1a002524:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002526:	4a10      	ldr	r2, [pc, #64]	; (1a002568 <vPortValidateInterruptPriority+0x50>)
1a002528:	7812      	ldrb	r2, [r2, #0]
1a00252a:	4293      	cmp	r3, r2
1a00252c:	d208      	bcs.n	1a002540 <vPortValidateInterruptPriority+0x28>
1a00252e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002532:	f383 8811 	msr	BASEPRI, r3
1a002536:	f3bf 8f6f 	isb	sy
1a00253a:	f3bf 8f4f 	dsb	sy
1a00253e:	e7fe      	b.n	1a00253e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002540:	4b0a      	ldr	r3, [pc, #40]	; (1a00256c <vPortValidateInterruptPriority+0x54>)
1a002542:	681b      	ldr	r3, [r3, #0]
1a002544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002548:	4a09      	ldr	r2, [pc, #36]	; (1a002570 <vPortValidateInterruptPriority+0x58>)
1a00254a:	6812      	ldr	r2, [r2, #0]
1a00254c:	4293      	cmp	r3, r2
1a00254e:	d908      	bls.n	1a002562 <vPortValidateInterruptPriority+0x4a>
1a002550:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002554:	f383 8811 	msr	BASEPRI, r3
1a002558:	f3bf 8f6f 	isb	sy
1a00255c:	f3bf 8f4f 	dsb	sy
1a002560:	e7fe      	b.n	1a002560 <vPortValidateInterruptPriority+0x48>
1a002562:	4770      	bx	lr
1a002564:	e000e3f0 	.word	0xe000e3f0
1a002568:	10002ba4 	.word	0x10002ba4
1a00256c:	e000ed0c 	.word	0xe000ed0c
1a002570:	10002ba8 	.word	0x10002ba8

1a002574 <_kbhit>:
#endif

static int keyIdx;

int _kbhit()
{
1a002574:	b510      	push	{r4, lr}
   for ( int i=0; i<CONIO_KEYS; i++ )
1a002576:	2400      	movs	r4, #0
1a002578:	2c03      	cmp	r4, #3
1a00257a:	dc0a      	bgt.n	1a002592 <_kbhit+0x1e>
      if ( gpioRead(keys[i]) == 0 ) {
1a00257c:	4b06      	ldr	r3, [pc, #24]	; (1a002598 <_kbhit+0x24>)
1a00257e:	5718      	ldrsb	r0, [r3, r4]
1a002580:	f000 ff2c 	bl	1a0033dc <gpioRead>
1a002584:	b108      	cbz	r0, 1a00258a <_kbhit+0x16>
   for ( int i=0; i<CONIO_KEYS; i++ )
1a002586:	3401      	adds	r4, #1
1a002588:	e7f6      	b.n	1a002578 <_kbhit+0x4>
         keyIdx = i;
1a00258a:	4b04      	ldr	r3, [pc, #16]	; (1a00259c <_kbhit+0x28>)
1a00258c:	601c      	str	r4, [r3, #0]
         return 1;
1a00258e:	2001      	movs	r0, #1
1a002590:	bd10      	pop	{r4, pc}
      }
   return 0;
1a002592:	2000      	movs	r0, #0
}
1a002594:	bd10      	pop	{r4, pc}
1a002596:	bf00      	nop
1a002598:	1a005064 	.word	0x1a005064
1a00259c:	10002bac 	.word	0x10002bac

1a0025a0 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0025a0:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0025a2:	2201      	movs	r2, #1
1a0025a4:	4b04      	ldr	r3, [pc, #16]	; (1a0025b8 <DAC_IRQHandler+0x18>)
1a0025a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0025aa:	4b04      	ldr	r3, [pc, #16]	; (1a0025bc <DAC_IRQHandler+0x1c>)
1a0025ac:	681b      	ldr	r3, [r3, #0]
1a0025ae:	b113      	cbz	r3, 1a0025b6 <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0025b0:	4b02      	ldr	r3, [pc, #8]	; (1a0025bc <DAC_IRQHandler+0x1c>)
1a0025b2:	681b      	ldr	r3, [r3, #0]
1a0025b4:	4798      	blx	r3
1a0025b6:	bd08      	pop	{r3, pc}
1a0025b8:	e000e100 	.word	0xe000e100
1a0025bc:	10002bb0 	.word	0x10002bb0

1a0025c0 <vPrintString>:
BaseType_t xKeyPressesStopApplication = pdTRUE;

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
1a0025c0:	b510      	push	{r4, lr}
1a0025c2:	4604      	mov	r4, r0
   BaseType_t xKeyHit = pdFALSE;

   // Print the string, using a critical section as a crude method of mutual
   // exclusion.
   taskENTER_CRITICAL();
1a0025c4:	f7ff fe80 	bl	1a0022c8 <vPortEnterCritical>
   {
      printf( "%s", pcString );
1a0025c8:	4621      	mov	r1, r4
1a0025ca:	480c      	ldr	r0, [pc, #48]	; (1a0025fc <vPrintString+0x3c>)
1a0025cc:	f002 f842 	bl	1a004654 <iprintf>
      fflush( stdout );
1a0025d0:	4b0b      	ldr	r3, [pc, #44]	; (1a002600 <vPrintString+0x40>)
1a0025d2:	681b      	ldr	r3, [r3, #0]
1a0025d4:	6898      	ldr	r0, [r3, #8]
1a0025d6:	f001 f991 	bl	1a0038fc <fflush>

      // Allow any key to stop the application.
      if( xKeyPressesStopApplication == pdTRUE ) {
1a0025da:	4b0a      	ldr	r3, [pc, #40]	; (1a002604 <vPrintString+0x44>)
1a0025dc:	681b      	ldr	r3, [r3, #0]
1a0025de:	2b01      	cmp	r3, #1
1a0025e0:	d004      	beq.n	1a0025ec <vPrintString+0x2c>
   BaseType_t xKeyHit = pdFALSE;
1a0025e2:	2400      	movs	r4, #0
         xKeyHit = _kbhit();
      }
   }
   taskEXIT_CRITICAL();
1a0025e4:	f7ff fe92 	bl	1a00230c <vPortExitCritical>

   // Allow any key to stop the application running. A real application that
   // actually used the key value should protect access to the keyboard too.
   if( xKeyHit != pdFALSE ) {
1a0025e8:	b924      	cbnz	r4, 1a0025f4 <vPrintString+0x34>
1a0025ea:	bd10      	pop	{r4, pc}
         xKeyHit = _kbhit();
1a0025ec:	f7ff ffc2 	bl	1a002574 <_kbhit>
1a0025f0:	4604      	mov	r4, r0
1a0025f2:	e7f7      	b.n	1a0025e4 <vPrintString+0x24>
      vTaskEndScheduler();
1a0025f4:	f7ff f808 	bl	1a001608 <vTaskEndScheduler>
   }
}
1a0025f8:	e7f7      	b.n	1a0025ea <vPrintString+0x2a>
1a0025fa:	bf00      	nop
1a0025fc:	1a005068 	.word	0x1a005068
1a002600:	10000040 	.word	0x10000040
1a002604:	10000004 	.word	0x10000004

1a002608 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002608:	2200      	movs	r2, #0
1a00260a:	2a05      	cmp	r2, #5
1a00260c:	d819      	bhi.n	1a002642 <Board_LED_Init+0x3a>
{
1a00260e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002610:	490c      	ldr	r1, [pc, #48]	; (1a002644 <Board_LED_Init+0x3c>)
1a002612:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002616:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00261a:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00261c:	4b0a      	ldr	r3, [pc, #40]	; (1a002648 <Board_LED_Init+0x40>)
1a00261e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002622:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002626:	2001      	movs	r0, #1
1a002628:	40a0      	lsls	r0, r4
1a00262a:	4301      	orrs	r1, r0
1a00262c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002630:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002634:	2100      	movs	r1, #0
1a002636:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002638:	3201      	adds	r2, #1
1a00263a:	2a05      	cmp	r2, #5
1a00263c:	d9e8      	bls.n	1a002610 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00263e:	bc70      	pop	{r4, r5, r6}
1a002640:	4770      	bx	lr
1a002642:	4770      	bx	lr
1a002644:	1a005078 	.word	0x1a005078
1a002648:	400f4000 	.word	0x400f4000

1a00264c <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00264c:	2300      	movs	r3, #0
1a00264e:	2b03      	cmp	r3, #3
1a002650:	d816      	bhi.n	1a002680 <Board_TEC_Init+0x34>
{
1a002652:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002654:	490b      	ldr	r1, [pc, #44]	; (1a002684 <Board_TEC_Init+0x38>)
1a002656:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00265a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00265e:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002660:	4c09      	ldr	r4, [pc, #36]	; (1a002688 <Board_TEC_Init+0x3c>)
1a002662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002666:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00266a:	2001      	movs	r0, #1
1a00266c:	40a8      	lsls	r0, r5
1a00266e:	ea21 0100 	bic.w	r1, r1, r0
1a002672:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002676:	3301      	adds	r3, #1
1a002678:	2b03      	cmp	r3, #3
1a00267a:	d9eb      	bls.n	1a002654 <Board_TEC_Init+0x8>
   }
}
1a00267c:	bc30      	pop	{r4, r5}
1a00267e:	4770      	bx	lr
1a002680:	4770      	bx	lr
1a002682:	bf00      	nop
1a002684:	1a005070 	.word	0x1a005070
1a002688:	400f4000 	.word	0x400f4000

1a00268c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00268c:	2300      	movs	r3, #0
1a00268e:	2b08      	cmp	r3, #8
1a002690:	d816      	bhi.n	1a0026c0 <Board_GPIO_Init+0x34>
{
1a002692:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002694:	490b      	ldr	r1, [pc, #44]	; (1a0026c4 <Board_GPIO_Init+0x38>)
1a002696:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00269a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00269e:	784d      	ldrb	r5, [r1, #1]
1a0026a0:	4c09      	ldr	r4, [pc, #36]	; (1a0026c8 <Board_GPIO_Init+0x3c>)
1a0026a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0026a6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0026aa:	2001      	movs	r0, #1
1a0026ac:	40a8      	lsls	r0, r5
1a0026ae:	ea21 0100 	bic.w	r1, r1, r0
1a0026b2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0026b6:	3301      	adds	r3, #1
1a0026b8:	2b08      	cmp	r3, #8
1a0026ba:	d9eb      	bls.n	1a002694 <Board_GPIO_Init+0x8>
   }
}
1a0026bc:	bc30      	pop	{r4, r5}
1a0026be:	4770      	bx	lr
1a0026c0:	4770      	bx	lr
1a0026c2:	bf00      	nop
1a0026c4:	1a005084 	.word	0x1a005084
1a0026c8:	400f4000 	.word	0x400f4000

1a0026cc <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0026cc:	b510      	push	{r4, lr}
1a0026ce:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0026d0:	4c08      	ldr	r4, [pc, #32]	; (1a0026f4 <Board_ADC_Init+0x28>)
1a0026d2:	4669      	mov	r1, sp
1a0026d4:	4620      	mov	r0, r4
1a0026d6:	f000 f9f3 	bl	1a002ac0 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0026da:	4a07      	ldr	r2, [pc, #28]	; (1a0026f8 <Board_ADC_Init+0x2c>)
1a0026dc:	4669      	mov	r1, sp
1a0026de:	4620      	mov	r0, r4
1a0026e0:	f000 fa0e 	bl	1a002b00 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0026e4:	2200      	movs	r2, #0
1a0026e6:	4669      	mov	r1, sp
1a0026e8:	4620      	mov	r0, r4
1a0026ea:	f000 fa22 	bl	1a002b32 <Chip_ADC_SetResolution>
}
1a0026ee:	b002      	add	sp, #8
1a0026f0:	bd10      	pop	{r4, pc}
1a0026f2:	bf00      	nop
1a0026f4:	400e3000 	.word	0x400e3000
1a0026f8:	00061a80 	.word	0x00061a80

1a0026fc <Board_SPI_Init>:
{
1a0026fc:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0026fe:	4c0b      	ldr	r4, [pc, #44]	; (1a00272c <Board_SPI_Init+0x30>)
1a002700:	4620      	mov	r0, r4
1a002702:	f000 fe15 	bl	1a003330 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002706:	6863      	ldr	r3, [r4, #4]
1a002708:	f023 0304 	bic.w	r3, r3, #4
1a00270c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00270e:	6823      	ldr	r3, [r4, #0]
1a002710:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002714:	f043 0307 	orr.w	r3, r3, #7
1a002718:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00271a:	4905      	ldr	r1, [pc, #20]	; (1a002730 <Board_SPI_Init+0x34>)
1a00271c:	4620      	mov	r0, r4
1a00271e:	f000 fde8 	bl	1a0032f2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002722:	6863      	ldr	r3, [r4, #4]
1a002724:	f043 0302 	orr.w	r3, r3, #2
1a002728:	6063      	str	r3, [r4, #4]
1a00272a:	bd10      	pop	{r4, pc}
1a00272c:	400c5000 	.word	0x400c5000
1a002730:	000186a0 	.word	0x000186a0

1a002734 <Board_I2C_Init>:
{
1a002734:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002736:	2000      	movs	r0, #0
1a002738:	f000 fd8e 	bl	1a003258 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00273c:	f640 0208 	movw	r2, #2056	; 0x808
1a002740:	4b03      	ldr	r3, [pc, #12]	; (1a002750 <Board_I2C_Init+0x1c>)
1a002742:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002746:	4903      	ldr	r1, [pc, #12]	; (1a002754 <Board_I2C_Init+0x20>)
1a002748:	2000      	movs	r0, #0
1a00274a:	f000 fd97 	bl	1a00327c <Chip_I2C_SetClockRate>
1a00274e:	bd08      	pop	{r3, pc}
1a002750:	40086000 	.word	0x40086000
1a002754:	000f4240 	.word	0x000f4240

1a002758 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002758:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00275a:	4c07      	ldr	r4, [pc, #28]	; (1a002778 <Board_Debug_Init+0x20>)
1a00275c:	4620      	mov	r0, r4
1a00275e:	f000 f8ed 	bl	1a00293c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002762:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002766:	4620      	mov	r0, r4
1a002768:	f000 f912 	bl	1a002990 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00276c:	2303      	movs	r3, #3
1a00276e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002770:	2301      	movs	r3, #1
1a002772:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002774:	bd10      	pop	{r4, pc}
1a002776:	bf00      	nop
1a002778:	400c1000 	.word	0x400c1000

1a00277c <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00277c:	4b03      	ldr	r3, [pc, #12]	; (1a00278c <Board_UARTPutChar+0x10>)
1a00277e:	695b      	ldr	r3, [r3, #20]
}


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002780:	f013 0f20 	tst.w	r3, #32
1a002784:	d0fa      	beq.n	1a00277c <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002786:	4b01      	ldr	r3, [pc, #4]	; (1a00278c <Board_UARTPutChar+0x10>)
1a002788:	6018      	str	r0, [r3, #0]
1a00278a:	4770      	bx	lr
1a00278c:	400c1000 	.word	0x400c1000

1a002790 <Board_UARTGetChar>:
	return pUART->LSR;
1a002790:	4b05      	ldr	r3, [pc, #20]	; (1a0027a8 <Board_UARTGetChar+0x18>)
1a002792:	695b      	ldr	r3, [r3, #20]
}


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002794:	f013 0f01 	tst.w	r3, #1
1a002798:	d003      	beq.n	1a0027a2 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00279a:	4b03      	ldr	r3, [pc, #12]	; (1a0027a8 <Board_UARTGetChar+0x18>)
1a00279c:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00279e:	b2c0      	uxtb	r0, r0
1a0027a0:	4770      	bx	lr
   }
   return EOF;
1a0027a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0027a6:	4770      	bx	lr
1a0027a8:	400c1000 	.word	0x400c1000

1a0027ac <Board_LED_Set>:
}


void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a0027ac:	2805      	cmp	r0, #5
1a0027ae:	d80b      	bhi.n	1a0027c8 <Board_LED_Set+0x1c>
      return;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, On);
1a0027b0:	4a06      	ldr	r2, [pc, #24]	; (1a0027cc <Board_LED_Set+0x20>)
1a0027b2:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a0027b6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a0027ba:	7842      	ldrb	r2, [r0, #1]
	pGPIO->B[port][pin] = setting;
1a0027bc:	015b      	lsls	r3, r3, #5
1a0027be:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0027c2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0027c6:	5499      	strb	r1, [r3, r2]
1a0027c8:	4770      	bx	lr
1a0027ca:	bf00      	nop
1a0027cc:	1a005078 	.word	0x1a005078

1a0027d0 <Board_LED_Test>:
}


bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a0027d0:	2805      	cmp	r0, #5
1a0027d2:	d80f      	bhi.n	1a0027f4 <Board_LED_Test+0x24>
      return false;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   return Chip_GPIO_GetPinState(LPC_GPIO_PORT, io->port, io->pin);
1a0027d4:	4a08      	ldr	r2, [pc, #32]	; (1a0027f8 <Board_LED_Test+0x28>)
1a0027d6:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a0027da:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a0027de:	7842      	ldrb	r2, [r0, #1]
	return (bool) pGPIO->B[port][pin];
1a0027e0:	015b      	lsls	r3, r3, #5
1a0027e2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0027e6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0027ea:	5c98      	ldrb	r0, [r3, r2]
1a0027ec:	3000      	adds	r0, #0
1a0027ee:	bf18      	it	ne
1a0027f0:	2001      	movne	r0, #1
1a0027f2:	4770      	bx	lr
      return false;
1a0027f4:	2000      	movs	r0, #0
}
1a0027f6:	4770      	bx	lr
1a0027f8:	1a005078 	.word	0x1a005078

1a0027fc <Board_LED_Toggle>:


void Board_LED_Toggle(uint8_t LEDNumber)
{
1a0027fc:	b510      	push	{r4, lr}
1a0027fe:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a002800:	f7ff ffe6 	bl	1a0027d0 <Board_LED_Test>
1a002804:	f080 0101 	eor.w	r1, r0, #1
1a002808:	b2c9      	uxtb	r1, r1
1a00280a:	4620      	mov	r0, r4
1a00280c:	f7ff ffce 	bl	1a0027ac <Board_LED_Set>
1a002810:	bd10      	pop	{r4, pc}
1a002812:	Address 0x000000001a002812 is out of bounds.


1a002814 <Board_Init>:
}


void Board_Init(void)
{
1a002814:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002816:	f7ff ff9f 	bl	1a002758 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00281a:	4809      	ldr	r0, [pc, #36]	; (1a002840 <Board_Init+0x2c>)
1a00281c:	f000 fd0a 	bl	1a003234 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002820:	f7ff ff34 	bl	1a00268c <Board_GPIO_Init>
   Board_ADC_Init();
1a002824:	f7ff ff52 	bl	1a0026cc <Board_ADC_Init>
   Board_SPI_Init();
1a002828:	f7ff ff68 	bl	1a0026fc <Board_SPI_Init>
   Board_I2C_Init();
1a00282c:	f7ff ff82 	bl	1a002734 <Board_I2C_Init>

   Board_LED_Init();
1a002830:	f7ff feea 	bl	1a002608 <Board_LED_Init>
   Board_TEC_Init();
1a002834:	f7ff ff0a 	bl	1a00264c <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002838:	f000 f982 	bl	1a002b40 <SystemCoreClockUpdate>
1a00283c:	bd08      	pop	{r3, pc}
1a00283e:	bf00      	nop
1a002840:	400f4000 	.word	0x400f4000

1a002844 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002844:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002846:	b2c0      	uxtb	r0, r0
1a002848:	f7ff ff98 	bl	1a00277c <Board_UARTPutChar>
1a00284c:	bd08      	pop	{r3, pc}

1a00284e <__stdio_getchar>:
}

int __stdio_getchar()
{
1a00284e:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002850:	f7ff ff9e 	bl	1a002790 <Board_UARTGetChar>
}
1a002854:	bd08      	pop	{r3, pc}

1a002856 <__stdio_init>:

void __stdio_init()
{
1a002856:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002858:	f7ff ff7e 	bl	1a002758 <Board_Debug_Init>
1a00285c:	bd08      	pop	{r3, pc}
1a00285e:	Address 0x000000001a00285e is out of bounds.


1a002860 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002860:	2300      	movs	r3, #0
1a002862:	2b1c      	cmp	r3, #28
1a002864:	d812      	bhi.n	1a00288c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002866:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002868:	4a09      	ldr	r2, [pc, #36]	; (1a002890 <Board_SetupMuxing+0x30>)
1a00286a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00286e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002872:	784a      	ldrb	r2, [r1, #1]
1a002874:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002876:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00287a:	4906      	ldr	r1, [pc, #24]	; (1a002894 <Board_SetupMuxing+0x34>)
1a00287c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002880:	3301      	adds	r3, #1
1a002882:	2b1c      	cmp	r3, #28
1a002884:	d9f0      	bls.n	1a002868 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002886:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00288a:	4770      	bx	lr
1a00288c:	4770      	bx	lr
1a00288e:	bf00      	nop
1a002890:	1a0050a0 	.word	0x1a0050a0
1a002894:	40086000 	.word	0x40086000

1a002898 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002898:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00289a:	4a17      	ldr	r2, [pc, #92]	; (1a0028f8 <Board_SetupClocking+0x60>)
1a00289c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0028a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028a4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028a8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0028ac:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0028b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028b4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028b8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0028bc:	2201      	movs	r2, #1
1a0028be:	490f      	ldr	r1, [pc, #60]	; (1a0028fc <Board_SetupClocking+0x64>)
1a0028c0:	2006      	movs	r0, #6
1a0028c2:	f000 fc0d 	bl	1a0030e0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0028c6:	2400      	movs	r4, #0
1a0028c8:	b14c      	cbz	r4, 1a0028de <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0028ca:	4b0b      	ldr	r3, [pc, #44]	; (1a0028f8 <Board_SetupClocking+0x60>)
1a0028cc:	685a      	ldr	r2, [r3, #4]
1a0028ce:	f022 020c 	bic.w	r2, r2, #12
1a0028d2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0028d4:	685a      	ldr	r2, [r3, #4]
1a0028d6:	f042 0203 	orr.w	r2, r2, #3
1a0028da:	605a      	str	r2, [r3, #4]
1a0028dc:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0028de:	4808      	ldr	r0, [pc, #32]	; (1a002900 <Board_SetupClocking+0x68>)
1a0028e0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0028e4:	2301      	movs	r3, #1
1a0028e6:	788a      	ldrb	r2, [r1, #2]
1a0028e8:	7849      	ldrb	r1, [r1, #1]
1a0028ea:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0028ee:	f000 fb53 	bl	1a002f98 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0028f2:	3401      	adds	r4, #1
1a0028f4:	e7e8      	b.n	1a0028c8 <Board_SetupClocking+0x30>
1a0028f6:	bf00      	nop
1a0028f8:	40043000 	.word	0x40043000
1a0028fc:	0c28cb00 	.word	0x0c28cb00
1a002900:	1a00509c 	.word	0x1a00509c

1a002904 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002904:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002906:	f7ff ffab 	bl	1a002860 <Board_SetupMuxing>
    Board_SetupClocking();
1a00290a:	f7ff ffc5 	bl	1a002898 <Board_SetupClocking>
1a00290e:	bd08      	pop	{r3, pc}

1a002910 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002910:	4b09      	ldr	r3, [pc, #36]	; (1a002938 <Chip_UART_GetIndex+0x28>)
1a002912:	4298      	cmp	r0, r3
1a002914:	d009      	beq.n	1a00292a <Chip_UART_GetIndex+0x1a>
1a002916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00291a:	4298      	cmp	r0, r3
1a00291c:	d007      	beq.n	1a00292e <Chip_UART_GetIndex+0x1e>
1a00291e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002922:	4298      	cmp	r0, r3
1a002924:	d005      	beq.n	1a002932 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002926:	2000      	movs	r0, #0
1a002928:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00292a:	2002      	movs	r0, #2
1a00292c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00292e:	2003      	movs	r0, #3
1a002930:	4770      	bx	lr
			return 1;
1a002932:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002934:	4770      	bx	lr
1a002936:	bf00      	nop
1a002938:	400c1000 	.word	0x400c1000

1a00293c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00293c:	b530      	push	{r4, r5, lr}
1a00293e:	b083      	sub	sp, #12
1a002940:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002942:	f7ff ffe5 	bl	1a002910 <Chip_UART_GetIndex>
1a002946:	2301      	movs	r3, #1
1a002948:	461a      	mov	r2, r3
1a00294a:	4619      	mov	r1, r3
1a00294c:	4d0e      	ldr	r5, [pc, #56]	; (1a002988 <Chip_UART_Init+0x4c>)
1a00294e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002952:	f000 fb67 	bl	1a003024 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002956:	2307      	movs	r3, #7
1a002958:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00295a:	2300      	movs	r3, #0
1a00295c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00295e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002960:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002962:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002964:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002966:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002968:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00296a:	4b08      	ldr	r3, [pc, #32]	; (1a00298c <Chip_UART_Init+0x50>)
1a00296c:	429c      	cmp	r4, r3
1a00296e:	d006      	beq.n	1a00297e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002970:	2303      	movs	r3, #3
1a002972:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002974:	2310      	movs	r3, #16
1a002976:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002978:	9b01      	ldr	r3, [sp, #4]
}
1a00297a:	b003      	add	sp, #12
1a00297c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00297e:	2300      	movs	r3, #0
1a002980:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002982:	69a3      	ldr	r3, [r4, #24]
1a002984:	9301      	str	r3, [sp, #4]
1a002986:	e7f3      	b.n	1a002970 <Chip_UART_Init+0x34>
1a002988:	1a00511c 	.word	0x1a00511c
1a00298c:	40082000 	.word	0x40082000

1a002990 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002994:	b083      	sub	sp, #12
1a002996:	4683      	mov	fp, r0
1a002998:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00299a:	f7ff ffb9 	bl	1a002910 <Chip_UART_GetIndex>
1a00299e:	4b35      	ldr	r3, [pc, #212]	; (1a002a74 <Chip_UART_SetBaudFDR+0xe4>)
1a0029a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0029a4:	f000 fb76 	bl	1a003094 <Chip_Clock_GetRate>
1a0029a8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0029aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0029ae:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0029b0:	2300      	movs	r3, #0
1a0029b2:	9301      	str	r3, [sp, #4]
1a0029b4:	46a2      	mov	sl, r4
1a0029b6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0029b8:	e02a      	b.n	1a002a10 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0029ba:	4243      	negs	r3, r0
				div ++;
1a0029bc:	1c4a      	adds	r2, r1, #1
1a0029be:	e017      	b.n	1a0029f0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0029c0:	b30b      	cbz	r3, 1a002a06 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0029c2:	461f      	mov	r7, r3
			sd = d;
1a0029c4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0029c6:	46a2      	mov	sl, r4
			sdiv = div;
1a0029c8:	4691      	mov	r9, r2
		for (d = 0; d < m; d++) {
1a0029ca:	3501      	adds	r5, #1
1a0029cc:	42ac      	cmp	r4, r5
1a0029ce:	d91e      	bls.n	1a002a0e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0029d0:	0933      	lsrs	r3, r6, #4
1a0029d2:	0730      	lsls	r0, r6, #28
1a0029d4:	fba4 0100 	umull	r0, r1, r4, r0
1a0029d8:	fb04 1103 	mla	r1, r4, r3, r1
1a0029dc:	1962      	adds	r2, r4, r5
1a0029de:	fb08 f202 	mul.w	r2, r8, r2
1a0029e2:	2300      	movs	r3, #0
1a0029e4:	f000 fd3c 	bl	1a003460 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0029e8:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a0029ea:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a0029ec:	2800      	cmp	r0, #0
1a0029ee:	dbe4      	blt.n	1a0029ba <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0029f0:	429f      	cmp	r7, r3
1a0029f2:	d3ea      	bcc.n	1a0029ca <Chip_UART_SetBaudFDR+0x3a>
1a0029f4:	2a00      	cmp	r2, #0
1a0029f6:	d0e8      	beq.n	1a0029ca <Chip_UART_SetBaudFDR+0x3a>
1a0029f8:	0c11      	lsrs	r1, r2, #16
1a0029fa:	d1e6      	bne.n	1a0029ca <Chip_UART_SetBaudFDR+0x3a>
1a0029fc:	2a02      	cmp	r2, #2
1a0029fe:	d8df      	bhi.n	1a0029c0 <Chip_UART_SetBaudFDR+0x30>
1a002a00:	2d00      	cmp	r5, #0
1a002a02:	d1e2      	bne.n	1a0029ca <Chip_UART_SetBaudFDR+0x3a>
1a002a04:	e7dc      	b.n	1a0029c0 <Chip_UART_SetBaudFDR+0x30>
			odiff = diff;
1a002a06:	461f      	mov	r7, r3
			sd = d;
1a002a08:	9501      	str	r5, [sp, #4]
			sm = m;
1a002a0a:	46a2      	mov	sl, r4
			sdiv = div;
1a002a0c:	4691      	mov	r9, r2
	for (m = 1; odiff && m < 16; m++) {
1a002a0e:	3401      	adds	r4, #1
1a002a10:	b11f      	cbz	r7, 1a002a1a <Chip_UART_SetBaudFDR+0x8a>
1a002a12:	2c0f      	cmp	r4, #15
1a002a14:	d801      	bhi.n	1a002a1a <Chip_UART_SetBaudFDR+0x8a>
1a002a16:	2500      	movs	r5, #0
1a002a18:	e7d8      	b.n	1a0029cc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002a1a:	f1b9 0f00 	cmp.w	r9, #0
1a002a1e:	d024      	beq.n	1a002a6a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002a20:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002a28:	f8cb 300c 	str.w	r3, [fp, #12]
1a002a2c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002a30:	f8cb 3000 	str.w	r3, [fp]
1a002a34:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002a38:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002a3c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002a44:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002a48:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002a4c:	b2db      	uxtb	r3, r3
1a002a4e:	9901      	ldr	r1, [sp, #4]
1a002a50:	f001 020f 	and.w	r2, r1, #15
1a002a54:	4313      	orrs	r3, r2
1a002a56:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002a5a:	0933      	lsrs	r3, r6, #4
1a002a5c:	fb03 f30a 	mul.w	r3, r3, sl
1a002a60:	448a      	add	sl, r1
1a002a62:	fb0a f909 	mul.w	r9, sl, r9
1a002a66:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002a6a:	4648      	mov	r0, r9
1a002a6c:	b003      	add	sp, #12
1a002a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a72:	bf00      	nop
1a002a74:	1a005114 	.word	0x1a005114

1a002a78 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002a78:	4b03      	ldr	r3, [pc, #12]	; (1a002a88 <Chip_ADC_GetClockIndex+0x10>)
1a002a7a:	4298      	cmp	r0, r3
1a002a7c:	d001      	beq.n	1a002a82 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002a7e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002a80:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002a82:	2004      	movs	r0, #4
1a002a84:	4770      	bx	lr
1a002a86:	bf00      	nop
1a002a88:	400e4000 	.word	0x400e4000

1a002a8c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002a8c:	b570      	push	{r4, r5, r6, lr}
1a002a8e:	460d      	mov	r5, r1
1a002a90:	4614      	mov	r4, r2
1a002a92:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002a94:	f7ff fff0 	bl	1a002a78 <Chip_ADC_GetClockIndex>
1a002a98:	f000 fafc 	bl	1a003094 <Chip_Clock_GetRate>
	if (burstMode) {
1a002a9c:	b965      	cbnz	r5, 1a002ab8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002a9e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002aa2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002aa6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002aaa:	0064      	lsls	r4, r4, #1
1a002aac:	fbb0 f0f4 	udiv	r0, r0, r4
1a002ab0:	b2c0      	uxtb	r0, r0
1a002ab2:	3801      	subs	r0, #1
	return div;
}
1a002ab4:	b2c0      	uxtb	r0, r0
1a002ab6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002ab8:	fb04 f406 	mul.w	r4, r4, r6
1a002abc:	e7f3      	b.n	1a002aa6 <getClkDiv+0x1a>
1a002abe:	Address 0x000000001a002abe is out of bounds.


1a002ac0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002ac0:	b538      	push	{r3, r4, r5, lr}
1a002ac2:	4605      	mov	r5, r0
1a002ac4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002ac6:	f7ff ffd7 	bl	1a002a78 <Chip_ADC_GetClockIndex>
1a002aca:	2301      	movs	r3, #1
1a002acc:	461a      	mov	r2, r3
1a002ace:	4619      	mov	r1, r3
1a002ad0:	f000 faa8 	bl	1a003024 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002ad4:	2100      	movs	r1, #0
1a002ad6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002ad8:	4a08      	ldr	r2, [pc, #32]	; (1a002afc <Chip_ADC_Init+0x3c>)
1a002ada:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002adc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002ade:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002ae0:	230b      	movs	r3, #11
1a002ae2:	4628      	mov	r0, r5
1a002ae4:	f7ff ffd2 	bl	1a002a8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002ae8:	0200      	lsls	r0, r0, #8
1a002aea:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002aee:	7923      	ldrb	r3, [r4, #4]
1a002af0:	045b      	lsls	r3, r3, #17
1a002af2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002af6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002af8:	6028      	str	r0, [r5, #0]
1a002afa:	bd38      	pop	{r3, r4, r5, pc}
1a002afc:	00061a80 	.word	0x00061a80

1a002b00 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002b00:	b570      	push	{r4, r5, r6, lr}
1a002b02:	4605      	mov	r5, r0
1a002b04:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002b06:	6804      	ldr	r4, [r0, #0]
1a002b08:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002b0c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002b10:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002b12:	790b      	ldrb	r3, [r1, #4]
1a002b14:	f1c3 030b 	rsb	r3, r3, #11
1a002b18:	b2db      	uxtb	r3, r3
1a002b1a:	7949      	ldrb	r1, [r1, #5]
1a002b1c:	f7ff ffb6 	bl	1a002a8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002b20:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002b24:	7934      	ldrb	r4, [r6, #4]
1a002b26:	0464      	lsls	r4, r4, #17
1a002b28:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a002b2c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002b2e:	6028      	str	r0, [r5, #0]
1a002b30:	bd70      	pop	{r4, r5, r6, pc}

1a002b32 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002b32:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002b34:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002b36:	680a      	ldr	r2, [r1, #0]
1a002b38:	f7ff ffe2 	bl	1a002b00 <Chip_ADC_SetSampleRate>
1a002b3c:	bd08      	pop	{r3, pc}
1a002b3e:	Address 0x000000001a002b3e is out of bounds.


1a002b40 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002b40:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002b42:	2069      	movs	r0, #105	; 0x69
1a002b44:	f000 faa6 	bl	1a003094 <Chip_Clock_GetRate>
1a002b48:	4b01      	ldr	r3, [pc, #4]	; (1a002b50 <SystemCoreClockUpdate+0x10>)
1a002b4a:	6018      	str	r0, [r3, #0]
1a002b4c:	bd08      	pop	{r3, pc}
1a002b4e:	bf00      	nop
1a002b50:	10002c0c 	.word	0x10002c0c

1a002b54 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b54:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002b56:	680b      	ldr	r3, [r1, #0]
1a002b58:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b5c:	d002      	beq.n	1a002b64 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002b62:	600b      	str	r3, [r1, #0]
1a002b64:	4607      	mov	r7, r0
1a002b66:	2501      	movs	r5, #1
1a002b68:	e03b      	b.n	1a002be2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002b6a:	694b      	ldr	r3, [r1, #20]
1a002b6c:	fb03 f302 	mul.w	r3, r3, r2
1a002b70:	fbb3 f3f5 	udiv	r3, r3, r5
1a002b74:	e014      	b.n	1a002ba0 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002b76:	461c      	mov	r4, r3
1a002b78:	e020      	b.n	1a002bbc <pll_calc_divs+0x68>
		return -val;
1a002b7a:	f1ce 0e00 	rsb	lr, lr, #0
1a002b7e:	e020      	b.n	1a002bc2 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002b80:	3201      	adds	r2, #1
1a002b82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002b86:	dc26      	bgt.n	1a002bd6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002b88:	680c      	ldr	r4, [r1, #0]
1a002b8a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002b8e:	d0ec      	beq.n	1a002b6a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002b90:	1c73      	adds	r3, r6, #1
1a002b92:	fa02 fe03 	lsl.w	lr, r2, r3
1a002b96:	694b      	ldr	r3, [r1, #20]
1a002b98:	fb03 f30e 	mul.w	r3, r3, lr
1a002b9c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002ba0:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a002bec <pll_calc_divs+0x98>
1a002ba4:	4573      	cmp	r3, lr
1a002ba6:	d9eb      	bls.n	1a002b80 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002ba8:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a002bf0 <pll_calc_divs+0x9c>
1a002bac:	4573      	cmp	r3, lr
1a002bae:	d812      	bhi.n	1a002bd6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002bb0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002bb4:	d1df      	bne.n	1a002b76 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002bb6:	1c74      	adds	r4, r6, #1
1a002bb8:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002bbc:	ebb0 0e04 	subs.w	lr, r0, r4
1a002bc0:	d4db      	bmi.n	1a002b7a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002bc2:	4577      	cmp	r7, lr
1a002bc4:	d9dc      	bls.n	1a002b80 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002bc6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002bc8:	1c77      	adds	r7, r6, #1
1a002bca:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002bcc:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002bce:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002bd0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002bd2:	4677      	mov	r7, lr
1a002bd4:	e7d4      	b.n	1a002b80 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002bd6:	3601      	adds	r6, #1
1a002bd8:	2e03      	cmp	r6, #3
1a002bda:	dc01      	bgt.n	1a002be0 <pll_calc_divs+0x8c>
1a002bdc:	2201      	movs	r2, #1
1a002bde:	e7d0      	b.n	1a002b82 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002be0:	3501      	adds	r5, #1
1a002be2:	2d04      	cmp	r5, #4
1a002be4:	dc01      	bgt.n	1a002bea <pll_calc_divs+0x96>
1a002be6:	2600      	movs	r6, #0
1a002be8:	e7f6      	b.n	1a002bd8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002bec:	094c5eff 	.word	0x094c5eff
1a002bf0:	1312d000 	.word	0x1312d000

1a002bf4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002bf6:	b099      	sub	sp, #100	; 0x64
1a002bf8:	4605      	mov	r5, r0
1a002bfa:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002bfc:	2260      	movs	r2, #96	; 0x60
1a002bfe:	2100      	movs	r1, #0
1a002c00:	4668      	mov	r0, sp
1a002c02:	f001 f8b7 	bl	1a003d74 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002c06:	2380      	movs	r3, #128	; 0x80
1a002c08:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002c0a:	6963      	ldr	r3, [r4, #20]
1a002c0c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002c0e:	7923      	ldrb	r3, [r4, #4]
1a002c10:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002c14:	4669      	mov	r1, sp
1a002c16:	4628      	mov	r0, r5
1a002c18:	f7ff ff9c 	bl	1a002b54 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002c1c:	9b06      	ldr	r3, [sp, #24]
1a002c1e:	429d      	cmp	r5, r3
1a002c20:	d027      	beq.n	1a002c72 <pll_get_frac+0x7e>
	if (val < 0)
1a002c22:	1aeb      	subs	r3, r5, r3
1a002c24:	d42e      	bmi.n	1a002c84 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002c26:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002c2e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002c30:	6963      	ldr	r3, [r4, #20]
1a002c32:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002c34:	7923      	ldrb	r3, [r4, #4]
1a002c36:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002c3a:	a910      	add	r1, sp, #64	; 0x40
1a002c3c:	4628      	mov	r0, r5
1a002c3e:	f7ff ff89 	bl	1a002b54 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002c42:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002c44:	429d      	cmp	r5, r3
1a002c46:	d01f      	beq.n	1a002c88 <pll_get_frac+0x94>
	if (val < 0)
1a002c48:	1aeb      	subs	r3, r5, r3
1a002c4a:	d425      	bmi.n	1a002c98 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002c4c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002c4e:	4b2b      	ldr	r3, [pc, #172]	; (1a002cfc <pll_get_frac+0x108>)
1a002c50:	429d      	cmp	r5, r3
1a002c52:	d923      	bls.n	1a002c9c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002c56:	1aed      	subs	r5, r5, r3
1a002c58:	d433      	bmi.n	1a002cc2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002c5a:	42ae      	cmp	r6, r5
1a002c5c:	dc3b      	bgt.n	1a002cd6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002c5e:	42be      	cmp	r6, r7
1a002c60:	dc31      	bgt.n	1a002cc6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002c62:	466d      	mov	r5, sp
1a002c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c70:	e006      	b.n	1a002c80 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002c72:	466d      	mov	r5, sp
1a002c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002c80:	b019      	add	sp, #100	; 0x64
1a002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002c84:	425b      	negs	r3, r3
1a002c86:	e7ce      	b.n	1a002c26 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002c88:	ad10      	add	r5, sp, #64	; 0x40
1a002c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002c96:	e7f3      	b.n	1a002c80 <pll_get_frac+0x8c>
		return -val;
1a002c98:	425b      	negs	r3, r3
1a002c9a:	e7d7      	b.n	1a002c4c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002c9c:	2340      	movs	r3, #64	; 0x40
1a002c9e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002ca0:	6963      	ldr	r3, [r4, #20]
1a002ca2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002ca4:	a908      	add	r1, sp, #32
1a002ca6:	4628      	mov	r0, r5
1a002ca8:	f7ff ff54 	bl	1a002b54 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002cae:	429d      	cmp	r5, r3
1a002cb0:	d1d0      	bne.n	1a002c54 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002cb2:	ad08      	add	r5, sp, #32
1a002cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002cc0:	e7de      	b.n	1a002c80 <pll_get_frac+0x8c>
		return -val;
1a002cc2:	426d      	negs	r5, r5
1a002cc4:	e7c9      	b.n	1a002c5a <pll_get_frac+0x66>
			*ppll = pll[2];
1a002cc6:	ad10      	add	r5, sp, #64	; 0x40
1a002cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ccc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002cd4:	e7d4      	b.n	1a002c80 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002cd6:	42af      	cmp	r7, r5
1a002cd8:	db07      	blt.n	1a002cea <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002cda:	ad08      	add	r5, sp, #32
1a002cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ce0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002ce8:	e7ca      	b.n	1a002c80 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002cea:	ad10      	add	r5, sp, #64	; 0x40
1a002cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002cf8:	e7c2      	b.n	1a002c80 <pll_get_frac+0x8c>
1a002cfa:	bf00      	nop
1a002cfc:	068e7780 	.word	0x068e7780

1a002d00 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002d00:	b430      	push	{r4, r5}
1a002d02:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002d04:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002d06:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002d08:	e000      	b.n	1a002d0c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002d0a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002d0c:	281c      	cmp	r0, #28
1a002d0e:	d118      	bne.n	1a002d42 <Chip_Clock_FindBaseClock+0x42>
1a002d10:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002d14:	0051      	lsls	r1, r2, #1
1a002d16:	4a0c      	ldr	r2, [pc, #48]	; (1a002d48 <Chip_Clock_FindBaseClock+0x48>)
1a002d18:	440a      	add	r2, r1
1a002d1a:	7914      	ldrb	r4, [r2, #4]
1a002d1c:	42a0      	cmp	r0, r4
1a002d1e:	d010      	beq.n	1a002d42 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002d20:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002d24:	004a      	lsls	r2, r1, #1
1a002d26:	4908      	ldr	r1, [pc, #32]	; (1a002d48 <Chip_Clock_FindBaseClock+0x48>)
1a002d28:	5a8a      	ldrh	r2, [r1, r2]
1a002d2a:	42aa      	cmp	r2, r5
1a002d2c:	d8ed      	bhi.n	1a002d0a <Chip_Clock_FindBaseClock+0xa>
1a002d2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002d32:	0051      	lsls	r1, r2, #1
1a002d34:	4a04      	ldr	r2, [pc, #16]	; (1a002d48 <Chip_Clock_FindBaseClock+0x48>)
1a002d36:	440a      	add	r2, r1
1a002d38:	8852      	ldrh	r2, [r2, #2]
1a002d3a:	4295      	cmp	r5, r2
1a002d3c:	d8e5      	bhi.n	1a002d0a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002d3e:	4620      	mov	r0, r4
1a002d40:	e7e4      	b.n	1a002d0c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002d42:	bc30      	pop	{r4, r5}
1a002d44:	4770      	bx	lr
1a002d46:	bf00      	nop
1a002d48:	1a005130 	.word	0x1a005130

1a002d4c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002d4c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002d52:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002d54:	4a0d      	ldr	r2, [pc, #52]	; (1a002d8c <Chip_Clock_EnableCrystal+0x40>)
1a002d56:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002d58:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002d5c:	6992      	ldr	r2, [r2, #24]
1a002d5e:	4291      	cmp	r1, r2
1a002d60:	d001      	beq.n	1a002d66 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d62:	4a0a      	ldr	r2, [pc, #40]	; (1a002d8c <Chip_Clock_EnableCrystal+0x40>)
1a002d64:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002d66:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002d6a:	4a09      	ldr	r2, [pc, #36]	; (1a002d90 <Chip_Clock_EnableCrystal+0x44>)
1a002d6c:	6811      	ldr	r1, [r2, #0]
1a002d6e:	4a09      	ldr	r2, [pc, #36]	; (1a002d94 <Chip_Clock_EnableCrystal+0x48>)
1a002d70:	4291      	cmp	r1, r2
1a002d72:	d901      	bls.n	1a002d78 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002d74:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d78:	4a04      	ldr	r2, [pc, #16]	; (1a002d8c <Chip_Clock_EnableCrystal+0x40>)
1a002d7a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002d7c:	9b01      	ldr	r3, [sp, #4]
1a002d7e:	1e5a      	subs	r2, r3, #1
1a002d80:	9201      	str	r2, [sp, #4]
1a002d82:	2b00      	cmp	r3, #0
1a002d84:	d1fa      	bne.n	1a002d7c <Chip_Clock_EnableCrystal+0x30>
}
1a002d86:	b002      	add	sp, #8
1a002d88:	4770      	bx	lr
1a002d8a:	bf00      	nop
1a002d8c:	40050000 	.word	0x40050000
1a002d90:	1a005098 	.word	0x1a005098
1a002d94:	01312cff 	.word	0x01312cff

1a002d98 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002d98:	3012      	adds	r0, #18
1a002d9a:	4b05      	ldr	r3, [pc, #20]	; (1a002db0 <Chip_Clock_GetDividerSource+0x18>)
1a002d9c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002da0:	f010 0f01 	tst.w	r0, #1
1a002da4:	d001      	beq.n	1a002daa <Chip_Clock_GetDividerSource+0x12>
		return CLKINPUT_PD;
1a002da6:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002da8:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002daa:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002dae:	4770      	bx	lr
1a002db0:	40050000 	.word	0x40050000

1a002db4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002db4:	f100 0212 	add.w	r2, r0, #18
1a002db8:	4b03      	ldr	r3, [pc, #12]	; (1a002dc8 <Chip_Clock_GetDividerDivisor+0x14>)
1a002dba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002dbe:	4b03      	ldr	r3, [pc, #12]	; (1a002dcc <Chip_Clock_GetDividerDivisor+0x18>)
1a002dc0:	5c18      	ldrb	r0, [r3, r0]
}
1a002dc2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002dc6:	4770      	bx	lr
1a002dc8:	40050000 	.word	0x40050000
1a002dcc:	1a005128 	.word	0x1a005128

1a002dd0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002dd0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002dd2:	2810      	cmp	r0, #16
1a002dd4:	d80a      	bhi.n	1a002dec <Chip_Clock_GetClockInputHz+0x1c>
1a002dd6:	e8df f000 	tbb	[pc, r0]
1a002dda:	0b44      	.short	0x0b44
1a002ddc:	0921180d 	.word	0x0921180d
1a002de0:	2d2a2724 	.word	0x2d2a2724
1a002de4:	34300909 	.word	0x34300909
1a002de8:	3c38      	.short	0x3c38
1a002dea:	40          	.byte	0x40
1a002deb:	00          	.byte	0x00
	uint32_t rate = 0;
1a002dec:	2000      	movs	r0, #0
1a002dee:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002df0:	481e      	ldr	r0, [pc, #120]	; (1a002e6c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002df2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002df4:	4b1e      	ldr	r3, [pc, #120]	; (1a002e70 <Chip_Clock_GetClockInputHz+0xa0>)
1a002df6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002dfa:	f003 0307 	and.w	r3, r3, #7
1a002dfe:	2b04      	cmp	r3, #4
1a002e00:	d001      	beq.n	1a002e06 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002e02:	481c      	ldr	r0, [pc, #112]	; (1a002e74 <Chip_Clock_GetClockInputHz+0xa4>)
1a002e04:	bd08      	pop	{r3, pc}
	uint32_t rate = 0;
1a002e06:	2000      	movs	r0, #0
1a002e08:	bd08      	pop	{r3, pc}
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002e0a:	4b19      	ldr	r3, [pc, #100]	; (1a002e70 <Chip_Clock_GetClockInputHz+0xa0>)
1a002e0c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002e10:	f003 0307 	and.w	r3, r3, #7
1a002e14:	2b04      	cmp	r3, #4
1a002e16:	d027      	beq.n	1a002e68 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002e18:	4816      	ldr	r0, [pc, #88]	; (1a002e74 <Chip_Clock_GetClockInputHz+0xa4>)
1a002e1a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002e1c:	4b16      	ldr	r3, [pc, #88]	; (1a002e78 <Chip_Clock_GetClockInputHz+0xa8>)
1a002e1e:	6818      	ldr	r0, [r3, #0]
		break;
1a002e20:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002e22:	4b16      	ldr	r3, [pc, #88]	; (1a002e7c <Chip_Clock_GetClockInputHz+0xac>)
1a002e24:	6818      	ldr	r0, [r3, #0]
		break;
1a002e26:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002e28:	4b15      	ldr	r3, [pc, #84]	; (1a002e80 <Chip_Clock_GetClockInputHz+0xb0>)
1a002e2a:	6818      	ldr	r0, [r3, #0]
		break;
1a002e2c:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002e2e:	4b14      	ldr	r3, [pc, #80]	; (1a002e80 <Chip_Clock_GetClockInputHz+0xb0>)
1a002e30:	6858      	ldr	r0, [r3, #4]
		break;
1a002e32:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002e34:	f000 f868 	bl	1a002f08 <Chip_Clock_GetMainPLLHz>
		break;
1a002e38:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002e3a:	2100      	movs	r1, #0
1a002e3c:	f000 f89a 	bl	1a002f74 <Chip_Clock_GetDivRate>
		break;
1a002e40:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002e42:	2101      	movs	r1, #1
1a002e44:	f000 f896 	bl	1a002f74 <Chip_Clock_GetDivRate>
		break;
1a002e48:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002e4a:	2102      	movs	r1, #2
1a002e4c:	f000 f892 	bl	1a002f74 <Chip_Clock_GetDivRate>
		break;
1a002e50:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002e52:	2103      	movs	r1, #3
1a002e54:	f000 f88e 	bl	1a002f74 <Chip_Clock_GetDivRate>
		break;
1a002e58:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002e5a:	2104      	movs	r1, #4
1a002e5c:	f000 f88a 	bl	1a002f74 <Chip_Clock_GetDivRate>
		break;
1a002e60:	bd08      	pop	{r3, pc}
		rate = CRYSTAL_32K_FREQ_IN;
1a002e62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002e66:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002e68:	4806      	ldr	r0, [pc, #24]	; (1a002e84 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002e6a:	bd08      	pop	{r3, pc}
1a002e6c:	00b71b00 	.word	0x00b71b00
1a002e70:	40043000 	.word	0x40043000
1a002e74:	017d7840 	.word	0x017d7840
1a002e78:	1a00506c 	.word	0x1a00506c
1a002e7c:	1a005098 	.word	0x1a005098
1a002e80:	10002bb4 	.word	0x10002bb4
1a002e84:	02faf080 	.word	0x02faf080

1a002e88 <Chip_Clock_CalcMainPLLValue>:
{
1a002e88:	b538      	push	{r3, r4, r5, lr}
1a002e8a:	4605      	mov	r5, r0
1a002e8c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002e8e:	7908      	ldrb	r0, [r1, #4]
1a002e90:	f7ff ff9e 	bl	1a002dd0 <Chip_Clock_GetClockInputHz>
1a002e94:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002e96:	4b19      	ldr	r3, [pc, #100]	; (1a002efc <Chip_Clock_CalcMainPLLValue+0x74>)
1a002e98:	442b      	add	r3, r5
1a002e9a:	4a19      	ldr	r2, [pc, #100]	; (1a002f00 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002e9c:	4293      	cmp	r3, r2
1a002e9e:	d821      	bhi.n	1a002ee4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002ea0:	b318      	cbz	r0, 1a002eea <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002ea2:	2380      	movs	r3, #128	; 0x80
1a002ea4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002ea6:	2300      	movs	r3, #0
1a002ea8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002eaa:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002eac:	fbb5 f3f0 	udiv	r3, r5, r0
1a002eb0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002eb2:	4a14      	ldr	r2, [pc, #80]	; (1a002f04 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002eb4:	4295      	cmp	r5, r2
1a002eb6:	d903      	bls.n	1a002ec0 <Chip_Clock_CalcMainPLLValue+0x38>
1a002eb8:	fb03 f000 	mul.w	r0, r3, r0
1a002ebc:	4285      	cmp	r5, r0
1a002ebe:	d007      	beq.n	1a002ed0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002ec0:	4621      	mov	r1, r4
1a002ec2:	4628      	mov	r0, r5
1a002ec4:	f7ff fe96 	bl	1a002bf4 <pll_get_frac>
		if (!ppll->nsel) {
1a002ec8:	68a3      	ldr	r3, [r4, #8]
1a002eca:	b18b      	cbz	r3, 1a002ef0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002ecc:	3b01      	subs	r3, #1
1a002ece:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002ed0:	6923      	ldr	r3, [r4, #16]
1a002ed2:	b183      	cbz	r3, 1a002ef6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002ed4:	68e2      	ldr	r2, [r4, #12]
1a002ed6:	b10a      	cbz	r2, 1a002edc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002ed8:	3a01      	subs	r2, #1
1a002eda:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002edc:	3b01      	subs	r3, #1
1a002ede:	6123      	str	r3, [r4, #16]
	return 0;
1a002ee0:	2000      	movs	r0, #0
1a002ee2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ee8:	bd38      	pop	{r3, r4, r5, pc}
1a002eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002eee:	bd38      	pop	{r3, r4, r5, pc}
			return -1;
1a002ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ef4:	bd38      	pop	{r3, r4, r5, pc}
		return - 1;
1a002ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002efa:	bd38      	pop	{r3, r4, r5, pc}
1a002efc:	ff6b3a10 	.word	0xff6b3a10
1a002f00:	0b940510 	.word	0x0b940510
1a002f04:	094c5eff 	.word	0x094c5eff

1a002f08 <Chip_Clock_GetMainPLLHz>:
{
1a002f08:	b530      	push	{r4, r5, lr}
1a002f0a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002f0c:	4d17      	ldr	r5, [pc, #92]	; (1a002f6c <Chip_Clock_GetMainPLLHz+0x64>)
1a002f0e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002f10:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002f14:	f7ff ff5c 	bl	1a002dd0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002f18:	4b15      	ldr	r3, [pc, #84]	; (1a002f70 <Chip_Clock_GetMainPLLHz+0x68>)
1a002f1a:	681b      	ldr	r3, [r3, #0]
1a002f1c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002f1e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002f20:	f013 0f01 	tst.w	r3, #1
1a002f24:	d01f      	beq.n	1a002f66 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002f26:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002f2a:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002f2e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002f32:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002f36:	3201      	adds	r2, #1
	n = nsel + 1;
1a002f38:	3301      	adds	r3, #1
	p = ptab[psel];
1a002f3a:	f10d 0e08 	add.w	lr, sp, #8
1a002f3e:	4471      	add	r1, lr
1a002f40:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002f44:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002f48:	d108      	bne.n	1a002f5c <Chip_Clock_GetMainPLLHz+0x54>
1a002f4a:	b93d      	cbnz	r5, 1a002f5c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002f4c:	0049      	lsls	r1, r1, #1
1a002f4e:	fbb2 f2f1 	udiv	r2, r2, r1
1a002f52:	fbb0 f0f3 	udiv	r0, r0, r3
1a002f56:	fb00 f002 	mul.w	r0, r0, r2
1a002f5a:	e005      	b.n	1a002f68 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002f5c:	fbb0 f0f3 	udiv	r0, r0, r3
1a002f60:	fb00 f002 	mul.w	r0, r0, r2
1a002f64:	e000      	b.n	1a002f68 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002f66:	2000      	movs	r0, #0
}
1a002f68:	b003      	add	sp, #12
1a002f6a:	bd30      	pop	{r4, r5, pc}
1a002f6c:	40050000 	.word	0x40050000
1a002f70:	1a005124 	.word	0x1a005124

1a002f74 <Chip_Clock_GetDivRate>:
{
1a002f74:	b538      	push	{r3, r4, r5, lr}
1a002f76:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002f78:	4608      	mov	r0, r1
1a002f7a:	f7ff ff0d 	bl	1a002d98 <Chip_Clock_GetDividerSource>
1a002f7e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002f80:	4620      	mov	r0, r4
1a002f82:	f7ff ff17 	bl	1a002db4 <Chip_Clock_GetDividerDivisor>
1a002f86:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002f88:	4628      	mov	r0, r5
1a002f8a:	f7ff ff21 	bl	1a002dd0 <Chip_Clock_GetClockInputHz>
1a002f8e:	3401      	adds	r4, #1
}
1a002f90:	fbb0 f0f4 	udiv	r0, r0, r4
1a002f94:	bd38      	pop	{r3, r4, r5, pc}
1a002f96:	Address 0x000000001a002f96 is out of bounds.


1a002f98 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002f98:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f9a:	f100 0416 	add.w	r4, r0, #22
1a002f9e:	00a4      	lsls	r4, r4, #2
1a002fa0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002fa4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002fa8:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002faa:	281b      	cmp	r0, #27
1a002fac:	d813      	bhi.n	1a002fd6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002fae:	2911      	cmp	r1, #17
1a002fb0:	d01a      	beq.n	1a002fe8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002fb2:	4c0e      	ldr	r4, [pc, #56]	; (1a002fec <Chip_Clock_SetBaseClock+0x54>)
1a002fb4:	402c      	ands	r4, r5

			if (autoblocken) {
1a002fb6:	b10a      	cbz	r2, 1a002fbc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002fb8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a002fbc:	b10b      	cbz	r3, 1a002fc2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002fbe:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002fc2:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002fc6:	3016      	adds	r0, #22
1a002fc8:	0080      	lsls	r0, r0, #2
1a002fca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002fce:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002fd2:	6044      	str	r4, [r0, #4]
1a002fd4:	e008      	b.n	1a002fe8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002fd6:	f045 0501 	orr.w	r5, r5, #1
1a002fda:	3016      	adds	r0, #22
1a002fdc:	0080      	lsls	r0, r0, #2
1a002fde:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002fe2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002fe6:	6045      	str	r5, [r0, #4]
	}
}
1a002fe8:	bc30      	pop	{r4, r5}
1a002fea:	4770      	bx	lr
1a002fec:	e0fff7fe 	.word	0xe0fff7fe

1a002ff0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002ff0:	281b      	cmp	r0, #27
1a002ff2:	d901      	bls.n	1a002ff8 <Chip_Clock_GetBaseClock+0x8>
		return CLKINPUT_PD;
1a002ff4:	2011      	movs	r0, #17
1a002ff6:	4770      	bx	lr
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002ff8:	3016      	adds	r0, #22
1a002ffa:	0080      	lsls	r0, r0, #2
1a002ffc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003000:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003004:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003006:	f010 0f01 	tst.w	r0, #1
1a00300a:	d001      	beq.n	1a003010 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
1a00300c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00300e:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003010:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003014:	4770      	bx	lr

1a003016 <Chip_Clock_GetBaseClocktHz>:
{
1a003016:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003018:	f7ff ffea 	bl	1a002ff0 <Chip_Clock_GetBaseClock>
1a00301c:	f7ff fed8 	bl	1a002dd0 <Chip_Clock_GetClockInputHz>
}
1a003020:	bd08      	pop	{r3, pc}
1a003022:	Address 0x000000001a003022 is out of bounds.


1a003024 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003024:	b969      	cbnz	r1, 1a003042 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003026:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003028:	b10a      	cbz	r2, 1a00302e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00302a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00302e:	2b02      	cmp	r3, #2
1a003030:	d009      	beq.n	1a003046 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003032:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003036:	d209      	bcs.n	1a00304c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003038:	3020      	adds	r0, #32
1a00303a:	4b07      	ldr	r3, [pc, #28]	; (1a003058 <Chip_Clock_EnableOpts+0x34>)
1a00303c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003040:	4770      	bx	lr
		reg |= (1 << 1);
1a003042:	2103      	movs	r1, #3
1a003044:	e7f0      	b.n	1a003028 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003046:	f041 0120 	orr.w	r1, r1, #32
1a00304a:	e7f2      	b.n	1a003032 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00304c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003050:	4b02      	ldr	r3, [pc, #8]	; (1a00305c <Chip_Clock_EnableOpts+0x38>)
1a003052:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003056:	4770      	bx	lr
1a003058:	40051000 	.word	0x40051000
1a00305c:	40052000 	.word	0x40052000

1a003060 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003060:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003064:	d208      	bcs.n	1a003078 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003066:	4a09      	ldr	r2, [pc, #36]	; (1a00308c <Chip_Clock_Enable+0x2c>)
1a003068:	3020      	adds	r0, #32
1a00306a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00306e:	f043 0301 	orr.w	r3, r3, #1
1a003072:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003076:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003078:	4a05      	ldr	r2, [pc, #20]	; (1a003090 <Chip_Clock_Enable+0x30>)
1a00307a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00307e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003082:	f043 0301 	orr.w	r3, r3, #1
1a003086:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00308a:	4770      	bx	lr
1a00308c:	40051000 	.word	0x40051000
1a003090:	40052000 	.word	0x40052000

1a003094 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003094:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003096:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00309a:	d309      	bcc.n	1a0030b0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00309c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0030a0:	4a0d      	ldr	r2, [pc, #52]	; (1a0030d8 <Chip_Clock_GetRate+0x44>)
1a0030a2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0030a6:	f014 0f01 	tst.w	r4, #1
1a0030aa:	d107      	bne.n	1a0030bc <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0030ac:	2000      	movs	r0, #0
	}

	return rate;
}
1a0030ae:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0030b0:	f100 0320 	add.w	r3, r0, #32
1a0030b4:	4a09      	ldr	r2, [pc, #36]	; (1a0030dc <Chip_Clock_GetRate+0x48>)
1a0030b6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0030ba:	e7f4      	b.n	1a0030a6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0030bc:	f7ff fe20 	bl	1a002d00 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0030c0:	f7ff ffa9 	bl	1a003016 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0030c4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0030c8:	d103      	bne.n	1a0030d2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0030ca:	2301      	movs	r3, #1
		rate = rate / div;
1a0030cc:	fbb0 f0f3 	udiv	r0, r0, r3
1a0030d0:	bd10      	pop	{r4, pc}
			div = 2;/* No other dividers supported */
1a0030d2:	2302      	movs	r3, #2
1a0030d4:	e7fa      	b.n	1a0030cc <Chip_Clock_GetRate+0x38>
1a0030d6:	bf00      	nop
1a0030d8:	40052000 	.word	0x40052000
1a0030dc:	40051000 	.word	0x40051000

1a0030e0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0030e0:	b570      	push	{r4, r5, r6, lr}
1a0030e2:	b08a      	sub	sp, #40	; 0x28
1a0030e4:	4605      	mov	r5, r0
1a0030e6:	460e      	mov	r6, r1
1a0030e8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0030ea:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0030ee:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0030f0:	2806      	cmp	r0, #6
1a0030f2:	d018      	beq.n	1a003126 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0030f4:	2300      	movs	r3, #0
1a0030f6:	2201      	movs	r2, #1
1a0030f8:	4629      	mov	r1, r5
1a0030fa:	2004      	movs	r0, #4
1a0030fc:	f7ff ff4c 	bl	1a002f98 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003100:	4a49      	ldr	r2, [pc, #292]	; (1a003228 <Chip_SetupCoreClock+0x148>)
1a003102:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003104:	f043 0301 	orr.w	r3, r3, #1
1a003108:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00310a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00310e:	a901      	add	r1, sp, #4
1a003110:	4630      	mov	r0, r6
1a003112:	f7ff feb9 	bl	1a002e88 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003116:	4b45      	ldr	r3, [pc, #276]	; (1a00322c <Chip_SetupCoreClock+0x14c>)
1a003118:	429e      	cmp	r6, r3
1a00311a:	d916      	bls.n	1a00314a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00311c:	9b01      	ldr	r3, [sp, #4]
1a00311e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003122:	d003      	beq.n	1a00312c <Chip_SetupCoreClock+0x4c>
1a003124:	e7fe      	b.n	1a003124 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003126:	f7ff fe11 	bl	1a002d4c <Chip_Clock_EnableCrystal>
1a00312a:	e7e3      	b.n	1a0030f4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a00312c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003130:	d005      	beq.n	1a00313e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003136:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003138:	2500      	movs	r5, #0
			direct = 1;
1a00313a:	2601      	movs	r6, #1
1a00313c:	e007      	b.n	1a00314e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00313e:	9b04      	ldr	r3, [sp, #16]
1a003140:	3301      	adds	r3, #1
1a003142:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003144:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003146:	2600      	movs	r6, #0
1a003148:	e001      	b.n	1a00314e <Chip_SetupCoreClock+0x6e>
1a00314a:	2500      	movs	r5, #0
1a00314c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00314e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003152:	9b01      	ldr	r3, [sp, #4]
1a003154:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003158:	9a05      	ldr	r2, [sp, #20]
1a00315a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00315e:	9a03      	ldr	r2, [sp, #12]
1a003160:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003164:	9a04      	ldr	r2, [sp, #16]
1a003166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00316a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00316e:	4a2e      	ldr	r2, [pc, #184]	; (1a003228 <Chip_SetupCoreClock+0x148>)
1a003170:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003172:	4b2d      	ldr	r3, [pc, #180]	; (1a003228 <Chip_SetupCoreClock+0x148>)
1a003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003176:	f013 0f01 	tst.w	r3, #1
1a00317a:	d0fa      	beq.n	1a003172 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00317c:	2300      	movs	r3, #0
1a00317e:	2201      	movs	r2, #1
1a003180:	2109      	movs	r1, #9
1a003182:	2004      	movs	r0, #4
1a003184:	f7ff ff08 	bl	1a002f98 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003188:	b1fe      	cbz	r6, 1a0031ca <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00318a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00318e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003190:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003192:	1e5a      	subs	r2, r3, #1
1a003194:	9209      	str	r2, [sp, #36]	; 0x24
1a003196:	2b00      	cmp	r3, #0
1a003198:	d1fa      	bne.n	1a003190 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00319a:	9b01      	ldr	r3, [sp, #4]
1a00319c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0031a0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0031a2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0031a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0031aa:	9a05      	ldr	r2, [sp, #20]
1a0031ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0031b0:	9a03      	ldr	r2, [sp, #12]
1a0031b2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0031b6:	9a04      	ldr	r2, [sp, #16]
1a0031b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0031bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0031c0:	4a19      	ldr	r2, [pc, #100]	; (1a003228 <Chip_SetupCoreClock+0x148>)
1a0031c2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0031c4:	b36c      	cbz	r4, 1a003222 <Chip_SetupCoreClock+0x142>
1a0031c6:	2400      	movs	r4, #0
1a0031c8:	e029      	b.n	1a00321e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0031ca:	2d00      	cmp	r5, #0
1a0031cc:	d0fa      	beq.n	1a0031c4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0031ce:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0031d2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0031d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0031d6:	1e5a      	subs	r2, r3, #1
1a0031d8:	9209      	str	r2, [sp, #36]	; 0x24
1a0031da:	2b00      	cmp	r3, #0
1a0031dc:	d1fa      	bne.n	1a0031d4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0031de:	9b04      	ldr	r3, [sp, #16]
1a0031e0:	1e5a      	subs	r2, r3, #1
1a0031e2:	9204      	str	r2, [sp, #16]
1a0031e4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0031e8:	9b01      	ldr	r3, [sp, #4]
1a0031ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0031ee:	9905      	ldr	r1, [sp, #20]
1a0031f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0031f4:	9903      	ldr	r1, [sp, #12]
1a0031f6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0031fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0031fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003202:	4a09      	ldr	r2, [pc, #36]	; (1a003228 <Chip_SetupCoreClock+0x148>)
1a003204:	6453      	str	r3, [r2, #68]	; 0x44
1a003206:	e7dd      	b.n	1a0031c4 <Chip_SetupCoreClock+0xe4>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003208:	4809      	ldr	r0, [pc, #36]	; (1a003230 <Chip_SetupCoreClock+0x150>)
1a00320a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00320e:	78cb      	ldrb	r3, [r1, #3]
1a003210:	788a      	ldrb	r2, [r1, #2]
1a003212:	7849      	ldrb	r1, [r1, #1]
1a003214:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003218:	f7ff febe 	bl	1a002f98 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00321c:	3401      	adds	r4, #1
1a00321e:	2c11      	cmp	r4, #17
1a003220:	d9f2      	bls.n	1a003208 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003222:	b00a      	add	sp, #40	; 0x28
1a003224:	bd70      	pop	{r4, r5, r6, pc}
1a003226:	bf00      	nop
1a003228:	40050000 	.word	0x40050000
1a00322c:	068e7780 	.word	0x068e7780
1a003230:	1a00519c 	.word	0x1a00519c

1a003234 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a003234:	4770      	bx	lr
1a003236:	Address 0x000000001a003236 is out of bounds.


1a003238 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003238:	2901      	cmp	r1, #1
1a00323a:	d000      	beq.n	1a00323e <Chip_I2C_EventHandler+0x6>
1a00323c:	4770      	bx	lr
		return;
	}

	stat = &iic->mXfer->status;
1a00323e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003242:	0082      	lsls	r2, r0, #2
1a003244:	4b03      	ldr	r3, [pc, #12]	; (1a003254 <Chip_I2C_EventHandler+0x1c>)
1a003246:	4413      	add	r3, r2
1a003248:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00324a:	7d13      	ldrb	r3, [r2, #20]
1a00324c:	b2db      	uxtb	r3, r3
1a00324e:	2b04      	cmp	r3, #4
1a003250:	d0fb      	beq.n	1a00324a <Chip_I2C_EventHandler+0x12>
1a003252:	e7f3      	b.n	1a00323c <Chip_I2C_EventHandler+0x4>
1a003254:	10000008 	.word	0x10000008

1a003258 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003258:	b570      	push	{r4, r5, r6, lr}
1a00325a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a00325c:	4e06      	ldr	r6, [pc, #24]	; (1a003278 <Chip_I2C_Init+0x20>)
1a00325e:	00c4      	lsls	r4, r0, #3
1a003260:	1a22      	subs	r2, r4, r0
1a003262:	0093      	lsls	r3, r2, #2
1a003264:	4433      	add	r3, r6
1a003266:	8898      	ldrh	r0, [r3, #4]
1a003268:	f7ff fefa 	bl	1a003060 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00326c:	1b64      	subs	r4, r4, r5
1a00326e:	00a3      	lsls	r3, r4, #2
1a003270:	58f3      	ldr	r3, [r6, r3]
1a003272:	226c      	movs	r2, #108	; 0x6c
1a003274:	619a      	str	r2, [r3, #24]
1a003276:	bd70      	pop	{r4, r5, r6, pc}
1a003278:	10000008 	.word	0x10000008

1a00327c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a00327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003280:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003282:	4e0b      	ldr	r6, [pc, #44]	; (1a0032b0 <Chip_I2C_SetClockRate+0x34>)
1a003284:	00c5      	lsls	r5, r0, #3
1a003286:	1a2b      	subs	r3, r5, r0
1a003288:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a00328c:	eb06 0308 	add.w	r3, r6, r8
1a003290:	8898      	ldrh	r0, [r3, #4]
1a003292:	f7ff feff 	bl	1a003094 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003296:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00329a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00329e:	0842      	lsrs	r2, r0, #1
1a0032a0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0032a2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0032a6:	691a      	ldr	r2, [r3, #16]
1a0032a8:	1a80      	subs	r0, r0, r2
1a0032aa:	6158      	str	r0, [r3, #20]
1a0032ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0032b0:	10000008 	.word	0x10000008

1a0032b4 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0032b4:	4b03      	ldr	r3, [pc, #12]	; (1a0032c4 <Chip_SSP_GetClockIndex+0x10>)
1a0032b6:	4298      	cmp	r0, r3
1a0032b8:	d001      	beq.n	1a0032be <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0032ba:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0032bc:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0032be:	20a5      	movs	r0, #165	; 0xa5
1a0032c0:	4770      	bx	lr
1a0032c2:	bf00      	nop
1a0032c4:	400c5000 	.word	0x400c5000

1a0032c8 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0032c8:	4b04      	ldr	r3, [pc, #16]	; (1a0032dc <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0032ca:	4298      	cmp	r0, r3
1a0032cc:	d002      	beq.n	1a0032d4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0032ce:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0032d2:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0032d4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0032d8:	4770      	bx	lr
1a0032da:	bf00      	nop
1a0032dc:	400c5000 	.word	0x400c5000

1a0032e0 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0032e0:	6803      	ldr	r3, [r0, #0]
1a0032e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0032e6:	0209      	lsls	r1, r1, #8
1a0032e8:	b289      	uxth	r1, r1
1a0032ea:	430b      	orrs	r3, r1
1a0032ec:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a0032ee:	6102      	str	r2, [r0, #16]
1a0032f0:	4770      	bx	lr

1a0032f2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0032f2:	b570      	push	{r4, r5, r6, lr}
1a0032f4:	4606      	mov	r6, r0
1a0032f6:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0032f8:	f7ff ffe6 	bl	1a0032c8 <Chip_SSP_GetPeriphClockIndex>
1a0032fc:	f7ff feca 	bl	1a003094 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003300:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003306:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003308:	e000      	b.n	1a00330c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00330a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a00330c:	42ab      	cmp	r3, r5
1a00330e:	d90b      	bls.n	1a003328 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003310:	1c4c      	adds	r4, r1, #1
1a003312:	fb04 f302 	mul.w	r3, r4, r2
1a003316:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00331a:	429d      	cmp	r5, r3
1a00331c:	d2f6      	bcs.n	1a00330c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00331e:	2cff      	cmp	r4, #255	; 0xff
1a003320:	d9f3      	bls.n	1a00330a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003322:	3202      	adds	r2, #2
				cr0_div = 0;
1a003324:	2100      	movs	r1, #0
1a003326:	e7f1      	b.n	1a00330c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003328:	4630      	mov	r0, r6
1a00332a:	f7ff ffd9 	bl	1a0032e0 <Chip_SSP_SetClockRate>
1a00332e:	bd70      	pop	{r4, r5, r6, pc}

1a003330 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003330:	b510      	push	{r4, lr}
1a003332:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003334:	f7ff ffbe 	bl	1a0032b4 <Chip_SSP_GetClockIndex>
1a003338:	f7ff fe92 	bl	1a003060 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00333c:	4620      	mov	r0, r4
1a00333e:	f7ff ffc3 	bl	1a0032c8 <Chip_SSP_GetPeriphClockIndex>
1a003342:	f7ff fe8d 	bl	1a003060 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003346:	6863      	ldr	r3, [r4, #4]
1a003348:	f023 0304 	bic.w	r3, r3, #4
1a00334c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00334e:	6823      	ldr	r3, [r4, #0]
1a003350:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003354:	f043 0307 	orr.w	r3, r3, #7
1a003358:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00335a:	4902      	ldr	r1, [pc, #8]	; (1a003364 <Chip_SSP_Init+0x34>)
1a00335c:	4620      	mov	r0, r4
1a00335e:	f7ff ffc8 	bl	1a0032f2 <Chip_SSP_SetBitRate>
1a003362:	bd10      	pop	{r4, pc}
1a003364:	000186a0 	.word	0x000186a0

1a003368 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003368:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00336a:	4b0d      	ldr	r3, [pc, #52]	; (1a0033a0 <SystemInit+0x38>)
1a00336c:	4a0d      	ldr	r2, [pc, #52]	; (1a0033a4 <SystemInit+0x3c>)
1a00336e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003370:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003374:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003376:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00337a:	2b20      	cmp	r3, #32
1a00337c:	d00d      	beq.n	1a00339a <SystemInit+0x32>
  {
    return 1U;           /* Single precision FPU */
  }
  else
  {
    return 0U;           /* No FPU */
1a00337e:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a003380:	b133      	cbz	r3, 1a003390 <SystemInit+0x28>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003382:	4a07      	ldr	r2, [pc, #28]	; (1a0033a0 <SystemInit+0x38>)
1a003384:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00338c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a003390:	f7ff fab8 	bl	1a002904 <Board_SystemInit>
   Board_Init();
1a003394:	f7ff fa3e 	bl	1a002814 <Board_Init>
1a003398:	bd08      	pop	{r3, pc}
    return 1U;           /* Single precision FPU */
1a00339a:	2301      	movs	r3, #1
1a00339c:	e7f0      	b.n	1a003380 <SystemInit+0x18>
1a00339e:	bf00      	nop
1a0033a0:	e000ed00 	.word	0xe000ed00
1a0033a4:	1a000000 	.word	0x1a000000

1a0033a8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0033a8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0033aa:	4d0b      	ldr	r5, [pc, #44]	; (1a0033d8 <gpioObtainPinInit+0x30>)
1a0033ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0033b0:	182c      	adds	r4, r5, r0
1a0033b2:	5628      	ldrsb	r0, [r5, r0]
1a0033b4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0033b6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0033ba:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0033bc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0033c0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0033c2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0033c6:	9b02      	ldr	r3, [sp, #8]
1a0033c8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0033ca:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0033ce:	9b03      	ldr	r3, [sp, #12]
1a0033d0:	701a      	strb	r2, [r3, #0]
}
1a0033d2:	bc30      	pop	{r4, r5}
1a0033d4:	4770      	bx	lr
1a0033d6:	bf00      	nop
1a0033d8:	1a0051e4 	.word	0x1a0051e4

1a0033dc <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0033dc:	f110 0f02 	cmn.w	r0, #2
1a0033e0:	d02c      	beq.n	1a00343c <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0033e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0033e6:	d02b      	beq.n	1a003440 <gpioRead+0x64>
{
1a0033e8:	b500      	push	{lr}
1a0033ea:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0033ec:	2300      	movs	r3, #0
1a0033ee:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0033f2:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0033f6:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0033fa:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0033fe:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003402:	f10d 030b 	add.w	r3, sp, #11
1a003406:	9301      	str	r3, [sp, #4]
1a003408:	ab03      	add	r3, sp, #12
1a00340a:	9300      	str	r3, [sp, #0]
1a00340c:	f10d 030d 	add.w	r3, sp, #13
1a003410:	f10d 020e 	add.w	r2, sp, #14
1a003414:	f10d 010f 	add.w	r1, sp, #15
1a003418:	f7ff ffc6 	bl	1a0033a8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00341c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003420:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003424:	015b      	lsls	r3, r3, #5
1a003426:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00342a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00342e:	5c98      	ldrb	r0, [r3, r2]
1a003430:	3000      	adds	r0, #0
1a003432:	bf18      	it	ne
1a003434:	2001      	movne	r0, #1

   return ret_val;
}
1a003436:	b005      	add	sp, #20
1a003438:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00343c:	2001      	movs	r0, #1
1a00343e:	4770      	bx	lr
      return FALSE;
1a003440:	2000      	movs	r0, #0
1a003442:	4770      	bx	lr

1a003444 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003444:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003446:	4b04      	ldr	r3, [pc, #16]	; (1a003458 <USB0_IRQHandler+0x14>)
1a003448:	681b      	ldr	r3, [r3, #0]
1a00344a:	681b      	ldr	r3, [r3, #0]
1a00344c:	68db      	ldr	r3, [r3, #12]
1a00344e:	4a03      	ldr	r2, [pc, #12]	; (1a00345c <USB0_IRQHandler+0x18>)
1a003450:	6810      	ldr	r0, [r2, #0]
1a003452:	4798      	blx	r3
1a003454:	bd08      	pop	{r3, pc}
1a003456:	bf00      	nop
1a003458:	10002c10 	.word	0x10002c10
1a00345c:	10002bbc 	.word	0x10002bbc

1a003460 <__aeabi_uldivmod>:
1a003460:	b953      	cbnz	r3, 1a003478 <__aeabi_uldivmod+0x18>
1a003462:	b94a      	cbnz	r2, 1a003478 <__aeabi_uldivmod+0x18>
1a003464:	2900      	cmp	r1, #0
1a003466:	bf08      	it	eq
1a003468:	2800      	cmpeq	r0, #0
1a00346a:	bf1c      	itt	ne
1a00346c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003470:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003474:	f000 b97a 	b.w	1a00376c <__aeabi_idiv0>
1a003478:	f1ad 0c08 	sub.w	ip, sp, #8
1a00347c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003480:	f000 f806 	bl	1a003490 <__udivmoddi4>
1a003484:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00348c:	b004      	add	sp, #16
1a00348e:	4770      	bx	lr

1a003490 <__udivmoddi4>:
1a003490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003494:	468c      	mov	ip, r1
1a003496:	460d      	mov	r5, r1
1a003498:	4604      	mov	r4, r0
1a00349a:	9e08      	ldr	r6, [sp, #32]
1a00349c:	2b00      	cmp	r3, #0
1a00349e:	d151      	bne.n	1a003544 <__udivmoddi4+0xb4>
1a0034a0:	428a      	cmp	r2, r1
1a0034a2:	4617      	mov	r7, r2
1a0034a4:	d96d      	bls.n	1a003582 <__udivmoddi4+0xf2>
1a0034a6:	fab2 fe82 	clz	lr, r2
1a0034aa:	f1be 0f00 	cmp.w	lr, #0
1a0034ae:	d00b      	beq.n	1a0034c8 <__udivmoddi4+0x38>
1a0034b0:	f1ce 0c20 	rsb	ip, lr, #32
1a0034b4:	fa01 f50e 	lsl.w	r5, r1, lr
1a0034b8:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0034bc:	fa02 f70e 	lsl.w	r7, r2, lr
1a0034c0:	ea4c 0c05 	orr.w	ip, ip, r5
1a0034c4:	fa00 f40e 	lsl.w	r4, r0, lr
1a0034c8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a0034cc:	0c25      	lsrs	r5, r4, #16
1a0034ce:	fbbc f8fa 	udiv	r8, ip, sl
1a0034d2:	fa1f f987 	uxth.w	r9, r7
1a0034d6:	fb0a cc18 	mls	ip, sl, r8, ip
1a0034da:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a0034de:	fb08 f309 	mul.w	r3, r8, r9
1a0034e2:	42ab      	cmp	r3, r5
1a0034e4:	d90a      	bls.n	1a0034fc <__udivmoddi4+0x6c>
1a0034e6:	19ed      	adds	r5, r5, r7
1a0034e8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a0034ec:	f080 8123 	bcs.w	1a003736 <__udivmoddi4+0x2a6>
1a0034f0:	42ab      	cmp	r3, r5
1a0034f2:	f240 8120 	bls.w	1a003736 <__udivmoddi4+0x2a6>
1a0034f6:	f1a8 0802 	sub.w	r8, r8, #2
1a0034fa:	443d      	add	r5, r7
1a0034fc:	1aed      	subs	r5, r5, r3
1a0034fe:	b2a4      	uxth	r4, r4
1a003500:	fbb5 f0fa 	udiv	r0, r5, sl
1a003504:	fb0a 5510 	mls	r5, sl, r0, r5
1a003508:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a00350c:	fb00 f909 	mul.w	r9, r0, r9
1a003510:	45a1      	cmp	r9, r4
1a003512:	d909      	bls.n	1a003528 <__udivmoddi4+0x98>
1a003514:	19e4      	adds	r4, r4, r7
1a003516:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00351a:	f080 810a 	bcs.w	1a003732 <__udivmoddi4+0x2a2>
1a00351e:	45a1      	cmp	r9, r4
1a003520:	f240 8107 	bls.w	1a003732 <__udivmoddi4+0x2a2>
1a003524:	3802      	subs	r0, #2
1a003526:	443c      	add	r4, r7
1a003528:	eba4 0409 	sub.w	r4, r4, r9
1a00352c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a003530:	2100      	movs	r1, #0
1a003532:	2e00      	cmp	r6, #0
1a003534:	d061      	beq.n	1a0035fa <__udivmoddi4+0x16a>
1a003536:	fa24 f40e 	lsr.w	r4, r4, lr
1a00353a:	2300      	movs	r3, #0
1a00353c:	6034      	str	r4, [r6, #0]
1a00353e:	6073      	str	r3, [r6, #4]
1a003540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003544:	428b      	cmp	r3, r1
1a003546:	d907      	bls.n	1a003558 <__udivmoddi4+0xc8>
1a003548:	2e00      	cmp	r6, #0
1a00354a:	d054      	beq.n	1a0035f6 <__udivmoddi4+0x166>
1a00354c:	2100      	movs	r1, #0
1a00354e:	e886 0021 	stmia.w	r6, {r0, r5}
1a003552:	4608      	mov	r0, r1
1a003554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003558:	fab3 f183 	clz	r1, r3
1a00355c:	2900      	cmp	r1, #0
1a00355e:	f040 808e 	bne.w	1a00367e <__udivmoddi4+0x1ee>
1a003562:	42ab      	cmp	r3, r5
1a003564:	d302      	bcc.n	1a00356c <__udivmoddi4+0xdc>
1a003566:	4282      	cmp	r2, r0
1a003568:	f200 80fa 	bhi.w	1a003760 <__udivmoddi4+0x2d0>
1a00356c:	1a84      	subs	r4, r0, r2
1a00356e:	eb65 0503 	sbc.w	r5, r5, r3
1a003572:	2001      	movs	r0, #1
1a003574:	46ac      	mov	ip, r5
1a003576:	2e00      	cmp	r6, #0
1a003578:	d03f      	beq.n	1a0035fa <__udivmoddi4+0x16a>
1a00357a:	e886 1010 	stmia.w	r6, {r4, ip}
1a00357e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003582:	b912      	cbnz	r2, 1a00358a <__udivmoddi4+0xfa>
1a003584:	2701      	movs	r7, #1
1a003586:	fbb7 f7f2 	udiv	r7, r7, r2
1a00358a:	fab7 fe87 	clz	lr, r7
1a00358e:	f1be 0f00 	cmp.w	lr, #0
1a003592:	d134      	bne.n	1a0035fe <__udivmoddi4+0x16e>
1a003594:	1beb      	subs	r3, r5, r7
1a003596:	0c3a      	lsrs	r2, r7, #16
1a003598:	fa1f fc87 	uxth.w	ip, r7
1a00359c:	2101      	movs	r1, #1
1a00359e:	fbb3 f8f2 	udiv	r8, r3, r2
1a0035a2:	0c25      	lsrs	r5, r4, #16
1a0035a4:	fb02 3318 	mls	r3, r2, r8, r3
1a0035a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0035ac:	fb0c f308 	mul.w	r3, ip, r8
1a0035b0:	42ab      	cmp	r3, r5
1a0035b2:	d907      	bls.n	1a0035c4 <__udivmoddi4+0x134>
1a0035b4:	19ed      	adds	r5, r5, r7
1a0035b6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a0035ba:	d202      	bcs.n	1a0035c2 <__udivmoddi4+0x132>
1a0035bc:	42ab      	cmp	r3, r5
1a0035be:	f200 80d1 	bhi.w	1a003764 <__udivmoddi4+0x2d4>
1a0035c2:	4680      	mov	r8, r0
1a0035c4:	1aed      	subs	r5, r5, r3
1a0035c6:	b2a3      	uxth	r3, r4
1a0035c8:	fbb5 f0f2 	udiv	r0, r5, r2
1a0035cc:	fb02 5510 	mls	r5, r2, r0, r5
1a0035d0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a0035d4:	fb0c fc00 	mul.w	ip, ip, r0
1a0035d8:	45a4      	cmp	ip, r4
1a0035da:	d907      	bls.n	1a0035ec <__udivmoddi4+0x15c>
1a0035dc:	19e4      	adds	r4, r4, r7
1a0035de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0035e2:	d202      	bcs.n	1a0035ea <__udivmoddi4+0x15a>
1a0035e4:	45a4      	cmp	ip, r4
1a0035e6:	f200 80b8 	bhi.w	1a00375a <__udivmoddi4+0x2ca>
1a0035ea:	4618      	mov	r0, r3
1a0035ec:	eba4 040c 	sub.w	r4, r4, ip
1a0035f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a0035f4:	e79d      	b.n	1a003532 <__udivmoddi4+0xa2>
1a0035f6:	4631      	mov	r1, r6
1a0035f8:	4630      	mov	r0, r6
1a0035fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0035fe:	f1ce 0420 	rsb	r4, lr, #32
1a003602:	fa05 f30e 	lsl.w	r3, r5, lr
1a003606:	fa07 f70e 	lsl.w	r7, r7, lr
1a00360a:	fa20 f804 	lsr.w	r8, r0, r4
1a00360e:	0c3a      	lsrs	r2, r7, #16
1a003610:	fa25 f404 	lsr.w	r4, r5, r4
1a003614:	ea48 0803 	orr.w	r8, r8, r3
1a003618:	fbb4 f1f2 	udiv	r1, r4, r2
1a00361c:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a003620:	fb02 4411 	mls	r4, r2, r1, r4
1a003624:	fa1f fc87 	uxth.w	ip, r7
1a003628:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a00362c:	fb01 f30c 	mul.w	r3, r1, ip
1a003630:	42ab      	cmp	r3, r5
1a003632:	fa00 f40e 	lsl.w	r4, r0, lr
1a003636:	d909      	bls.n	1a00364c <__udivmoddi4+0x1bc>
1a003638:	19ed      	adds	r5, r5, r7
1a00363a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a00363e:	f080 808a 	bcs.w	1a003756 <__udivmoddi4+0x2c6>
1a003642:	42ab      	cmp	r3, r5
1a003644:	f240 8087 	bls.w	1a003756 <__udivmoddi4+0x2c6>
1a003648:	3902      	subs	r1, #2
1a00364a:	443d      	add	r5, r7
1a00364c:	1aeb      	subs	r3, r5, r3
1a00364e:	fa1f f588 	uxth.w	r5, r8
1a003652:	fbb3 f0f2 	udiv	r0, r3, r2
1a003656:	fb02 3310 	mls	r3, r2, r0, r3
1a00365a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a00365e:	fb00 f30c 	mul.w	r3, r0, ip
1a003662:	42ab      	cmp	r3, r5
1a003664:	d907      	bls.n	1a003676 <__udivmoddi4+0x1e6>
1a003666:	19ed      	adds	r5, r5, r7
1a003668:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a00366c:	d26f      	bcs.n	1a00374e <__udivmoddi4+0x2be>
1a00366e:	42ab      	cmp	r3, r5
1a003670:	d96d      	bls.n	1a00374e <__udivmoddi4+0x2be>
1a003672:	3802      	subs	r0, #2
1a003674:	443d      	add	r5, r7
1a003676:	1aeb      	subs	r3, r5, r3
1a003678:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a00367c:	e78f      	b.n	1a00359e <__udivmoddi4+0x10e>
1a00367e:	f1c1 0720 	rsb	r7, r1, #32
1a003682:	fa22 f807 	lsr.w	r8, r2, r7
1a003686:	408b      	lsls	r3, r1
1a003688:	fa05 f401 	lsl.w	r4, r5, r1
1a00368c:	ea48 0303 	orr.w	r3, r8, r3
1a003690:	fa20 fe07 	lsr.w	lr, r0, r7
1a003694:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a003698:	40fd      	lsrs	r5, r7
1a00369a:	ea4e 0e04 	orr.w	lr, lr, r4
1a00369e:	fbb5 f9fc 	udiv	r9, r5, ip
1a0036a2:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a0036a6:	fb0c 5519 	mls	r5, ip, r9, r5
1a0036aa:	fa1f f883 	uxth.w	r8, r3
1a0036ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a0036b2:	fb09 f408 	mul.w	r4, r9, r8
1a0036b6:	42ac      	cmp	r4, r5
1a0036b8:	fa02 f201 	lsl.w	r2, r2, r1
1a0036bc:	fa00 fa01 	lsl.w	sl, r0, r1
1a0036c0:	d908      	bls.n	1a0036d4 <__udivmoddi4+0x244>
1a0036c2:	18ed      	adds	r5, r5, r3
1a0036c4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0036c8:	d243      	bcs.n	1a003752 <__udivmoddi4+0x2c2>
1a0036ca:	42ac      	cmp	r4, r5
1a0036cc:	d941      	bls.n	1a003752 <__udivmoddi4+0x2c2>
1a0036ce:	f1a9 0902 	sub.w	r9, r9, #2
1a0036d2:	441d      	add	r5, r3
1a0036d4:	1b2d      	subs	r5, r5, r4
1a0036d6:	fa1f fe8e 	uxth.w	lr, lr
1a0036da:	fbb5 f0fc 	udiv	r0, r5, ip
1a0036de:	fb0c 5510 	mls	r5, ip, r0, r5
1a0036e2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a0036e6:	fb00 f808 	mul.w	r8, r0, r8
1a0036ea:	45a0      	cmp	r8, r4
1a0036ec:	d907      	bls.n	1a0036fe <__udivmoddi4+0x26e>
1a0036ee:	18e4      	adds	r4, r4, r3
1a0036f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a0036f4:	d229      	bcs.n	1a00374a <__udivmoddi4+0x2ba>
1a0036f6:	45a0      	cmp	r8, r4
1a0036f8:	d927      	bls.n	1a00374a <__udivmoddi4+0x2ba>
1a0036fa:	3802      	subs	r0, #2
1a0036fc:	441c      	add	r4, r3
1a0036fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003702:	eba4 0408 	sub.w	r4, r4, r8
1a003706:	fba0 8902 	umull	r8, r9, r0, r2
1a00370a:	454c      	cmp	r4, r9
1a00370c:	46c6      	mov	lr, r8
1a00370e:	464d      	mov	r5, r9
1a003710:	d315      	bcc.n	1a00373e <__udivmoddi4+0x2ae>
1a003712:	d012      	beq.n	1a00373a <__udivmoddi4+0x2aa>
1a003714:	b156      	cbz	r6, 1a00372c <__udivmoddi4+0x29c>
1a003716:	ebba 030e 	subs.w	r3, sl, lr
1a00371a:	eb64 0405 	sbc.w	r4, r4, r5
1a00371e:	fa04 f707 	lsl.w	r7, r4, r7
1a003722:	40cb      	lsrs	r3, r1
1a003724:	431f      	orrs	r7, r3
1a003726:	40cc      	lsrs	r4, r1
1a003728:	6037      	str	r7, [r6, #0]
1a00372a:	6074      	str	r4, [r6, #4]
1a00372c:	2100      	movs	r1, #0
1a00372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003732:	4618      	mov	r0, r3
1a003734:	e6f8      	b.n	1a003528 <__udivmoddi4+0x98>
1a003736:	4690      	mov	r8, r2
1a003738:	e6e0      	b.n	1a0034fc <__udivmoddi4+0x6c>
1a00373a:	45c2      	cmp	sl, r8
1a00373c:	d2ea      	bcs.n	1a003714 <__udivmoddi4+0x284>
1a00373e:	ebb8 0e02 	subs.w	lr, r8, r2
1a003742:	eb69 0503 	sbc.w	r5, r9, r3
1a003746:	3801      	subs	r0, #1
1a003748:	e7e4      	b.n	1a003714 <__udivmoddi4+0x284>
1a00374a:	4628      	mov	r0, r5
1a00374c:	e7d7      	b.n	1a0036fe <__udivmoddi4+0x26e>
1a00374e:	4640      	mov	r0, r8
1a003750:	e791      	b.n	1a003676 <__udivmoddi4+0x1e6>
1a003752:	4681      	mov	r9, r0
1a003754:	e7be      	b.n	1a0036d4 <__udivmoddi4+0x244>
1a003756:	4601      	mov	r1, r0
1a003758:	e778      	b.n	1a00364c <__udivmoddi4+0x1bc>
1a00375a:	3802      	subs	r0, #2
1a00375c:	443c      	add	r4, r7
1a00375e:	e745      	b.n	1a0035ec <__udivmoddi4+0x15c>
1a003760:	4608      	mov	r0, r1
1a003762:	e708      	b.n	1a003576 <__udivmoddi4+0xe6>
1a003764:	f1a8 0802 	sub.w	r8, r8, #2
1a003768:	443d      	add	r5, r7
1a00376a:	e72b      	b.n	1a0035c4 <__udivmoddi4+0x134>

1a00376c <__aeabi_idiv0>:
1a00376c:	4770      	bx	lr
1a00376e:	bf00      	nop

1a003770 <__sflush_r>:
1a003770:	898b      	ldrh	r3, [r1, #12]
1a003772:	071a      	lsls	r2, r3, #28
1a003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003778:	460d      	mov	r5, r1
1a00377a:	4680      	mov	r8, r0
1a00377c:	d433      	bmi.n	1a0037e6 <__sflush_r+0x76>
1a00377e:	684a      	ldr	r2, [r1, #4]
1a003780:	2a00      	cmp	r2, #0
1a003782:	dd67      	ble.n	1a003854 <__sflush_r+0xe4>
1a003784:	6aec      	ldr	r4, [r5, #44]	; 0x2c
1a003786:	2c00      	cmp	r4, #0
1a003788:	d045      	beq.n	1a003816 <__sflush_r+0xa6>
1a00378a:	2200      	movs	r2, #0
1a00378c:	f8d8 6000 	ldr.w	r6, [r8]
1a003790:	f8c8 2000 	str.w	r2, [r8]
1a003794:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a003798:	d060      	beq.n	1a00385c <__sflush_r+0xec>
1a00379a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
1a00379c:	075f      	lsls	r7, r3, #29
1a00379e:	d505      	bpl.n	1a0037ac <__sflush_r+0x3c>
1a0037a0:	6869      	ldr	r1, [r5, #4]
1a0037a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
1a0037a4:	1a52      	subs	r2, r2, r1
1a0037a6:	b10b      	cbz	r3, 1a0037ac <__sflush_r+0x3c>
1a0037a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0037aa:	1ad2      	subs	r2, r2, r3
1a0037ac:	2300      	movs	r3, #0
1a0037ae:	6a29      	ldr	r1, [r5, #32]
1a0037b0:	4640      	mov	r0, r8
1a0037b2:	47a0      	blx	r4
1a0037b4:	1c44      	adds	r4, r0, #1
1a0037b6:	d039      	beq.n	1a00382c <__sflush_r+0xbc>
1a0037b8:	89ab      	ldrh	r3, [r5, #12]
1a0037ba:	692a      	ldr	r2, [r5, #16]
1a0037bc:	602a      	str	r2, [r5, #0]
1a0037be:	04db      	lsls	r3, r3, #19
1a0037c0:	f04f 0200 	mov.w	r2, #0
1a0037c4:	606a      	str	r2, [r5, #4]
1a0037c6:	d443      	bmi.n	1a003850 <__sflush_r+0xe0>
1a0037c8:	6b69      	ldr	r1, [r5, #52]	; 0x34
1a0037ca:	f8c8 6000 	str.w	r6, [r8]
1a0037ce:	b311      	cbz	r1, 1a003816 <__sflush_r+0xa6>
1a0037d0:	f105 0344 	add.w	r3, r5, #68	; 0x44
1a0037d4:	4299      	cmp	r1, r3
1a0037d6:	d002      	beq.n	1a0037de <__sflush_r+0x6e>
1a0037d8:	4640      	mov	r0, r8
1a0037da:	f000 fb19 	bl	1a003e10 <_free_r>
1a0037de:	2000      	movs	r0, #0
1a0037e0:	6368      	str	r0, [r5, #52]	; 0x34
1a0037e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0037e6:	690e      	ldr	r6, [r1, #16]
1a0037e8:	b1ae      	cbz	r6, 1a003816 <__sflush_r+0xa6>
1a0037ea:	680c      	ldr	r4, [r1, #0]
1a0037ec:	600e      	str	r6, [r1, #0]
1a0037ee:	0798      	lsls	r0, r3, #30
1a0037f0:	bf0c      	ite	eq
1a0037f2:	694b      	ldreq	r3, [r1, #20]
1a0037f4:	2300      	movne	r3, #0
1a0037f6:	1ba4      	subs	r4, r4, r6
1a0037f8:	608b      	str	r3, [r1, #8]
1a0037fa:	e00a      	b.n	1a003812 <__sflush_r+0xa2>
1a0037fc:	4623      	mov	r3, r4
1a0037fe:	4632      	mov	r2, r6
1a003800:	6aaf      	ldr	r7, [r5, #40]	; 0x28
1a003802:	6a29      	ldr	r1, [r5, #32]
1a003804:	4640      	mov	r0, r8
1a003806:	47b8      	blx	r7
1a003808:	2800      	cmp	r0, #0
1a00380a:	eba4 0400 	sub.w	r4, r4, r0
1a00380e:	4406      	add	r6, r0
1a003810:	dd04      	ble.n	1a00381c <__sflush_r+0xac>
1a003812:	2c00      	cmp	r4, #0
1a003814:	dcf2      	bgt.n	1a0037fc <__sflush_r+0x8c>
1a003816:	2000      	movs	r0, #0
1a003818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00381c:	89ab      	ldrh	r3, [r5, #12]
1a00381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003822:	81ab      	strh	r3, [r5, #12]
1a003824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00382c:	f8d8 2000 	ldr.w	r2, [r8]
1a003830:	2a1d      	cmp	r2, #29
1a003832:	d8f3      	bhi.n	1a00381c <__sflush_r+0xac>
1a003834:	4b17      	ldr	r3, [pc, #92]	; (1a003894 <__sflush_r+0x124>)
1a003836:	40d3      	lsrs	r3, r2
1a003838:	43db      	mvns	r3, r3
1a00383a:	f013 0301 	ands.w	r3, r3, #1
1a00383e:	d1ed      	bne.n	1a00381c <__sflush_r+0xac>
1a003840:	89a9      	ldrh	r1, [r5, #12]
1a003842:	692c      	ldr	r4, [r5, #16]
1a003844:	606b      	str	r3, [r5, #4]
1a003846:	04c9      	lsls	r1, r1, #19
1a003848:	602c      	str	r4, [r5, #0]
1a00384a:	d5bd      	bpl.n	1a0037c8 <__sflush_r+0x58>
1a00384c:	2a00      	cmp	r2, #0
1a00384e:	d1bb      	bne.n	1a0037c8 <__sflush_r+0x58>
1a003850:	6568      	str	r0, [r5, #84]	; 0x54
1a003852:	e7b9      	b.n	1a0037c8 <__sflush_r+0x58>
1a003854:	6c0a      	ldr	r2, [r1, #64]	; 0x40
1a003856:	2a00      	cmp	r2, #0
1a003858:	dc94      	bgt.n	1a003784 <__sflush_r+0x14>
1a00385a:	e7dc      	b.n	1a003816 <__sflush_r+0xa6>
1a00385c:	2301      	movs	r3, #1
1a00385e:	6a29      	ldr	r1, [r5, #32]
1a003860:	4640      	mov	r0, r8
1a003862:	47a0      	blx	r4
1a003864:	1c43      	adds	r3, r0, #1
1a003866:	4602      	mov	r2, r0
1a003868:	d002      	beq.n	1a003870 <__sflush_r+0x100>
1a00386a:	89ab      	ldrh	r3, [r5, #12]
1a00386c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
1a00386e:	e795      	b.n	1a00379c <__sflush_r+0x2c>
1a003870:	f8d8 3000 	ldr.w	r3, [r8]
1a003874:	2b00      	cmp	r3, #0
1a003876:	d0f8      	beq.n	1a00386a <__sflush_r+0xfa>
1a003878:	2b1d      	cmp	r3, #29
1a00387a:	d001      	beq.n	1a003880 <__sflush_r+0x110>
1a00387c:	2b16      	cmp	r3, #22
1a00387e:	d102      	bne.n	1a003886 <__sflush_r+0x116>
1a003880:	f8c8 6000 	str.w	r6, [r8]
1a003884:	e7c7      	b.n	1a003816 <__sflush_r+0xa6>
1a003886:	89ab      	ldrh	r3, [r5, #12]
1a003888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00388c:	81ab      	strh	r3, [r5, #12]
1a00388e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003892:	bf00      	nop
1a003894:	20400001 	.word	0x20400001

1a003898 <_fflush_r>:
1a003898:	690b      	ldr	r3, [r1, #16]
1a00389a:	b333      	cbz	r3, 1a0038ea <_fflush_r+0x52>
1a00389c:	b510      	push	{r4, lr}
1a00389e:	4604      	mov	r4, r0
1a0038a0:	b082      	sub	sp, #8
1a0038a2:	b108      	cbz	r0, 1a0038a8 <_fflush_r+0x10>
1a0038a4:	6983      	ldr	r3, [r0, #24]
1a0038a6:	b1ab      	cbz	r3, 1a0038d4 <_fflush_r+0x3c>
1a0038a8:	4b11      	ldr	r3, [pc, #68]	; (1a0038f0 <_fflush_r+0x58>)
1a0038aa:	4299      	cmp	r1, r3
1a0038ac:	d019      	beq.n	1a0038e2 <_fflush_r+0x4a>
1a0038ae:	4b11      	ldr	r3, [pc, #68]	; (1a0038f4 <_fflush_r+0x5c>)
1a0038b0:	4299      	cmp	r1, r3
1a0038b2:	d018      	beq.n	1a0038e6 <_fflush_r+0x4e>
1a0038b4:	4b10      	ldr	r3, [pc, #64]	; (1a0038f8 <_fflush_r+0x60>)
1a0038b6:	4299      	cmp	r1, r3
1a0038b8:	bf08      	it	eq
1a0038ba:	68e1      	ldreq	r1, [r4, #12]
1a0038bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a0038c0:	b913      	cbnz	r3, 1a0038c8 <_fflush_r+0x30>
1a0038c2:	2000      	movs	r0, #0
1a0038c4:	b002      	add	sp, #8
1a0038c6:	bd10      	pop	{r4, pc}
1a0038c8:	4620      	mov	r0, r4
1a0038ca:	b002      	add	sp, #8
1a0038cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0038d0:	f7ff bf4e 	b.w	1a003770 <__sflush_r>
1a0038d4:	9101      	str	r1, [sp, #4]
1a0038d6:	f000 f91b 	bl	1a003b10 <__sinit>
1a0038da:	9901      	ldr	r1, [sp, #4]
1a0038dc:	4b04      	ldr	r3, [pc, #16]	; (1a0038f0 <_fflush_r+0x58>)
1a0038de:	4299      	cmp	r1, r3
1a0038e0:	d1e5      	bne.n	1a0038ae <_fflush_r+0x16>
1a0038e2:	6861      	ldr	r1, [r4, #4]
1a0038e4:	e7ea      	b.n	1a0038bc <_fflush_r+0x24>
1a0038e6:	68a1      	ldr	r1, [r4, #8]
1a0038e8:	e7e8      	b.n	1a0038bc <_fflush_r+0x24>
1a0038ea:	2000      	movs	r0, #0
1a0038ec:	4770      	bx	lr
1a0038ee:	bf00      	nop
1a0038f0:	1a00530c 	.word	0x1a00530c
1a0038f4:	1a0052ec 	.word	0x1a0052ec
1a0038f8:	1a0052cc 	.word	0x1a0052cc

1a0038fc <fflush>:
1a0038fc:	b120      	cbz	r0, 1a003908 <fflush+0xc>
1a0038fe:	4b05      	ldr	r3, [pc, #20]	; (1a003914 <fflush+0x18>)
1a003900:	4601      	mov	r1, r0
1a003902:	6818      	ldr	r0, [r3, #0]
1a003904:	f7ff bfc8 	b.w	1a003898 <_fflush_r>
1a003908:	4b03      	ldr	r3, [pc, #12]	; (1a003918 <fflush+0x1c>)
1a00390a:	4904      	ldr	r1, [pc, #16]	; (1a00391c <fflush+0x20>)
1a00390c:	6818      	ldr	r0, [r3, #0]
1a00390e:	f000 b945 	b.w	1a003b9c <_fwalk_reent>
1a003912:	bf00      	nop
1a003914:	10000040 	.word	0x10000040
1a003918:	1a00532c 	.word	0x1a00532c
1a00391c:	1a003899 	.word	0x1a003899

1a003920 <__fp_unlock>:
1a003920:	2000      	movs	r0, #0
1a003922:	4770      	bx	lr

1a003924 <_cleanup_r>:
1a003924:	4901      	ldr	r1, [pc, #4]	; (1a00392c <_cleanup_r+0x8>)
1a003926:	f000 b939 	b.w	1a003b9c <_fwalk_reent>
1a00392a:	bf00      	nop
1a00392c:	1a003899 	.word	0x1a003899

1a003930 <__fp_lock>:
1a003930:	2000      	movs	r0, #0
1a003932:	4770      	bx	lr

1a003934 <__sfmoreglue>:
1a003934:	b570      	push	{r4, r5, r6, lr}
1a003936:	1e4a      	subs	r2, r1, #1
1a003938:	2568      	movs	r5, #104	; 0x68
1a00393a:	fb05 f502 	mul.w	r5, r5, r2
1a00393e:	460e      	mov	r6, r1
1a003940:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003944:	f000 faac 	bl	1a003ea0 <_malloc_r>
1a003948:	4604      	mov	r4, r0
1a00394a:	b140      	cbz	r0, 1a00395e <__sfmoreglue+0x2a>
1a00394c:	2100      	movs	r1, #0
1a00394e:	300c      	adds	r0, #12
1a003950:	6066      	str	r6, [r4, #4]
1a003952:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003956:	6021      	str	r1, [r4, #0]
1a003958:	60a0      	str	r0, [r4, #8]
1a00395a:	f000 fa0b 	bl	1a003d74 <memset>
1a00395e:	4620      	mov	r0, r4
1a003960:	bd70      	pop	{r4, r5, r6, pc}
1a003962:	bf00      	nop

1a003964 <__sfp>:
1a003964:	4b20      	ldr	r3, [pc, #128]	; (1a0039e8 <__sfp+0x84>)
1a003966:	b570      	push	{r4, r5, r6, lr}
1a003968:	681d      	ldr	r5, [r3, #0]
1a00396a:	69ab      	ldr	r3, [r5, #24]
1a00396c:	4606      	mov	r6, r0
1a00396e:	b35b      	cbz	r3, 1a0039c8 <__sfp+0x64>
1a003970:	3548      	adds	r5, #72	; 0x48
1a003972:	686b      	ldr	r3, [r5, #4]
1a003974:	68ac      	ldr	r4, [r5, #8]
1a003976:	3b01      	subs	r3, #1
1a003978:	d505      	bpl.n	1a003986 <__sfp+0x22>
1a00397a:	e021      	b.n	1a0039c0 <__sfp+0x5c>
1a00397c:	3b01      	subs	r3, #1
1a00397e:	1c5a      	adds	r2, r3, #1
1a003980:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003984:	d01c      	beq.n	1a0039c0 <__sfp+0x5c>
1a003986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00398a:	2a00      	cmp	r2, #0
1a00398c:	d1f6      	bne.n	1a00397c <__sfp+0x18>
1a00398e:	2500      	movs	r5, #0
1a003990:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a003994:	2301      	movs	r3, #1
1a003996:	81e2      	strh	r2, [r4, #14]
1a003998:	81a3      	strh	r3, [r4, #12]
1a00399a:	6665      	str	r5, [r4, #100]	; 0x64
1a00399c:	6025      	str	r5, [r4, #0]
1a00399e:	60a5      	str	r5, [r4, #8]
1a0039a0:	6065      	str	r5, [r4, #4]
1a0039a2:	6125      	str	r5, [r4, #16]
1a0039a4:	6165      	str	r5, [r4, #20]
1a0039a6:	61a5      	str	r5, [r4, #24]
1a0039a8:	4629      	mov	r1, r5
1a0039aa:	2208      	movs	r2, #8
1a0039ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0039b0:	f000 f9e0 	bl	1a003d74 <memset>
1a0039b4:	6365      	str	r5, [r4, #52]	; 0x34
1a0039b6:	63a5      	str	r5, [r4, #56]	; 0x38
1a0039b8:	64a5      	str	r5, [r4, #72]	; 0x48
1a0039ba:	64e5      	str	r5, [r4, #76]	; 0x4c
1a0039bc:	4620      	mov	r0, r4
1a0039be:	bd70      	pop	{r4, r5, r6, pc}
1a0039c0:	6828      	ldr	r0, [r5, #0]
1a0039c2:	b128      	cbz	r0, 1a0039d0 <__sfp+0x6c>
1a0039c4:	4605      	mov	r5, r0
1a0039c6:	e7d4      	b.n	1a003972 <__sfp+0xe>
1a0039c8:	4628      	mov	r0, r5
1a0039ca:	f000 f80f 	bl	1a0039ec <__sinit.part.1>
1a0039ce:	e7cf      	b.n	1a003970 <__sfp+0xc>
1a0039d0:	2104      	movs	r1, #4
1a0039d2:	4630      	mov	r0, r6
1a0039d4:	f7ff ffae 	bl	1a003934 <__sfmoreglue>
1a0039d8:	6028      	str	r0, [r5, #0]
1a0039da:	2800      	cmp	r0, #0
1a0039dc:	d1f2      	bne.n	1a0039c4 <__sfp+0x60>
1a0039de:	230c      	movs	r3, #12
1a0039e0:	4604      	mov	r4, r0
1a0039e2:	6033      	str	r3, [r6, #0]
1a0039e4:	e7ea      	b.n	1a0039bc <__sfp+0x58>
1a0039e6:	bf00      	nop
1a0039e8:	1a00532c 	.word	0x1a00532c

1a0039ec <__sinit.part.1>:
1a0039ec:	4b3d      	ldr	r3, [pc, #244]	; (1a003ae4 <__sinit.part.1+0xf8>)
1a0039ee:	493e      	ldr	r1, [pc, #248]	; (1a003ae8 <__sinit.part.1+0xfc>)
1a0039f0:	681a      	ldr	r2, [r3, #0]
1a0039f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0039f6:	4290      	cmp	r0, r2
1a0039f8:	f04f 0300 	mov.w	r3, #0
1a0039fc:	6483      	str	r3, [r0, #72]	; 0x48
1a0039fe:	64c3      	str	r3, [r0, #76]	; 0x4c
1a003a00:	6503      	str	r3, [r0, #80]	; 0x50
1a003a02:	bf08      	it	eq
1a003a04:	2301      	moveq	r3, #1
1a003a06:	b083      	sub	sp, #12
1a003a08:	bf08      	it	eq
1a003a0a:	6183      	streq	r3, [r0, #24]
1a003a0c:	6281      	str	r1, [r0, #40]	; 0x28
1a003a0e:	4607      	mov	r7, r0
1a003a10:	f7ff ffa8 	bl	1a003964 <__sfp>
1a003a14:	6078      	str	r0, [r7, #4]
1a003a16:	4638      	mov	r0, r7
1a003a18:	f7ff ffa4 	bl	1a003964 <__sfp>
1a003a1c:	60b8      	str	r0, [r7, #8]
1a003a1e:	4638      	mov	r0, r7
1a003a20:	f7ff ffa0 	bl	1a003964 <__sfp>
1a003a24:	687d      	ldr	r5, [r7, #4]
1a003a26:	60f8      	str	r0, [r7, #12]
1a003a28:	2400      	movs	r4, #0
1a003a2a:	2304      	movs	r3, #4
1a003a2c:	81ab      	strh	r3, [r5, #12]
1a003a2e:	602c      	str	r4, [r5, #0]
1a003a30:	606c      	str	r4, [r5, #4]
1a003a32:	60ac      	str	r4, [r5, #8]
1a003a34:	666c      	str	r4, [r5, #100]	; 0x64
1a003a36:	81ec      	strh	r4, [r5, #14]
1a003a38:	612c      	str	r4, [r5, #16]
1a003a3a:	616c      	str	r4, [r5, #20]
1a003a3c:	61ac      	str	r4, [r5, #24]
1a003a3e:	4621      	mov	r1, r4
1a003a40:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a003a44:	2208      	movs	r2, #8
1a003a46:	f000 f995 	bl	1a003d74 <memset>
1a003a4a:	68be      	ldr	r6, [r7, #8]
1a003a4c:	f8df b09c 	ldr.w	fp, [pc, #156]	; 1a003aec <__sinit.part.1+0x100>
1a003a50:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a003af0 <__sinit.part.1+0x104>
1a003a54:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1a003af4 <__sinit.part.1+0x108>
1a003a58:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1a003af8 <__sinit.part.1+0x10c>
1a003a5c:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
1a003a60:	2301      	movs	r3, #1
1a003a62:	2209      	movs	r2, #9
1a003a64:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
1a003a68:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
1a003a6c:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
1a003a70:	622d      	str	r5, [r5, #32]
1a003a72:	4621      	mov	r1, r4
1a003a74:	81f3      	strh	r3, [r6, #14]
1a003a76:	81b2      	strh	r2, [r6, #12]
1a003a78:	6034      	str	r4, [r6, #0]
1a003a7a:	6074      	str	r4, [r6, #4]
1a003a7c:	60b4      	str	r4, [r6, #8]
1a003a7e:	6674      	str	r4, [r6, #100]	; 0x64
1a003a80:	6134      	str	r4, [r6, #16]
1a003a82:	6174      	str	r4, [r6, #20]
1a003a84:	61b4      	str	r4, [r6, #24]
1a003a86:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1a003a8a:	2208      	movs	r2, #8
1a003a8c:	9301      	str	r3, [sp, #4]
1a003a8e:	f000 f971 	bl	1a003d74 <memset>
1a003a92:	68fd      	ldr	r5, [r7, #12]
1a003a94:	6236      	str	r6, [r6, #32]
1a003a96:	2012      	movs	r0, #18
1a003a98:	2202      	movs	r2, #2
1a003a9a:	f8c6 b024 	str.w	fp, [r6, #36]	; 0x24
1a003a9e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
1a003aa2:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
1a003aa6:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
1a003aaa:	4621      	mov	r1, r4
1a003aac:	81a8      	strh	r0, [r5, #12]
1a003aae:	81ea      	strh	r2, [r5, #14]
1a003ab0:	602c      	str	r4, [r5, #0]
1a003ab2:	606c      	str	r4, [r5, #4]
1a003ab4:	60ac      	str	r4, [r5, #8]
1a003ab6:	666c      	str	r4, [r5, #100]	; 0x64
1a003ab8:	612c      	str	r4, [r5, #16]
1a003aba:	616c      	str	r4, [r5, #20]
1a003abc:	61ac      	str	r4, [r5, #24]
1a003abe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a003ac2:	2208      	movs	r2, #8
1a003ac4:	f000 f956 	bl	1a003d74 <memset>
1a003ac8:	9b01      	ldr	r3, [sp, #4]
1a003aca:	622d      	str	r5, [r5, #32]
1a003acc:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
1a003ad0:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
1a003ad4:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
1a003ad8:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
1a003adc:	61bb      	str	r3, [r7, #24]
1a003ade:	b003      	add	sp, #12
1a003ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003ae4:	1a00532c 	.word	0x1a00532c
1a003ae8:	1a003925 	.word	0x1a003925
1a003aec:	1a004779 	.word	0x1a004779
1a003af0:	1a0047a1 	.word	0x1a0047a1
1a003af4:	1a0047dd 	.word	0x1a0047dd
1a003af8:	1a0047fd 	.word	0x1a0047fd

1a003afc <_cleanup>:
1a003afc:	4b02      	ldr	r3, [pc, #8]	; (1a003b08 <_cleanup+0xc>)
1a003afe:	4903      	ldr	r1, [pc, #12]	; (1a003b0c <_cleanup+0x10>)
1a003b00:	6818      	ldr	r0, [r3, #0]
1a003b02:	f000 b84b 	b.w	1a003b9c <_fwalk_reent>
1a003b06:	bf00      	nop
1a003b08:	1a00532c 	.word	0x1a00532c
1a003b0c:	1a003899 	.word	0x1a003899

1a003b10 <__sinit>:
1a003b10:	6983      	ldr	r3, [r0, #24]
1a003b12:	b903      	cbnz	r3, 1a003b16 <__sinit+0x6>
1a003b14:	e76a      	b.n	1a0039ec <__sinit.part.1>
1a003b16:	4770      	bx	lr

1a003b18 <__sfp_lock_acquire>:
1a003b18:	4770      	bx	lr
1a003b1a:	bf00      	nop

1a003b1c <__sfp_lock_release>:
1a003b1c:	4770      	bx	lr
1a003b1e:	bf00      	nop

1a003b20 <__sinit_lock_acquire>:
1a003b20:	4770      	bx	lr
1a003b22:	bf00      	nop

1a003b24 <__sinit_lock_release>:
1a003b24:	4770      	bx	lr
1a003b26:	bf00      	nop

1a003b28 <__fp_lock_all>:
1a003b28:	4b02      	ldr	r3, [pc, #8]	; (1a003b34 <__fp_lock_all+0xc>)
1a003b2a:	4903      	ldr	r1, [pc, #12]	; (1a003b38 <__fp_lock_all+0x10>)
1a003b2c:	6818      	ldr	r0, [r3, #0]
1a003b2e:	f000 b80f 	b.w	1a003b50 <_fwalk>
1a003b32:	bf00      	nop
1a003b34:	10000040 	.word	0x10000040
1a003b38:	1a003931 	.word	0x1a003931

1a003b3c <__fp_unlock_all>:
1a003b3c:	4b02      	ldr	r3, [pc, #8]	; (1a003b48 <__fp_unlock_all+0xc>)
1a003b3e:	4903      	ldr	r1, [pc, #12]	; (1a003b4c <__fp_unlock_all+0x10>)
1a003b40:	6818      	ldr	r0, [r3, #0]
1a003b42:	f000 b805 	b.w	1a003b50 <_fwalk>
1a003b46:	bf00      	nop
1a003b48:	10000040 	.word	0x10000040
1a003b4c:	1a003921 	.word	0x1a003921

1a003b50 <_fwalk>:
1a003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003b54:	f110 0748 	adds.w	r7, r0, #72	; 0x48
1a003b58:	d01b      	beq.n	1a003b92 <_fwalk+0x42>
1a003b5a:	4688      	mov	r8, r1
1a003b5c:	2600      	movs	r6, #0
1a003b5e:	687d      	ldr	r5, [r7, #4]
1a003b60:	68bc      	ldr	r4, [r7, #8]
1a003b62:	3d01      	subs	r5, #1
1a003b64:	d40f      	bmi.n	1a003b86 <_fwalk+0x36>
1a003b66:	89a3      	ldrh	r3, [r4, #12]
1a003b68:	2b01      	cmp	r3, #1
1a003b6a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a003b6e:	d906      	bls.n	1a003b7e <_fwalk+0x2e>
1a003b70:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003b74:	3301      	adds	r3, #1
1a003b76:	4620      	mov	r0, r4
1a003b78:	d001      	beq.n	1a003b7e <_fwalk+0x2e>
1a003b7a:	47c0      	blx	r8
1a003b7c:	4306      	orrs	r6, r0
1a003b7e:	1c6b      	adds	r3, r5, #1
1a003b80:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003b84:	d1ef      	bne.n	1a003b66 <_fwalk+0x16>
1a003b86:	683f      	ldr	r7, [r7, #0]
1a003b88:	2f00      	cmp	r7, #0
1a003b8a:	d1e8      	bne.n	1a003b5e <_fwalk+0xe>
1a003b8c:	4630      	mov	r0, r6
1a003b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003b92:	463e      	mov	r6, r7
1a003b94:	4630      	mov	r0, r6
1a003b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003b9a:	bf00      	nop

1a003b9c <_fwalk_reent>:
1a003b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ba0:	f110 0748 	adds.w	r7, r0, #72	; 0x48
1a003ba4:	d01f      	beq.n	1a003be6 <_fwalk_reent+0x4a>
1a003ba6:	4688      	mov	r8, r1
1a003ba8:	4606      	mov	r6, r0
1a003baa:	f04f 0900 	mov.w	r9, #0
1a003bae:	687d      	ldr	r5, [r7, #4]
1a003bb0:	68bc      	ldr	r4, [r7, #8]
1a003bb2:	3d01      	subs	r5, #1
1a003bb4:	d411      	bmi.n	1a003bda <_fwalk_reent+0x3e>
1a003bb6:	89a3      	ldrh	r3, [r4, #12]
1a003bb8:	2b01      	cmp	r3, #1
1a003bba:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a003bbe:	d908      	bls.n	1a003bd2 <_fwalk_reent+0x36>
1a003bc0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003bc4:	3301      	adds	r3, #1
1a003bc6:	4621      	mov	r1, r4
1a003bc8:	4630      	mov	r0, r6
1a003bca:	d002      	beq.n	1a003bd2 <_fwalk_reent+0x36>
1a003bcc:	47c0      	blx	r8
1a003bce:	ea49 0900 	orr.w	r9, r9, r0
1a003bd2:	1c6b      	adds	r3, r5, #1
1a003bd4:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003bd8:	d1ed      	bne.n	1a003bb6 <_fwalk_reent+0x1a>
1a003bda:	683f      	ldr	r7, [r7, #0]
1a003bdc:	2f00      	cmp	r7, #0
1a003bde:	d1e6      	bne.n	1a003bae <_fwalk_reent+0x12>
1a003be0:	4648      	mov	r0, r9
1a003be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003be6:	46b9      	mov	r9, r7
1a003be8:	4648      	mov	r0, r9
1a003bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003bee:	bf00      	nop

1a003bf0 <__libc_init_array>:
1a003bf0:	b570      	push	{r4, r5, r6, lr}
1a003bf2:	4e0f      	ldr	r6, [pc, #60]	; (1a003c30 <__libc_init_array+0x40>)
1a003bf4:	4d0f      	ldr	r5, [pc, #60]	; (1a003c34 <__libc_init_array+0x44>)
1a003bf6:	1b76      	subs	r6, r6, r5
1a003bf8:	10b6      	asrs	r6, r6, #2
1a003bfa:	bf18      	it	ne
1a003bfc:	2400      	movne	r4, #0
1a003bfe:	d005      	beq.n	1a003c0c <__libc_init_array+0x1c>
1a003c00:	3401      	adds	r4, #1
1a003c02:	f855 3b04 	ldr.w	r3, [r5], #4
1a003c06:	4798      	blx	r3
1a003c08:	42a6      	cmp	r6, r4
1a003c0a:	d1f9      	bne.n	1a003c00 <__libc_init_array+0x10>
1a003c0c:	4e0a      	ldr	r6, [pc, #40]	; (1a003c38 <__libc_init_array+0x48>)
1a003c0e:	4d0b      	ldr	r5, [pc, #44]	; (1a003c3c <__libc_init_array+0x4c>)
1a003c10:	1b76      	subs	r6, r6, r5
1a003c12:	f7fc fc34 	bl	1a00047e <_init>
1a003c16:	10b6      	asrs	r6, r6, #2
1a003c18:	bf18      	it	ne
1a003c1a:	2400      	movne	r4, #0
1a003c1c:	d006      	beq.n	1a003c2c <__libc_init_array+0x3c>
1a003c1e:	3401      	adds	r4, #1
1a003c20:	f855 3b04 	ldr.w	r3, [r5], #4
1a003c24:	4798      	blx	r3
1a003c26:	42a6      	cmp	r6, r4
1a003c28:	d1f9      	bne.n	1a003c1e <__libc_init_array+0x2e>
1a003c2a:	bd70      	pop	{r4, r5, r6, pc}
1a003c2c:	bd70      	pop	{r4, r5, r6, pc}
1a003c2e:	bf00      	nop
1a003c30:	1a005370 	.word	0x1a005370
1a003c34:	1a005370 	.word	0x1a005370
1a003c38:	1a005374 	.word	0x1a005374
1a003c3c:	1a005370 	.word	0x1a005370

1a003c40 <memcpy>:
1a003c40:	4684      	mov	ip, r0
1a003c42:	ea41 0300 	orr.w	r3, r1, r0
1a003c46:	f013 0303 	ands.w	r3, r3, #3
1a003c4a:	d16d      	bne.n	1a003d28 <memcpy+0xe8>
1a003c4c:	3a40      	subs	r2, #64	; 0x40
1a003c4e:	d341      	bcc.n	1a003cd4 <memcpy+0x94>
1a003c50:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c54:	f840 3b04 	str.w	r3, [r0], #4
1a003c58:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c5c:	f840 3b04 	str.w	r3, [r0], #4
1a003c60:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c64:	f840 3b04 	str.w	r3, [r0], #4
1a003c68:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c6c:	f840 3b04 	str.w	r3, [r0], #4
1a003c70:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c74:	f840 3b04 	str.w	r3, [r0], #4
1a003c78:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c7c:	f840 3b04 	str.w	r3, [r0], #4
1a003c80:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c84:	f840 3b04 	str.w	r3, [r0], #4
1a003c88:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c8c:	f840 3b04 	str.w	r3, [r0], #4
1a003c90:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c94:	f840 3b04 	str.w	r3, [r0], #4
1a003c98:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c9c:	f840 3b04 	str.w	r3, [r0], #4
1a003ca0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ca4:	f840 3b04 	str.w	r3, [r0], #4
1a003ca8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003cac:	f840 3b04 	str.w	r3, [r0], #4
1a003cb0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003cb4:	f840 3b04 	str.w	r3, [r0], #4
1a003cb8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003cbc:	f840 3b04 	str.w	r3, [r0], #4
1a003cc0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003cc4:	f840 3b04 	str.w	r3, [r0], #4
1a003cc8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ccc:	f840 3b04 	str.w	r3, [r0], #4
1a003cd0:	3a40      	subs	r2, #64	; 0x40
1a003cd2:	d2bd      	bcs.n	1a003c50 <memcpy+0x10>
1a003cd4:	3230      	adds	r2, #48	; 0x30
1a003cd6:	d311      	bcc.n	1a003cfc <memcpy+0xbc>
1a003cd8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003cdc:	f840 3b04 	str.w	r3, [r0], #4
1a003ce0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ce4:	f840 3b04 	str.w	r3, [r0], #4
1a003ce8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003cec:	f840 3b04 	str.w	r3, [r0], #4
1a003cf0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003cf4:	f840 3b04 	str.w	r3, [r0], #4
1a003cf8:	3a10      	subs	r2, #16
1a003cfa:	d2ed      	bcs.n	1a003cd8 <memcpy+0x98>
1a003cfc:	320c      	adds	r2, #12
1a003cfe:	d305      	bcc.n	1a003d0c <memcpy+0xcc>
1a003d00:	f851 3b04 	ldr.w	r3, [r1], #4
1a003d04:	f840 3b04 	str.w	r3, [r0], #4
1a003d08:	3a04      	subs	r2, #4
1a003d0a:	d2f9      	bcs.n	1a003d00 <memcpy+0xc0>
1a003d0c:	3204      	adds	r2, #4
1a003d0e:	d008      	beq.n	1a003d22 <memcpy+0xe2>
1a003d10:	07d2      	lsls	r2, r2, #31
1a003d12:	bf1c      	itt	ne
1a003d14:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003d18:	f800 3b01 	strbne.w	r3, [r0], #1
1a003d1c:	d301      	bcc.n	1a003d22 <memcpy+0xe2>
1a003d1e:	880b      	ldrh	r3, [r1, #0]
1a003d20:	8003      	strh	r3, [r0, #0]
1a003d22:	4660      	mov	r0, ip
1a003d24:	4770      	bx	lr
1a003d26:	bf00      	nop
1a003d28:	2a08      	cmp	r2, #8
1a003d2a:	d313      	bcc.n	1a003d54 <memcpy+0x114>
1a003d2c:	078b      	lsls	r3, r1, #30
1a003d2e:	d08d      	beq.n	1a003c4c <memcpy+0xc>
1a003d30:	f010 0303 	ands.w	r3, r0, #3
1a003d34:	d08a      	beq.n	1a003c4c <memcpy+0xc>
1a003d36:	f1c3 0304 	rsb	r3, r3, #4
1a003d3a:	1ad2      	subs	r2, r2, r3
1a003d3c:	07db      	lsls	r3, r3, #31
1a003d3e:	bf1c      	itt	ne
1a003d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003d44:	f800 3b01 	strbne.w	r3, [r0], #1
1a003d48:	d380      	bcc.n	1a003c4c <memcpy+0xc>
1a003d4a:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003d4e:	f820 3b02 	strh.w	r3, [r0], #2
1a003d52:	e77b      	b.n	1a003c4c <memcpy+0xc>
1a003d54:	3a04      	subs	r2, #4
1a003d56:	d3d9      	bcc.n	1a003d0c <memcpy+0xcc>
1a003d58:	3a01      	subs	r2, #1
1a003d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003d5e:	f800 3b01 	strb.w	r3, [r0], #1
1a003d62:	d2f9      	bcs.n	1a003d58 <memcpy+0x118>
1a003d64:	780b      	ldrb	r3, [r1, #0]
1a003d66:	7003      	strb	r3, [r0, #0]
1a003d68:	784b      	ldrb	r3, [r1, #1]
1a003d6a:	7043      	strb	r3, [r0, #1]
1a003d6c:	788b      	ldrb	r3, [r1, #2]
1a003d6e:	7083      	strb	r3, [r0, #2]
1a003d70:	4660      	mov	r0, ip
1a003d72:	4770      	bx	lr

1a003d74 <memset>:
1a003d74:	b470      	push	{r4, r5, r6}
1a003d76:	0786      	lsls	r6, r0, #30
1a003d78:	d046      	beq.n	1a003e08 <memset+0x94>
1a003d7a:	1e54      	subs	r4, r2, #1
1a003d7c:	2a00      	cmp	r2, #0
1a003d7e:	d041      	beq.n	1a003e04 <memset+0x90>
1a003d80:	b2ca      	uxtb	r2, r1
1a003d82:	4603      	mov	r3, r0
1a003d84:	e002      	b.n	1a003d8c <memset+0x18>
1a003d86:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003d8a:	d33b      	bcc.n	1a003e04 <memset+0x90>
1a003d8c:	f803 2b01 	strb.w	r2, [r3], #1
1a003d90:	079d      	lsls	r5, r3, #30
1a003d92:	d1f8      	bne.n	1a003d86 <memset+0x12>
1a003d94:	2c03      	cmp	r4, #3
1a003d96:	d92e      	bls.n	1a003df6 <memset+0x82>
1a003d98:	b2cd      	uxtb	r5, r1
1a003d9a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003d9e:	2c0f      	cmp	r4, #15
1a003da0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003da4:	d919      	bls.n	1a003dda <memset+0x66>
1a003da6:	f103 0210 	add.w	r2, r3, #16
1a003daa:	4626      	mov	r6, r4
1a003dac:	3e10      	subs	r6, #16
1a003dae:	2e0f      	cmp	r6, #15
1a003db0:	f842 5c10 	str.w	r5, [r2, #-16]
1a003db4:	f842 5c0c 	str.w	r5, [r2, #-12]
1a003db8:	f842 5c08 	str.w	r5, [r2, #-8]
1a003dbc:	f842 5c04 	str.w	r5, [r2, #-4]
1a003dc0:	f102 0210 	add.w	r2, r2, #16
1a003dc4:	d8f2      	bhi.n	1a003dac <memset+0x38>
1a003dc6:	f1a4 0210 	sub.w	r2, r4, #16
1a003dca:	f022 020f 	bic.w	r2, r2, #15
1a003dce:	f004 040f 	and.w	r4, r4, #15
1a003dd2:	3210      	adds	r2, #16
1a003dd4:	2c03      	cmp	r4, #3
1a003dd6:	4413      	add	r3, r2
1a003dd8:	d90d      	bls.n	1a003df6 <memset+0x82>
1a003dda:	461e      	mov	r6, r3
1a003ddc:	4622      	mov	r2, r4
1a003dde:	3a04      	subs	r2, #4
1a003de0:	2a03      	cmp	r2, #3
1a003de2:	f846 5b04 	str.w	r5, [r6], #4
1a003de6:	d8fa      	bhi.n	1a003dde <memset+0x6a>
1a003de8:	1f22      	subs	r2, r4, #4
1a003dea:	f022 0203 	bic.w	r2, r2, #3
1a003dee:	3204      	adds	r2, #4
1a003df0:	4413      	add	r3, r2
1a003df2:	f004 0403 	and.w	r4, r4, #3
1a003df6:	b12c      	cbz	r4, 1a003e04 <memset+0x90>
1a003df8:	b2c9      	uxtb	r1, r1
1a003dfa:	441c      	add	r4, r3
1a003dfc:	f803 1b01 	strb.w	r1, [r3], #1
1a003e00:	429c      	cmp	r4, r3
1a003e02:	d1fb      	bne.n	1a003dfc <memset+0x88>
1a003e04:	bc70      	pop	{r4, r5, r6}
1a003e06:	4770      	bx	lr
1a003e08:	4614      	mov	r4, r2
1a003e0a:	4603      	mov	r3, r0
1a003e0c:	e7c2      	b.n	1a003d94 <memset+0x20>
1a003e0e:	bf00      	nop

1a003e10 <_free_r>:
1a003e10:	b191      	cbz	r1, 1a003e38 <_free_r+0x28>
1a003e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003e16:	3904      	subs	r1, #4
1a003e18:	2b00      	cmp	r3, #0
1a003e1a:	bfb8      	it	lt
1a003e1c:	18c9      	addlt	r1, r1, r3
1a003e1e:	4b1f      	ldr	r3, [pc, #124]	; (1a003e9c <_free_r+0x8c>)
1a003e20:	681a      	ldr	r2, [r3, #0]
1a003e22:	b1fa      	cbz	r2, 1a003e64 <_free_r+0x54>
1a003e24:	428a      	cmp	r2, r1
1a003e26:	b430      	push	{r4, r5}
1a003e28:	d90a      	bls.n	1a003e40 <_free_r+0x30>
1a003e2a:	6808      	ldr	r0, [r1, #0]
1a003e2c:	180c      	adds	r4, r1, r0
1a003e2e:	42a2      	cmp	r2, r4
1a003e30:	d026      	beq.n	1a003e80 <_free_r+0x70>
1a003e32:	604a      	str	r2, [r1, #4]
1a003e34:	6019      	str	r1, [r3, #0]
1a003e36:	bc30      	pop	{r4, r5}
1a003e38:	4770      	bx	lr
1a003e3a:	428b      	cmp	r3, r1
1a003e3c:	d803      	bhi.n	1a003e46 <_free_r+0x36>
1a003e3e:	461a      	mov	r2, r3
1a003e40:	6853      	ldr	r3, [r2, #4]
1a003e42:	2b00      	cmp	r3, #0
1a003e44:	d1f9      	bne.n	1a003e3a <_free_r+0x2a>
1a003e46:	6814      	ldr	r4, [r2, #0]
1a003e48:	1915      	adds	r5, r2, r4
1a003e4a:	428d      	cmp	r5, r1
1a003e4c:	d00d      	beq.n	1a003e6a <_free_r+0x5a>
1a003e4e:	d806      	bhi.n	1a003e5e <_free_r+0x4e>
1a003e50:	6808      	ldr	r0, [r1, #0]
1a003e52:	180c      	adds	r4, r1, r0
1a003e54:	429c      	cmp	r4, r3
1a003e56:	d019      	beq.n	1a003e8c <_free_r+0x7c>
1a003e58:	604b      	str	r3, [r1, #4]
1a003e5a:	6051      	str	r1, [r2, #4]
1a003e5c:	e7eb      	b.n	1a003e36 <_free_r+0x26>
1a003e5e:	230c      	movs	r3, #12
1a003e60:	6003      	str	r3, [r0, #0]
1a003e62:	e7e8      	b.n	1a003e36 <_free_r+0x26>
1a003e64:	604a      	str	r2, [r1, #4]
1a003e66:	6019      	str	r1, [r3, #0]
1a003e68:	4770      	bx	lr
1a003e6a:	6809      	ldr	r1, [r1, #0]
1a003e6c:	440c      	add	r4, r1
1a003e6e:	1911      	adds	r1, r2, r4
1a003e70:	4299      	cmp	r1, r3
1a003e72:	6014      	str	r4, [r2, #0]
1a003e74:	d1df      	bne.n	1a003e36 <_free_r+0x26>
1a003e76:	cb0a      	ldmia	r3, {r1, r3}
1a003e78:	440c      	add	r4, r1
1a003e7a:	6053      	str	r3, [r2, #4]
1a003e7c:	6014      	str	r4, [r2, #0]
1a003e7e:	e7da      	b.n	1a003e36 <_free_r+0x26>
1a003e80:	6814      	ldr	r4, [r2, #0]
1a003e82:	6852      	ldr	r2, [r2, #4]
1a003e84:	604a      	str	r2, [r1, #4]
1a003e86:	4420      	add	r0, r4
1a003e88:	6008      	str	r0, [r1, #0]
1a003e8a:	e7d3      	b.n	1a003e34 <_free_r+0x24>
1a003e8c:	681c      	ldr	r4, [r3, #0]
1a003e8e:	685b      	ldr	r3, [r3, #4]
1a003e90:	604b      	str	r3, [r1, #4]
1a003e92:	4420      	add	r0, r4
1a003e94:	6008      	str	r0, [r1, #0]
1a003e96:	6051      	str	r1, [r2, #4]
1a003e98:	e7cd      	b.n	1a003e36 <_free_r+0x26>
1a003e9a:	bf00      	nop
1a003e9c:	10002bc0 	.word	0x10002bc0

1a003ea0 <_malloc_r>:
1a003ea0:	b570      	push	{r4, r5, r6, lr}
1a003ea2:	1ccc      	adds	r4, r1, #3
1a003ea4:	f024 0403 	bic.w	r4, r4, #3
1a003ea8:	3408      	adds	r4, #8
1a003eaa:	2c0c      	cmp	r4, #12
1a003eac:	bf38      	it	cc
1a003eae:	240c      	movcc	r4, #12
1a003eb0:	2c00      	cmp	r4, #0
1a003eb2:	4606      	mov	r6, r0
1a003eb4:	db3b      	blt.n	1a003f2e <_malloc_r+0x8e>
1a003eb6:	42a1      	cmp	r1, r4
1a003eb8:	d839      	bhi.n	1a003f2e <_malloc_r+0x8e>
1a003eba:	4d27      	ldr	r5, [pc, #156]	; (1a003f58 <_malloc_r+0xb8>)
1a003ebc:	6829      	ldr	r1, [r5, #0]
1a003ebe:	b151      	cbz	r1, 1a003ed6 <_malloc_r+0x36>
1a003ec0:	680a      	ldr	r2, [r1, #0]
1a003ec2:	1b12      	subs	r2, r2, r4
1a003ec4:	d404      	bmi.n	1a003ed0 <_malloc_r+0x30>
1a003ec6:	e036      	b.n	1a003f36 <_malloc_r+0x96>
1a003ec8:	681a      	ldr	r2, [r3, #0]
1a003eca:	1b12      	subs	r2, r2, r4
1a003ecc:	d51a      	bpl.n	1a003f04 <_malloc_r+0x64>
1a003ece:	4619      	mov	r1, r3
1a003ed0:	684b      	ldr	r3, [r1, #4]
1a003ed2:	2b00      	cmp	r3, #0
1a003ed4:	d1f8      	bne.n	1a003ec8 <_malloc_r+0x28>
1a003ed6:	6869      	ldr	r1, [r5, #4]
1a003ed8:	2900      	cmp	r1, #0
1a003eda:	d037      	beq.n	1a003f4c <_malloc_r+0xac>
1a003edc:	4621      	mov	r1, r4
1a003ede:	4630      	mov	r0, r6
1a003ee0:	f7fc fb22 	bl	1a000528 <_sbrk_r>
1a003ee4:	1c43      	adds	r3, r0, #1
1a003ee6:	d022      	beq.n	1a003f2e <_malloc_r+0x8e>
1a003ee8:	1cc3      	adds	r3, r0, #3
1a003eea:	f023 0503 	bic.w	r5, r3, #3
1a003eee:	42a8      	cmp	r0, r5
1a003ef0:	d005      	beq.n	1a003efe <_malloc_r+0x5e>
1a003ef2:	1a29      	subs	r1, r5, r0
1a003ef4:	4630      	mov	r0, r6
1a003ef6:	f7fc fb17 	bl	1a000528 <_sbrk_r>
1a003efa:	3001      	adds	r0, #1
1a003efc:	d017      	beq.n	1a003f2e <_malloc_r+0x8e>
1a003efe:	602c      	str	r4, [r5, #0]
1a003f00:	462b      	mov	r3, r5
1a003f02:	e004      	b.n	1a003f0e <_malloc_r+0x6e>
1a003f04:	2a0b      	cmp	r2, #11
1a003f06:	d90d      	bls.n	1a003f24 <_malloc_r+0x84>
1a003f08:	601a      	str	r2, [r3, #0]
1a003f0a:	4413      	add	r3, r2
1a003f0c:	601c      	str	r4, [r3, #0]
1a003f0e:	f103 000b 	add.w	r0, r3, #11
1a003f12:	f020 0007 	bic.w	r0, r0, #7
1a003f16:	1d1a      	adds	r2, r3, #4
1a003f18:	1a82      	subs	r2, r0, r2
1a003f1a:	d002      	beq.n	1a003f22 <_malloc_r+0x82>
1a003f1c:	4251      	negs	r1, r2
1a003f1e:	5099      	str	r1, [r3, r2]
1a003f20:	bd70      	pop	{r4, r5, r6, pc}
1a003f22:	bd70      	pop	{r4, r5, r6, pc}
1a003f24:	428b      	cmp	r3, r1
1a003f26:	d00e      	beq.n	1a003f46 <_malloc_r+0xa6>
1a003f28:	685a      	ldr	r2, [r3, #4]
1a003f2a:	604a      	str	r2, [r1, #4]
1a003f2c:	e7ef      	b.n	1a003f0e <_malloc_r+0x6e>
1a003f2e:	230c      	movs	r3, #12
1a003f30:	6033      	str	r3, [r6, #0]
1a003f32:	2000      	movs	r0, #0
1a003f34:	bd70      	pop	{r4, r5, r6, pc}
1a003f36:	2a0b      	cmp	r2, #11
1a003f38:	d803      	bhi.n	1a003f42 <_malloc_r+0xa2>
1a003f3a:	684a      	ldr	r2, [r1, #4]
1a003f3c:	460b      	mov	r3, r1
1a003f3e:	602a      	str	r2, [r5, #0]
1a003f40:	e7e5      	b.n	1a003f0e <_malloc_r+0x6e>
1a003f42:	460b      	mov	r3, r1
1a003f44:	e7e0      	b.n	1a003f08 <_malloc_r+0x68>
1a003f46:	460a      	mov	r2, r1
1a003f48:	460b      	mov	r3, r1
1a003f4a:	e7f8      	b.n	1a003f3e <_malloc_r+0x9e>
1a003f4c:	4630      	mov	r0, r6
1a003f4e:	f7fc faeb 	bl	1a000528 <_sbrk_r>
1a003f52:	6068      	str	r0, [r5, #4]
1a003f54:	e7c2      	b.n	1a003edc <_malloc_r+0x3c>
1a003f56:	bf00      	nop
1a003f58:	10002bc0 	.word	0x10002bc0

1a003f5c <__sfputc_r>:
1a003f5c:	6893      	ldr	r3, [r2, #8]
1a003f5e:	3b01      	subs	r3, #1
1a003f60:	2b00      	cmp	r3, #0
1a003f62:	b410      	push	{r4}
1a003f64:	6093      	str	r3, [r2, #8]
1a003f66:	db08      	blt.n	1a003f7a <__sfputc_r+0x1e>
1a003f68:	b2cc      	uxtb	r4, r1
1a003f6a:	6813      	ldr	r3, [r2, #0]
1a003f6c:	1c58      	adds	r0, r3, #1
1a003f6e:	6010      	str	r0, [r2, #0]
1a003f70:	7019      	strb	r1, [r3, #0]
1a003f72:	4620      	mov	r0, r4
1a003f74:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003f78:	4770      	bx	lr
1a003f7a:	6994      	ldr	r4, [r2, #24]
1a003f7c:	42a3      	cmp	r3, r4
1a003f7e:	db02      	blt.n	1a003f86 <__sfputc_r+0x2a>
1a003f80:	b2cc      	uxtb	r4, r1
1a003f82:	2c0a      	cmp	r4, #10
1a003f84:	d1f1      	bne.n	1a003f6a <__sfputc_r+0xe>
1a003f86:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003f8a:	f000 bc3b 	b.w	1a004804 <__swbuf_r>
1a003f8e:	bf00      	nop

1a003f90 <__sfputs_r>:
1a003f90:	b193      	cbz	r3, 1a003fb8 <__sfputs_r+0x28>
1a003f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003f94:	4614      	mov	r4, r2
1a003f96:	460f      	mov	r7, r1
1a003f98:	4606      	mov	r6, r0
1a003f9a:	18d5      	adds	r5, r2, r3
1a003f9c:	e001      	b.n	1a003fa2 <__sfputs_r+0x12>
1a003f9e:	42ac      	cmp	r4, r5
1a003fa0:	d008      	beq.n	1a003fb4 <__sfputs_r+0x24>
1a003fa2:	463a      	mov	r2, r7
1a003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003fa8:	4630      	mov	r0, r6
1a003faa:	f7ff ffd7 	bl	1a003f5c <__sfputc_r>
1a003fae:	1c43      	adds	r3, r0, #1
1a003fb0:	d1f5      	bne.n	1a003f9e <__sfputs_r+0xe>
1a003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003fb4:	2000      	movs	r0, #0
1a003fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003fb8:	2000      	movs	r0, #0
1a003fba:	4770      	bx	lr

1a003fbc <__sprint_r>:
1a003fbc:	6893      	ldr	r3, [r2, #8]
1a003fbe:	b510      	push	{r4, lr}
1a003fc0:	4614      	mov	r4, r2
1a003fc2:	b913      	cbnz	r3, 1a003fca <__sprint_r+0xe>
1a003fc4:	6053      	str	r3, [r2, #4]
1a003fc6:	4618      	mov	r0, r3
1a003fc8:	bd10      	pop	{r4, pc}
1a003fca:	f000 fcf7 	bl	1a0049bc <__sfvwrite_r>
1a003fce:	2300      	movs	r3, #0
1a003fd0:	60a3      	str	r3, [r4, #8]
1a003fd2:	6063      	str	r3, [r4, #4]
1a003fd4:	bd10      	pop	{r4, pc}
1a003fd6:	bf00      	nop

1a003fd8 <_vfiprintf_r>:
1a003fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003fdc:	b09d      	sub	sp, #116	; 0x74
1a003fde:	4689      	mov	r9, r1
1a003fe0:	4614      	mov	r4, r2
1a003fe2:	9303      	str	r3, [sp, #12]
1a003fe4:	4682      	mov	sl, r0
1a003fe6:	b118      	cbz	r0, 1a003ff0 <_vfiprintf_r+0x18>
1a003fe8:	6983      	ldr	r3, [r0, #24]
1a003fea:	2b00      	cmp	r3, #0
1a003fec:	f000 810a 	beq.w	1a004204 <_vfiprintf_r+0x22c>
1a003ff0:	4b8a      	ldr	r3, [pc, #552]	; (1a00421c <_vfiprintf_r+0x244>)
1a003ff2:	4599      	cmp	r9, r3
1a003ff4:	f000 810c 	beq.w	1a004210 <_vfiprintf_r+0x238>
1a003ff8:	4b89      	ldr	r3, [pc, #548]	; (1a004220 <_vfiprintf_r+0x248>)
1a003ffa:	4599      	cmp	r9, r3
1a003ffc:	f000 810b 	beq.w	1a004216 <_vfiprintf_r+0x23e>
1a004000:	4b88      	ldr	r3, [pc, #544]	; (1a004224 <_vfiprintf_r+0x24c>)
1a004002:	4599      	cmp	r9, r3
1a004004:	bf08      	it	eq
1a004006:	f8da 900c 	ldreq.w	r9, [sl, #12]
1a00400a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00400e:	0718      	lsls	r0, r3, #28
1a004010:	f140 80ee 	bpl.w	1a0041f0 <_vfiprintf_r+0x218>
1a004014:	f8d9 3010 	ldr.w	r3, [r9, #16]
1a004018:	2b00      	cmp	r3, #0
1a00401a:	f000 80e9 	beq.w	1a0041f0 <_vfiprintf_r+0x218>
1a00401e:	2330      	movs	r3, #48	; 0x30
1a004020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004024:	7823      	ldrb	r3, [r4, #0]
1a004026:	4e80      	ldr	r6, [pc, #512]	; (1a004228 <_vfiprintf_r+0x250>)
1a004028:	2100      	movs	r1, #0
1a00402a:	2220      	movs	r2, #32
1a00402c:	9109      	str	r1, [sp, #36]	; 0x24
1a00402e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
1a004032:	2701      	movs	r7, #1
1a004034:	2b00      	cmp	r3, #0
1a004036:	f000 8084 	beq.w	1a004142 <_vfiprintf_r+0x16a>
1a00403a:	2b25      	cmp	r3, #37	; 0x25
1a00403c:	4625      	mov	r5, r4
1a00403e:	d103      	bne.n	1a004048 <_vfiprintf_r+0x70>
1a004040:	e017      	b.n	1a004072 <_vfiprintf_r+0x9a>
1a004042:	2b25      	cmp	r3, #37	; 0x25
1a004044:	f000 8085 	beq.w	1a004152 <_vfiprintf_r+0x17a>
1a004048:	f815 3f01 	ldrb.w	r3, [r5, #1]!
1a00404c:	2b00      	cmp	r3, #0
1a00404e:	d1f8      	bne.n	1a004042 <_vfiprintf_r+0x6a>
1a004050:	ebb5 0b04 	subs.w	fp, r5, r4
1a004054:	d075      	beq.n	1a004142 <_vfiprintf_r+0x16a>
1a004056:	4622      	mov	r2, r4
1a004058:	465b      	mov	r3, fp
1a00405a:	4649      	mov	r1, r9
1a00405c:	4650      	mov	r0, sl
1a00405e:	f7ff ff97 	bl	1a003f90 <__sfputs_r>
1a004062:	3001      	adds	r0, #1
1a004064:	d06d      	beq.n	1a004142 <_vfiprintf_r+0x16a>
1a004066:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004068:	782a      	ldrb	r2, [r5, #0]
1a00406a:	445b      	add	r3, fp
1a00406c:	9309      	str	r3, [sp, #36]	; 0x24
1a00406e:	2a00      	cmp	r2, #0
1a004070:	d067      	beq.n	1a004142 <_vfiprintf_r+0x16a>
1a004072:	2300      	movs	r3, #0
1a004074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004078:	3501      	adds	r5, #1
1a00407a:	9304      	str	r3, [sp, #16]
1a00407c:	9307      	str	r3, [sp, #28]
1a00407e:	9306      	str	r3, [sp, #24]
1a004080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004084:	931a      	str	r3, [sp, #104]	; 0x68
1a004086:	9205      	str	r2, [sp, #20]
1a004088:	e004      	b.n	1a004094 <_vfiprintf_r+0xbc>
1a00408a:	9a04      	ldr	r2, [sp, #16]
1a00408c:	fa07 f303 	lsl.w	r3, r7, r3
1a004090:	4313      	orrs	r3, r2
1a004092:	9304      	str	r3, [sp, #16]
1a004094:	7829      	ldrb	r1, [r5, #0]
1a004096:	2205      	movs	r2, #5
1a004098:	4630      	mov	r0, r6
1a00409a:	f000 fe79 	bl	1a004d90 <memchr>
1a00409e:	462c      	mov	r4, r5
1a0040a0:	1b83      	subs	r3, r0, r6
1a0040a2:	3501      	adds	r5, #1
1a0040a4:	2800      	cmp	r0, #0
1a0040a6:	d1f0      	bne.n	1a00408a <_vfiprintf_r+0xb2>
1a0040a8:	9b04      	ldr	r3, [sp, #16]
1a0040aa:	06d9      	lsls	r1, r3, #27
1a0040ac:	bf44      	itt	mi
1a0040ae:	2220      	movmi	r2, #32
1a0040b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0040b4:	7821      	ldrb	r1, [r4, #0]
1a0040b6:	071a      	lsls	r2, r3, #28
1a0040b8:	bf44      	itt	mi
1a0040ba:	222b      	movmi	r2, #43	; 0x2b
1a0040bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0040c0:	292a      	cmp	r1, #42	; 0x2a
1a0040c2:	d069      	beq.n	1a004198 <_vfiprintf_r+0x1c0>
1a0040c4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a0040c8:	2a09      	cmp	r2, #9
1a0040ca:	d80b      	bhi.n	1a0040e4 <_vfiprintf_r+0x10c>
1a0040cc:	9b07      	ldr	r3, [sp, #28]
1a0040ce:	f814 1f01 	ldrb.w	r1, [r4, #1]!
1a0040d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0040d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a0040da:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a0040de:	2a09      	cmp	r2, #9
1a0040e0:	d9f5      	bls.n	1a0040ce <_vfiprintf_r+0xf6>
1a0040e2:	9307      	str	r3, [sp, #28]
1a0040e4:	292e      	cmp	r1, #46	; 0x2e
1a0040e6:	d03f      	beq.n	1a004168 <_vfiprintf_r+0x190>
1a0040e8:	4d50      	ldr	r5, [pc, #320]	; (1a00422c <_vfiprintf_r+0x254>)
1a0040ea:	2203      	movs	r2, #3
1a0040ec:	4628      	mov	r0, r5
1a0040ee:	f000 fe4f 	bl	1a004d90 <memchr>
1a0040f2:	b138      	cbz	r0, 1a004104 <_vfiprintf_r+0x12c>
1a0040f4:	9b04      	ldr	r3, [sp, #16]
1a0040f6:	1b40      	subs	r0, r0, r5
1a0040f8:	2240      	movs	r2, #64	; 0x40
1a0040fa:	fa02 f000 	lsl.w	r0, r2, r0
1a0040fe:	4303      	orrs	r3, r0
1a004100:	3401      	adds	r4, #1
1a004102:	9304      	str	r3, [sp, #16]
1a004104:	7821      	ldrb	r1, [r4, #0]
1a004106:	484a      	ldr	r0, [pc, #296]	; (1a004230 <_vfiprintf_r+0x258>)
1a004108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00410c:	2206      	movs	r2, #6
1a00410e:	3401      	adds	r4, #1
1a004110:	f000 fe3e 	bl	1a004d90 <memchr>
1a004114:	2800      	cmp	r0, #0
1a004116:	d049      	beq.n	1a0041ac <_vfiprintf_r+0x1d4>
1a004118:	4b46      	ldr	r3, [pc, #280]	; (1a004234 <_vfiprintf_r+0x25c>)
1a00411a:	b1f3      	cbz	r3, 1a00415a <_vfiprintf_r+0x182>
1a00411c:	ab03      	add	r3, sp, #12
1a00411e:	9300      	str	r3, [sp, #0]
1a004120:	464a      	mov	r2, r9
1a004122:	4b45      	ldr	r3, [pc, #276]	; (1a004238 <_vfiprintf_r+0x260>)
1a004124:	a904      	add	r1, sp, #16
1a004126:	4650      	mov	r0, sl
1a004128:	f3af 8000 	nop.w
1a00412c:	4680      	mov	r8, r0
1a00412e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
1a004132:	d006      	beq.n	1a004142 <_vfiprintf_r+0x16a>
1a004134:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004136:	4443      	add	r3, r8
1a004138:	9309      	str	r3, [sp, #36]	; 0x24
1a00413a:	7823      	ldrb	r3, [r4, #0]
1a00413c:	2b00      	cmp	r3, #0
1a00413e:	f47f af7c 	bne.w	1a00403a <_vfiprintf_r+0x62>
1a004142:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004146:	065b      	lsls	r3, r3, #25
1a004148:	d459      	bmi.n	1a0041fe <_vfiprintf_r+0x226>
1a00414a:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00414c:	b01d      	add	sp, #116	; 0x74
1a00414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004152:	ebb5 0b04 	subs.w	fp, r5, r4
1a004156:	d08c      	beq.n	1a004072 <_vfiprintf_r+0x9a>
1a004158:	e77d      	b.n	1a004056 <_vfiprintf_r+0x7e>
1a00415a:	9b03      	ldr	r3, [sp, #12]
1a00415c:	3307      	adds	r3, #7
1a00415e:	f023 0307 	bic.w	r3, r3, #7
1a004162:	3308      	adds	r3, #8
1a004164:	9303      	str	r3, [sp, #12]
1a004166:	e7e5      	b.n	1a004134 <_vfiprintf_r+0x15c>
1a004168:	7861      	ldrb	r1, [r4, #1]
1a00416a:	292a      	cmp	r1, #42	; 0x2a
1a00416c:	f104 0001 	add.w	r0, r4, #1
1a004170:	d026      	beq.n	1a0041c0 <_vfiprintf_r+0x1e8>
1a004172:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a004176:	2300      	movs	r3, #0
1a004178:	2a09      	cmp	r2, #9
1a00417a:	9305      	str	r3, [sp, #20]
1a00417c:	4604      	mov	r4, r0
1a00417e:	d8b3      	bhi.n	1a0040e8 <_vfiprintf_r+0x110>
1a004180:	f814 1f01 	ldrb.w	r1, [r4, #1]!
1a004184:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004188:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a00418c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a004190:	2a09      	cmp	r2, #9
1a004192:	d9f5      	bls.n	1a004180 <_vfiprintf_r+0x1a8>
1a004194:	9305      	str	r3, [sp, #20]
1a004196:	e7a7      	b.n	1a0040e8 <_vfiprintf_r+0x110>
1a004198:	9a03      	ldr	r2, [sp, #12]
1a00419a:	6811      	ldr	r1, [r2, #0]
1a00419c:	3204      	adds	r2, #4
1a00419e:	2900      	cmp	r1, #0
1a0041a0:	9203      	str	r2, [sp, #12]
1a0041a2:	db1f      	blt.n	1a0041e4 <_vfiprintf_r+0x20c>
1a0041a4:	9107      	str	r1, [sp, #28]
1a0041a6:	7861      	ldrb	r1, [r4, #1]
1a0041a8:	3401      	adds	r4, #1
1a0041aa:	e79b      	b.n	1a0040e4 <_vfiprintf_r+0x10c>
1a0041ac:	ab03      	add	r3, sp, #12
1a0041ae:	9300      	str	r3, [sp, #0]
1a0041b0:	464a      	mov	r2, r9
1a0041b2:	4b21      	ldr	r3, [pc, #132]	; (1a004238 <_vfiprintf_r+0x260>)
1a0041b4:	a904      	add	r1, sp, #16
1a0041b6:	4650      	mov	r0, sl
1a0041b8:	f000 f8e6 	bl	1a004388 <_printf_i>
1a0041bc:	4680      	mov	r8, r0
1a0041be:	e7b6      	b.n	1a00412e <_vfiprintf_r+0x156>
1a0041c0:	9b03      	ldr	r3, [sp, #12]
1a0041c2:	681a      	ldr	r2, [r3, #0]
1a0041c4:	9205      	str	r2, [sp, #20]
1a0041c6:	2a00      	cmp	r2, #0
1a0041c8:	f103 0304 	add.w	r3, r3, #4
1a0041cc:	9303      	str	r3, [sp, #12]
1a0041ce:	bfb8      	it	lt
1a0041d0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
1a0041d4:	f104 0302 	add.w	r3, r4, #2
1a0041d8:	bfae      	itee	ge
1a0041da:	78a1      	ldrbge	r1, [r4, #2]
1a0041dc:	78a1      	ldrblt	r1, [r4, #2]
1a0041de:	9205      	strlt	r2, [sp, #20]
1a0041e0:	461c      	mov	r4, r3
1a0041e2:	e781      	b.n	1a0040e8 <_vfiprintf_r+0x110>
1a0041e4:	4249      	negs	r1, r1
1a0041e6:	f043 0302 	orr.w	r3, r3, #2
1a0041ea:	9107      	str	r1, [sp, #28]
1a0041ec:	9304      	str	r3, [sp, #16]
1a0041ee:	e7da      	b.n	1a0041a6 <_vfiprintf_r+0x1ce>
1a0041f0:	4649      	mov	r1, r9
1a0041f2:	4650      	mov	r0, sl
1a0041f4:	f000 fb68 	bl	1a0048c8 <__swsetup_r>
1a0041f8:	2800      	cmp	r0, #0
1a0041fa:	f43f af10 	beq.w	1a00401e <_vfiprintf_r+0x46>
1a0041fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004202:	e7a3      	b.n	1a00414c <_vfiprintf_r+0x174>
1a004204:	f7ff fc84 	bl	1a003b10 <__sinit>
1a004208:	4b04      	ldr	r3, [pc, #16]	; (1a00421c <_vfiprintf_r+0x244>)
1a00420a:	4599      	cmp	r9, r3
1a00420c:	f47f aef4 	bne.w	1a003ff8 <_vfiprintf_r+0x20>
1a004210:	f8da 9004 	ldr.w	r9, [sl, #4]
1a004214:	e6f9      	b.n	1a00400a <_vfiprintf_r+0x32>
1a004216:	f8da 9008 	ldr.w	r9, [sl, #8]
1a00421a:	e6f6      	b.n	1a00400a <_vfiprintf_r+0x32>
1a00421c:	1a00530c 	.word	0x1a00530c
1a004220:	1a0052ec 	.word	0x1a0052ec
1a004224:	1a0052cc 	.word	0x1a0052cc
1a004228:	1a005334 	.word	0x1a005334
1a00422c:	1a00533c 	.word	0x1a00533c
1a004230:	1a005340 	.word	0x1a005340
1a004234:	00000000 	.word	0x00000000
1a004238:	1a003f91 	.word	0x1a003f91

1a00423c <vfiprintf>:
1a00423c:	b410      	push	{r4}
1a00423e:	4c04      	ldr	r4, [pc, #16]	; (1a004250 <vfiprintf+0x14>)
1a004240:	4613      	mov	r3, r2
1a004242:	460a      	mov	r2, r1
1a004244:	4601      	mov	r1, r0
1a004246:	6820      	ldr	r0, [r4, #0]
1a004248:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00424c:	f7ff bec4 	b.w	1a003fd8 <_vfiprintf_r>
1a004250:	10000040 	.word	0x10000040

1a004254 <_printf_common>:
1a004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004258:	460c      	mov	r4, r1
1a00425a:	4691      	mov	r9, r2
1a00425c:	690a      	ldr	r2, [r1, #16]
1a00425e:	6889      	ldr	r1, [r1, #8]
1a004260:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004264:	428a      	cmp	r2, r1
1a004266:	bfb8      	it	lt
1a004268:	460a      	movlt	r2, r1
1a00426a:	f8c9 2000 	str.w	r2, [r9]
1a00426e:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
1a004272:	4606      	mov	r6, r0
1a004274:	461f      	mov	r7, r3
1a004276:	b111      	cbz	r1, 1a00427e <_printf_common+0x2a>
1a004278:	3201      	adds	r2, #1
1a00427a:	f8c9 2000 	str.w	r2, [r9]
1a00427e:	6823      	ldr	r3, [r4, #0]
1a004280:	0699      	lsls	r1, r3, #26
1a004282:	d55d      	bpl.n	1a004340 <_printf_common+0xec>
1a004284:	f8d9 2000 	ldr.w	r2, [r9]
1a004288:	3202      	adds	r2, #2
1a00428a:	f8c9 2000 	str.w	r2, [r9]
1a00428e:	6823      	ldr	r3, [r4, #0]
1a004290:	f013 0f06 	tst.w	r3, #6
1a004294:	4619      	mov	r1, r3
1a004296:	d11d      	bne.n	1a0042d4 <_printf_common+0x80>
1a004298:	68e1      	ldr	r1, [r4, #12]
1a00429a:	1a8a      	subs	r2, r1, r2
1a00429c:	2a00      	cmp	r2, #0
1a00429e:	bfd8      	it	le
1a0042a0:	4619      	movle	r1, r3
1a0042a2:	dd17      	ble.n	1a0042d4 <_printf_common+0x80>
1a0042a4:	f104 0a19 	add.w	sl, r4, #25
1a0042a8:	2500      	movs	r5, #0
1a0042aa:	e005      	b.n	1a0042b8 <_printf_common+0x64>
1a0042ac:	68e3      	ldr	r3, [r4, #12]
1a0042ae:	f8d9 2000 	ldr.w	r2, [r9]
1a0042b2:	1a9b      	subs	r3, r3, r2
1a0042b4:	42ab      	cmp	r3, r5
1a0042b6:	dd0c      	ble.n	1a0042d2 <_printf_common+0x7e>
1a0042b8:	2301      	movs	r3, #1
1a0042ba:	4652      	mov	r2, sl
1a0042bc:	4639      	mov	r1, r7
1a0042be:	4630      	mov	r0, r6
1a0042c0:	47c0      	blx	r8
1a0042c2:	3001      	adds	r0, #1
1a0042c4:	f105 0501 	add.w	r5, r5, #1
1a0042c8:	d1f0      	bne.n	1a0042ac <_printf_common+0x58>
1a0042ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0042ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0042d2:	6821      	ldr	r1, [r4, #0]
1a0042d4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0042d8:	3300      	adds	r3, #0
1a0042da:	bf18      	it	ne
1a0042dc:	2301      	movne	r3, #1
1a0042de:	068a      	lsls	r2, r1, #26
1a0042e0:	d50a      	bpl.n	1a0042f8 <_printf_common+0xa4>
1a0042e2:	18e1      	adds	r1, r4, r3
1a0042e4:	1c5a      	adds	r2, r3, #1
1a0042e6:	2030      	movs	r0, #48	; 0x30
1a0042e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0042ec:	4422      	add	r2, r4
1a0042ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0042f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0042f6:	3302      	adds	r3, #2
1a0042f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0042fc:	4639      	mov	r1, r7
1a0042fe:	4630      	mov	r0, r6
1a004300:	47c0      	blx	r8
1a004302:	3001      	adds	r0, #1
1a004304:	d0e1      	beq.n	1a0042ca <_printf_common+0x76>
1a004306:	6823      	ldr	r3, [r4, #0]
1a004308:	f003 0306 	and.w	r3, r3, #6
1a00430c:	2b04      	cmp	r3, #4
1a00430e:	d029      	beq.n	1a004364 <_printf_common+0x110>
1a004310:	68a3      	ldr	r3, [r4, #8]
1a004312:	6922      	ldr	r2, [r4, #16]
1a004314:	4293      	cmp	r3, r2
1a004316:	bfc8      	it	gt
1a004318:	f04f 0900 	movgt.w	r9, #0
1a00431c:	dd30      	ble.n	1a004380 <_printf_common+0x12c>
1a00431e:	1a9b      	subs	r3, r3, r2
1a004320:	4499      	add	r9, r3
1a004322:	341a      	adds	r4, #26
1a004324:	2500      	movs	r5, #0
1a004326:	e001      	b.n	1a00432c <_printf_common+0xd8>
1a004328:	454d      	cmp	r5, r9
1a00432a:	d029      	beq.n	1a004380 <_printf_common+0x12c>
1a00432c:	2301      	movs	r3, #1
1a00432e:	4622      	mov	r2, r4
1a004330:	4639      	mov	r1, r7
1a004332:	4630      	mov	r0, r6
1a004334:	47c0      	blx	r8
1a004336:	3001      	adds	r0, #1
1a004338:	f105 0501 	add.w	r5, r5, #1
1a00433c:	d1f4      	bne.n	1a004328 <_printf_common+0xd4>
1a00433e:	e7c4      	b.n	1a0042ca <_printf_common+0x76>
1a004340:	f013 0f06 	tst.w	r3, #6
1a004344:	d108      	bne.n	1a004358 <_printf_common+0x104>
1a004346:	68e1      	ldr	r1, [r4, #12]
1a004348:	f8d9 2000 	ldr.w	r2, [r9]
1a00434c:	1a8a      	subs	r2, r1, r2
1a00434e:	2a00      	cmp	r2, #0
1a004350:	bfd8      	it	le
1a004352:	4619      	movle	r1, r3
1a004354:	dca6      	bgt.n	1a0042a4 <_printf_common+0x50>
1a004356:	e7bd      	b.n	1a0042d4 <_printf_common+0x80>
1a004358:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00435c:	3300      	adds	r3, #0
1a00435e:	bf18      	it	ne
1a004360:	2301      	movne	r3, #1
1a004362:	e7c9      	b.n	1a0042f8 <_printf_common+0xa4>
1a004364:	f8d9 1000 	ldr.w	r1, [r9]
1a004368:	68e0      	ldr	r0, [r4, #12]
1a00436a:	68a3      	ldr	r3, [r4, #8]
1a00436c:	6922      	ldr	r2, [r4, #16]
1a00436e:	eba0 0901 	sub.w	r9, r0, r1
1a004372:	4293      	cmp	r3, r2
1a004374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1a004378:	dcd1      	bgt.n	1a00431e <_printf_common+0xca>
1a00437a:	f1b9 0f00 	cmp.w	r9, #0
1a00437e:	d1d0      	bne.n	1a004322 <_printf_common+0xce>
1a004380:	2000      	movs	r0, #0
1a004382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004386:	bf00      	nop

1a004388 <_printf_i>:
1a004388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00438c:	460c      	mov	r4, r1
1a00438e:	7e09      	ldrb	r1, [r1, #24]
1a004390:	b085      	sub	sp, #20
1a004392:	296e      	cmp	r1, #110	; 0x6e
1a004394:	4606      	mov	r6, r0
1a004396:	4617      	mov	r7, r2
1a004398:	980c      	ldr	r0, [sp, #48]	; 0x30
1a00439a:	4698      	mov	r8, r3
1a00439c:	f104 0c43 	add.w	ip, r4, #67	; 0x43
1a0043a0:	d055      	beq.n	1a00444e <_printf_i+0xc6>
1a0043a2:	d80f      	bhi.n	1a0043c4 <_printf_i+0x3c>
1a0043a4:	2963      	cmp	r1, #99	; 0x63
1a0043a6:	f000 811b 	beq.w	1a0045e0 <_printf_i+0x258>
1a0043aa:	f200 80d6 	bhi.w	1a00455a <_printf_i+0x1d2>
1a0043ae:	2900      	cmp	r1, #0
1a0043b0:	d05c      	beq.n	1a00446c <_printf_i+0xe4>
1a0043b2:	2958      	cmp	r1, #88	; 0x58
1a0043b4:	f040 80e8 	bne.w	1a004588 <_printf_i+0x200>
1a0043b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0043bc:	6822      	ldr	r2, [r4, #0]
1a0043be:	f8df e260 	ldr.w	lr, [pc, #608]	; 1a004620 <_printf_i+0x298>
1a0043c2:	e013      	b.n	1a0043ec <_printf_i+0x64>
1a0043c4:	2973      	cmp	r1, #115	; 0x73
1a0043c6:	f000 80fd 	beq.w	1a0045c4 <_printf_i+0x23c>
1a0043ca:	f200 8089 	bhi.w	1a0044e0 <_printf_i+0x158>
1a0043ce:	296f      	cmp	r1, #111	; 0x6f
1a0043d0:	f000 80e4 	beq.w	1a00459c <_printf_i+0x214>
1a0043d4:	2970      	cmp	r1, #112	; 0x70
1a0043d6:	f040 80d7 	bne.w	1a004588 <_printf_i+0x200>
1a0043da:	6822      	ldr	r2, [r4, #0]
1a0043dc:	f042 0220 	orr.w	r2, r2, #32
1a0043e0:	6022      	str	r2, [r4, #0]
1a0043e2:	2378      	movs	r3, #120	; 0x78
1a0043e4:	f8df e23c 	ldr.w	lr, [pc, #572]	; 1a004624 <_printf_i+0x29c>
1a0043e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0043ec:	6803      	ldr	r3, [r0, #0]
1a0043ee:	0615      	lsls	r5, r2, #24
1a0043f0:	f103 0104 	add.w	r1, r3, #4
1a0043f4:	f100 80ff 	bmi.w	1a0045f6 <_printf_i+0x26e>
1a0043f8:	0655      	lsls	r5, r2, #25
1a0043fa:	bf4b      	itete	mi
1a0043fc:	881b      	ldrhmi	r3, [r3, #0]
1a0043fe:	681b      	ldrpl	r3, [r3, #0]
1a004400:	6001      	strmi	r1, [r0, #0]
1a004402:	6001      	strpl	r1, [r0, #0]
1a004404:	07d0      	lsls	r0, r2, #31
1a004406:	bf44      	itt	mi
1a004408:	f042 0220 	orrmi.w	r2, r2, #32
1a00440c:	6022      	strmi	r2, [r4, #0]
1a00440e:	2b00      	cmp	r3, #0
1a004410:	f040 8095 	bne.w	1a00453e <_printf_i+0x1b6>
1a004414:	6822      	ldr	r2, [r4, #0]
1a004416:	f022 0220 	bic.w	r2, r2, #32
1a00441a:	6022      	str	r2, [r4, #0]
1a00441c:	2110      	movs	r1, #16
1a00441e:	2200      	movs	r2, #0
1a004420:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a004424:	6860      	ldr	r0, [r4, #4]
1a004426:	60a0      	str	r0, [r4, #8]
1a004428:	2800      	cmp	r0, #0
1a00442a:	f2c0 808d 	blt.w	1a004548 <_printf_i+0x1c0>
1a00442e:	6822      	ldr	r2, [r4, #0]
1a004430:	f022 0204 	bic.w	r2, r2, #4
1a004434:	6022      	str	r2, [r4, #0]
1a004436:	2b00      	cmp	r3, #0
1a004438:	d167      	bne.n	1a00450a <_printf_i+0x182>
1a00443a:	2800      	cmp	r0, #0
1a00443c:	f040 8086 	bne.w	1a00454c <_printf_i+0x1c4>
1a004440:	4665      	mov	r5, ip
1a004442:	2908      	cmp	r1, #8
1a004444:	d06f      	beq.n	1a004526 <_printf_i+0x19e>
1a004446:	ebac 0305 	sub.w	r3, ip, r5
1a00444a:	6123      	str	r3, [r4, #16]
1a00444c:	e011      	b.n	1a004472 <_printf_i+0xea>
1a00444e:	6823      	ldr	r3, [r4, #0]
1a004450:	061a      	lsls	r2, r3, #24
1a004452:	f100 80d3 	bmi.w	1a0045fc <_printf_i+0x274>
1a004456:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00445a:	6803      	ldr	r3, [r0, #0]
1a00445c:	6962      	ldr	r2, [r4, #20]
1a00445e:	f103 0104 	add.w	r1, r3, #4
1a004462:	6001      	str	r1, [r0, #0]
1a004464:	681b      	ldr	r3, [r3, #0]
1a004466:	bf14      	ite	ne
1a004468:	801a      	strhne	r2, [r3, #0]
1a00446a:	601a      	streq	r2, [r3, #0]
1a00446c:	2300      	movs	r3, #0
1a00446e:	4665      	mov	r5, ip
1a004470:	6123      	str	r3, [r4, #16]
1a004472:	f8cd 8000 	str.w	r8, [sp]
1a004476:	463b      	mov	r3, r7
1a004478:	aa03      	add	r2, sp, #12
1a00447a:	4621      	mov	r1, r4
1a00447c:	4630      	mov	r0, r6
1a00447e:	f7ff fee9 	bl	1a004254 <_printf_common>
1a004482:	3001      	adds	r0, #1
1a004484:	d021      	beq.n	1a0044ca <_printf_i+0x142>
1a004486:	462a      	mov	r2, r5
1a004488:	6923      	ldr	r3, [r4, #16]
1a00448a:	4639      	mov	r1, r7
1a00448c:	4630      	mov	r0, r6
1a00448e:	47c0      	blx	r8
1a004490:	3001      	adds	r0, #1
1a004492:	d01a      	beq.n	1a0044ca <_printf_i+0x142>
1a004494:	6823      	ldr	r3, [r4, #0]
1a004496:	68e0      	ldr	r0, [r4, #12]
1a004498:	f013 0f02 	tst.w	r3, #2
1a00449c:	9b03      	ldr	r3, [sp, #12]
1a00449e:	d019      	beq.n	1a0044d4 <_printf_i+0x14c>
1a0044a0:	1ac2      	subs	r2, r0, r3
1a0044a2:	2a00      	cmp	r2, #0
1a0044a4:	dd16      	ble.n	1a0044d4 <_printf_i+0x14c>
1a0044a6:	f104 0919 	add.w	r9, r4, #25
1a0044aa:	2500      	movs	r5, #0
1a0044ac:	e004      	b.n	1a0044b8 <_printf_i+0x130>
1a0044ae:	68e0      	ldr	r0, [r4, #12]
1a0044b0:	9b03      	ldr	r3, [sp, #12]
1a0044b2:	1ac2      	subs	r2, r0, r3
1a0044b4:	42aa      	cmp	r2, r5
1a0044b6:	dd0d      	ble.n	1a0044d4 <_printf_i+0x14c>
1a0044b8:	2301      	movs	r3, #1
1a0044ba:	464a      	mov	r2, r9
1a0044bc:	4639      	mov	r1, r7
1a0044be:	4630      	mov	r0, r6
1a0044c0:	47c0      	blx	r8
1a0044c2:	3001      	adds	r0, #1
1a0044c4:	f105 0501 	add.w	r5, r5, #1
1a0044c8:	d1f1      	bne.n	1a0044ae <_printf_i+0x126>
1a0044ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0044ce:	b005      	add	sp, #20
1a0044d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0044d4:	4298      	cmp	r0, r3
1a0044d6:	bfb8      	it	lt
1a0044d8:	4618      	movlt	r0, r3
1a0044da:	b005      	add	sp, #20
1a0044dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0044e0:	2975      	cmp	r1, #117	; 0x75
1a0044e2:	d05b      	beq.n	1a00459c <_printf_i+0x214>
1a0044e4:	2978      	cmp	r1, #120	; 0x78
1a0044e6:	d14f      	bne.n	1a004588 <_printf_i+0x200>
1a0044e8:	6822      	ldr	r2, [r4, #0]
1a0044ea:	e77a      	b.n	1a0043e2 <_printf_i+0x5a>
1a0044ec:	6861      	ldr	r1, [r4, #4]
1a0044ee:	60a1      	str	r1, [r4, #8]
1a0044f0:	202d      	movs	r0, #45	; 0x2d
1a0044f2:	2900      	cmp	r1, #0
1a0044f4:	f1c3 0300 	rsb	r3, r3, #0
1a0044f8:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
1a0044fc:	db21      	blt.n	1a004542 <_printf_i+0x1ba>
1a0044fe:	f022 0204 	bic.w	r2, r2, #4
1a004502:	f8df e11c 	ldr.w	lr, [pc, #284]	; 1a004620 <_printf_i+0x298>
1a004506:	6022      	str	r2, [r4, #0]
1a004508:	210a      	movs	r1, #10
1a00450a:	4665      	mov	r5, ip
1a00450c:	fbb3 f2f1 	udiv	r2, r3, r1
1a004510:	fb01 3012 	mls	r0, r1, r2, r3
1a004514:	4613      	mov	r3, r2
1a004516:	f81e 2000 	ldrb.w	r2, [lr, r0]
1a00451a:	f805 2d01 	strb.w	r2, [r5, #-1]!
1a00451e:	2b00      	cmp	r3, #0
1a004520:	d1f4      	bne.n	1a00450c <_printf_i+0x184>
1a004522:	2908      	cmp	r1, #8
1a004524:	d18f      	bne.n	1a004446 <_printf_i+0xbe>
1a004526:	6823      	ldr	r3, [r4, #0]
1a004528:	07d9      	lsls	r1, r3, #31
1a00452a:	d58c      	bpl.n	1a004446 <_printf_i+0xbe>
1a00452c:	6862      	ldr	r2, [r4, #4]
1a00452e:	6923      	ldr	r3, [r4, #16]
1a004530:	429a      	cmp	r2, r3
1a004532:	dc88      	bgt.n	1a004446 <_printf_i+0xbe>
1a004534:	2330      	movs	r3, #48	; 0x30
1a004536:	f805 3c01 	strb.w	r3, [r5, #-1]
1a00453a:	3d01      	subs	r5, #1
1a00453c:	e783      	b.n	1a004446 <_printf_i+0xbe>
1a00453e:	2110      	movs	r1, #16
1a004540:	e76d      	b.n	1a00441e <_printf_i+0x96>
1a004542:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 1a004620 <_printf_i+0x298>
1a004546:	210a      	movs	r1, #10
1a004548:	2b00      	cmp	r3, #0
1a00454a:	d1de      	bne.n	1a00450a <_printf_i+0x182>
1a00454c:	f89e 3000 	ldrb.w	r3, [lr]
1a004550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004554:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004558:	e773      	b.n	1a004442 <_printf_i+0xba>
1a00455a:	2964      	cmp	r1, #100	; 0x64
1a00455c:	d001      	beq.n	1a004562 <_printf_i+0x1da>
1a00455e:	2969      	cmp	r1, #105	; 0x69
1a004560:	d112      	bne.n	1a004588 <_printf_i+0x200>
1a004562:	6822      	ldr	r2, [r4, #0]
1a004564:	6803      	ldr	r3, [r0, #0]
1a004566:	0615      	lsls	r5, r2, #24
1a004568:	f103 0104 	add.w	r1, r3, #4
1a00456c:	d452      	bmi.n	1a004614 <_printf_i+0x28c>
1a00456e:	0655      	lsls	r5, r2, #25
1a004570:	bf4b      	itete	mi
1a004572:	f9b3 3000 	ldrshmi.w	r3, [r3]
1a004576:	681b      	ldrpl	r3, [r3, #0]
1a004578:	6001      	strmi	r1, [r0, #0]
1a00457a:	6001      	strpl	r1, [r0, #0]
1a00457c:	2b00      	cmp	r3, #0
1a00457e:	dbb5      	blt.n	1a0044ec <_printf_i+0x164>
1a004580:	f8df e09c 	ldr.w	lr, [pc, #156]	; 1a004620 <_printf_i+0x298>
1a004584:	210a      	movs	r1, #10
1a004586:	e74d      	b.n	1a004424 <_printf_i+0x9c>
1a004588:	2301      	movs	r3, #1
1a00458a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a00458e:	6123      	str	r3, [r4, #16]
1a004590:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004594:	2300      	movs	r3, #0
1a004596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00459a:	e76a      	b.n	1a004472 <_printf_i+0xea>
1a00459c:	6823      	ldr	r3, [r4, #0]
1a00459e:	061a      	lsls	r2, r3, #24
1a0045a0:	d433      	bmi.n	1a00460a <_printf_i+0x282>
1a0045a2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0045a6:	6803      	ldr	r3, [r0, #0]
1a0045a8:	f103 0204 	add.w	r2, r3, #4
1a0045ac:	bf15      	itete	ne
1a0045ae:	881b      	ldrhne	r3, [r3, #0]
1a0045b0:	681b      	ldreq	r3, [r3, #0]
1a0045b2:	6002      	strne	r2, [r0, #0]
1a0045b4:	6002      	streq	r2, [r0, #0]
1a0045b6:	296f      	cmp	r1, #111	; 0x6f
1a0045b8:	bf14      	ite	ne
1a0045ba:	210a      	movne	r1, #10
1a0045bc:	2108      	moveq	r1, #8
1a0045be:	f8df e060 	ldr.w	lr, [pc, #96]	; 1a004620 <_printf_i+0x298>
1a0045c2:	e72c      	b.n	1a00441e <_printf_i+0x96>
1a0045c4:	6803      	ldr	r3, [r0, #0]
1a0045c6:	6862      	ldr	r2, [r4, #4]
1a0045c8:	1d19      	adds	r1, r3, #4
1a0045ca:	6001      	str	r1, [r0, #0]
1a0045cc:	681d      	ldr	r5, [r3, #0]
1a0045ce:	2100      	movs	r1, #0
1a0045d0:	4628      	mov	r0, r5
1a0045d2:	f000 fbdd 	bl	1a004d90 <memchr>
1a0045d6:	b300      	cbz	r0, 1a00461a <_printf_i+0x292>
1a0045d8:	1b40      	subs	r0, r0, r5
1a0045da:	6060      	str	r0, [r4, #4]
1a0045dc:	6120      	str	r0, [r4, #16]
1a0045de:	e7d9      	b.n	1a004594 <_printf_i+0x20c>
1a0045e0:	6803      	ldr	r3, [r0, #0]
1a0045e2:	681a      	ldr	r2, [r3, #0]
1a0045e4:	1d19      	adds	r1, r3, #4
1a0045e6:	2301      	movs	r3, #1
1a0045e8:	6001      	str	r1, [r0, #0]
1a0045ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0045ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
1a0045f2:	6123      	str	r3, [r4, #16]
1a0045f4:	e7ce      	b.n	1a004594 <_printf_i+0x20c>
1a0045f6:	6001      	str	r1, [r0, #0]
1a0045f8:	681b      	ldr	r3, [r3, #0]
1a0045fa:	e703      	b.n	1a004404 <_printf_i+0x7c>
1a0045fc:	6803      	ldr	r3, [r0, #0]
1a0045fe:	6962      	ldr	r2, [r4, #20]
1a004600:	1d19      	adds	r1, r3, #4
1a004602:	6001      	str	r1, [r0, #0]
1a004604:	681b      	ldr	r3, [r3, #0]
1a004606:	601a      	str	r2, [r3, #0]
1a004608:	e730      	b.n	1a00446c <_printf_i+0xe4>
1a00460a:	6803      	ldr	r3, [r0, #0]
1a00460c:	1d1a      	adds	r2, r3, #4
1a00460e:	6002      	str	r2, [r0, #0]
1a004610:	681b      	ldr	r3, [r3, #0]
1a004612:	e7d0      	b.n	1a0045b6 <_printf_i+0x22e>
1a004614:	6001      	str	r1, [r0, #0]
1a004616:	681b      	ldr	r3, [r3, #0]
1a004618:	e7b0      	b.n	1a00457c <_printf_i+0x1f4>
1a00461a:	6860      	ldr	r0, [r4, #4]
1a00461c:	e7de      	b.n	1a0045dc <_printf_i+0x254>
1a00461e:	bf00      	nop
1a004620:	1a005348 	.word	0x1a005348
1a004624:	1a00535c 	.word	0x1a00535c

1a004628 <_iprintf_r>:
1a004628:	b40e      	push	{r1, r2, r3}
1a00462a:	b510      	push	{r4, lr}
1a00462c:	4604      	mov	r4, r0
1a00462e:	b083      	sub	sp, #12
1a004630:	b118      	cbz	r0, 1a00463a <_iprintf_r+0x12>
1a004632:	6983      	ldr	r3, [r0, #24]
1a004634:	b90b      	cbnz	r3, 1a00463a <_iprintf_r+0x12>
1a004636:	f7ff fa6b 	bl	1a003b10 <__sinit>
1a00463a:	a806      	add	r0, sp, #24
1a00463c:	4603      	mov	r3, r0
1a00463e:	9001      	str	r0, [sp, #4]
1a004640:	9a05      	ldr	r2, [sp, #20]
1a004642:	68a1      	ldr	r1, [r4, #8]
1a004644:	4620      	mov	r0, r4
1a004646:	f7ff fcc7 	bl	1a003fd8 <_vfiprintf_r>
1a00464a:	b003      	add	sp, #12
1a00464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004650:	b003      	add	sp, #12
1a004652:	4770      	bx	lr

1a004654 <iprintf>:
1a004654:	b40f      	push	{r0, r1, r2, r3}
1a004656:	b510      	push	{r4, lr}
1a004658:	4b0a      	ldr	r3, [pc, #40]	; (1a004684 <iprintf+0x30>)
1a00465a:	681c      	ldr	r4, [r3, #0]
1a00465c:	b082      	sub	sp, #8
1a00465e:	b124      	cbz	r4, 1a00466a <iprintf+0x16>
1a004660:	69a3      	ldr	r3, [r4, #24]
1a004662:	b913      	cbnz	r3, 1a00466a <iprintf+0x16>
1a004664:	4620      	mov	r0, r4
1a004666:	f7ff fa53 	bl	1a003b10 <__sinit>
1a00466a:	a805      	add	r0, sp, #20
1a00466c:	4603      	mov	r3, r0
1a00466e:	9001      	str	r0, [sp, #4]
1a004670:	9a04      	ldr	r2, [sp, #16]
1a004672:	68a1      	ldr	r1, [r4, #8]
1a004674:	4620      	mov	r0, r4
1a004676:	f7ff fcaf 	bl	1a003fd8 <_vfiprintf_r>
1a00467a:	b002      	add	sp, #8
1a00467c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004680:	b004      	add	sp, #16
1a004682:	4770      	bx	lr
1a004684:	10000040 	.word	0x10000040

1a004688 <_puts_r>:
1a004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00468c:	460e      	mov	r6, r1
1a00468e:	4680      	mov	r8, r0
1a004690:	2800      	cmp	r0, #0
1a004692:	d03e      	beq.n	1a004712 <_puts_r+0x8a>
1a004694:	6983      	ldr	r3, [r0, #24]
1a004696:	2b00      	cmp	r3, #0
1a004698:	d039      	beq.n	1a00470e <_puts_r+0x86>
1a00469a:	6884      	ldr	r4, [r0, #8]
1a00469c:	4b2f      	ldr	r3, [pc, #188]	; (1a00475c <_puts_r+0xd4>)
1a00469e:	429c      	cmp	r4, r3
1a0046a0:	d043      	beq.n	1a00472a <_puts_r+0xa2>
1a0046a2:	4b2f      	ldr	r3, [pc, #188]	; (1a004760 <_puts_r+0xd8>)
1a0046a4:	429c      	cmp	r4, r3
1a0046a6:	d056      	beq.n	1a004756 <_puts_r+0xce>
1a0046a8:	4b2e      	ldr	r3, [pc, #184]	; (1a004764 <_puts_r+0xdc>)
1a0046aa:	429c      	cmp	r4, r3
1a0046ac:	bf08      	it	eq
1a0046ae:	f8d8 400c 	ldreq.w	r4, [r8, #12]
1a0046b2:	89a3      	ldrh	r3, [r4, #12]
1a0046b4:	071b      	lsls	r3, r3, #28
1a0046b6:	d53d      	bpl.n	1a004734 <_puts_r+0xac>
1a0046b8:	6923      	ldr	r3, [r4, #16]
1a0046ba:	2b00      	cmp	r3, #0
1a0046bc:	d03a      	beq.n	1a004734 <_puts_r+0xac>
1a0046be:	3e01      	subs	r6, #1
1a0046c0:	68a3      	ldr	r3, [r4, #8]
1a0046c2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
1a0046c6:	3b01      	subs	r3, #1
1a0046c8:	60a3      	str	r3, [r4, #8]
1a0046ca:	b1b5      	cbz	r5, 1a0046fa <_puts_r+0x72>
1a0046cc:	2b00      	cmp	r3, #0
1a0046ce:	db04      	blt.n	1a0046da <_puts_r+0x52>
1a0046d0:	6823      	ldr	r3, [r4, #0]
1a0046d2:	1c5a      	adds	r2, r3, #1
1a0046d4:	6022      	str	r2, [r4, #0]
1a0046d6:	701d      	strb	r5, [r3, #0]
1a0046d8:	e7f2      	b.n	1a0046c0 <_puts_r+0x38>
1a0046da:	69a7      	ldr	r7, [r4, #24]
1a0046dc:	42bb      	cmp	r3, r7
1a0046de:	4622      	mov	r2, r4
1a0046e0:	4629      	mov	r1, r5
1a0046e2:	4640      	mov	r0, r8
1a0046e4:	db01      	blt.n	1a0046ea <_puts_r+0x62>
1a0046e6:	2d0a      	cmp	r5, #10
1a0046e8:	d1f2      	bne.n	1a0046d0 <_puts_r+0x48>
1a0046ea:	f000 f88b 	bl	1a004804 <__swbuf_r>
1a0046ee:	3001      	adds	r0, #1
1a0046f0:	d1e6      	bne.n	1a0046c0 <_puts_r+0x38>
1a0046f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0046f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0046fa:	2b00      	cmp	r3, #0
1a0046fc:	db21      	blt.n	1a004742 <_puts_r+0xba>
1a0046fe:	6823      	ldr	r3, [r4, #0]
1a004700:	220a      	movs	r2, #10
1a004702:	1c59      	adds	r1, r3, #1
1a004704:	6021      	str	r1, [r4, #0]
1a004706:	701a      	strb	r2, [r3, #0]
1a004708:	4610      	mov	r0, r2
1a00470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00470e:	f7ff f9ff 	bl	1a003b10 <__sinit>
1a004712:	f8d8 3018 	ldr.w	r3, [r8, #24]
1a004716:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a00471a:	2b00      	cmp	r3, #0
1a00471c:	d1be      	bne.n	1a00469c <_puts_r+0x14>
1a00471e:	4640      	mov	r0, r8
1a004720:	f7ff f9f6 	bl	1a003b10 <__sinit>
1a004724:	4b0d      	ldr	r3, [pc, #52]	; (1a00475c <_puts_r+0xd4>)
1a004726:	429c      	cmp	r4, r3
1a004728:	d1bb      	bne.n	1a0046a2 <_puts_r+0x1a>
1a00472a:	f8d8 4004 	ldr.w	r4, [r8, #4]
1a00472e:	89a3      	ldrh	r3, [r4, #12]
1a004730:	071b      	lsls	r3, r3, #28
1a004732:	d4c1      	bmi.n	1a0046b8 <_puts_r+0x30>
1a004734:	4621      	mov	r1, r4
1a004736:	4640      	mov	r0, r8
1a004738:	f000 f8c6 	bl	1a0048c8 <__swsetup_r>
1a00473c:	2800      	cmp	r0, #0
1a00473e:	d0be      	beq.n	1a0046be <_puts_r+0x36>
1a004740:	e7d7      	b.n	1a0046f2 <_puts_r+0x6a>
1a004742:	4622      	mov	r2, r4
1a004744:	4640      	mov	r0, r8
1a004746:	210a      	movs	r1, #10
1a004748:	f000 f85c 	bl	1a004804 <__swbuf_r>
1a00474c:	3001      	adds	r0, #1
1a00474e:	d0d0      	beq.n	1a0046f2 <_puts_r+0x6a>
1a004750:	200a      	movs	r0, #10
1a004752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004756:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a00475a:	e7aa      	b.n	1a0046b2 <_puts_r+0x2a>
1a00475c:	1a00530c 	.word	0x1a00530c
1a004760:	1a0052ec 	.word	0x1a0052ec
1a004764:	1a0052cc 	.word	0x1a0052cc

1a004768 <puts>:
1a004768:	4b02      	ldr	r3, [pc, #8]	; (1a004774 <puts+0xc>)
1a00476a:	4601      	mov	r1, r0
1a00476c:	6818      	ldr	r0, [r3, #0]
1a00476e:	f7ff bf8b 	b.w	1a004688 <_puts_r>
1a004772:	bf00      	nop
1a004774:	10000040 	.word	0x10000040

1a004778 <__sread>:
1a004778:	b510      	push	{r4, lr}
1a00477a:	460c      	mov	r4, r1
1a00477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004780:	f7fb fe96 	bl	1a0004b0 <_read_r>
1a004784:	2800      	cmp	r0, #0
1a004786:	db03      	blt.n	1a004790 <__sread+0x18>
1a004788:	6d63      	ldr	r3, [r4, #84]	; 0x54
1a00478a:	4403      	add	r3, r0
1a00478c:	6563      	str	r3, [r4, #84]	; 0x54
1a00478e:	bd10      	pop	{r4, pc}
1a004790:	89a3      	ldrh	r3, [r4, #12]
1a004792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004796:	81a3      	strh	r3, [r4, #12]
1a004798:	bd10      	pop	{r4, pc}
1a00479a:	bf00      	nop

1a00479c <__seofread>:
1a00479c:	2000      	movs	r0, #0
1a00479e:	4770      	bx	lr

1a0047a0 <__swrite>:
1a0047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0047a4:	4616      	mov	r6, r2
1a0047a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a0047aa:	461f      	mov	r7, r3
1a0047ac:	05d3      	lsls	r3, r2, #23
1a0047ae:	460c      	mov	r4, r1
1a0047b0:	4605      	mov	r5, r0
1a0047b2:	d507      	bpl.n	1a0047c4 <__swrite+0x24>
1a0047b4:	2200      	movs	r2, #0
1a0047b6:	2302      	movs	r3, #2
1a0047b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0047bc:	f7fb fe73 	bl	1a0004a6 <_lseek_r>
1a0047c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0047c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0047c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a0047cc:	81a2      	strh	r2, [r4, #12]
1a0047ce:	463b      	mov	r3, r7
1a0047d0:	4632      	mov	r2, r6
1a0047d2:	4628      	mov	r0, r5
1a0047d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0047d8:	f7fb be92 	b.w	1a000500 <_write_r>

1a0047dc <__sseek>:
1a0047dc:	b510      	push	{r4, lr}
1a0047de:	460c      	mov	r4, r1
1a0047e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0047e4:	f7fb fe5f 	bl	1a0004a6 <_lseek_r>
1a0047e8:	89a3      	ldrh	r3, [r4, #12]
1a0047ea:	1c42      	adds	r2, r0, #1
1a0047ec:	bf0e      	itee	eq
1a0047ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0047f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0047f6:	6560      	strne	r0, [r4, #84]	; 0x54
1a0047f8:	81a3      	strh	r3, [r4, #12]
1a0047fa:	bd10      	pop	{r4, pc}

1a0047fc <__sclose>:
1a0047fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004800:	f7fb be3e 	b.w	1a000480 <_close_r>

1a004804 <__swbuf_r>:
1a004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004806:	460d      	mov	r5, r1
1a004808:	4614      	mov	r4, r2
1a00480a:	4606      	mov	r6, r0
1a00480c:	b110      	cbz	r0, 1a004814 <__swbuf_r+0x10>
1a00480e:	6983      	ldr	r3, [r0, #24]
1a004810:	2b00      	cmp	r3, #0
1a004812:	d042      	beq.n	1a00489a <__swbuf_r+0x96>
1a004814:	4b25      	ldr	r3, [pc, #148]	; (1a0048ac <__swbuf_r+0xa8>)
1a004816:	429c      	cmp	r4, r3
1a004818:	d044      	beq.n	1a0048a4 <__swbuf_r+0xa0>
1a00481a:	4b25      	ldr	r3, [pc, #148]	; (1a0048b0 <__swbuf_r+0xac>)
1a00481c:	429c      	cmp	r4, r3
1a00481e:	d043      	beq.n	1a0048a8 <__swbuf_r+0xa4>
1a004820:	4b24      	ldr	r3, [pc, #144]	; (1a0048b4 <__swbuf_r+0xb0>)
1a004822:	429c      	cmp	r4, r3
1a004824:	bf08      	it	eq
1a004826:	68f4      	ldreq	r4, [r6, #12]
1a004828:	89a3      	ldrh	r3, [r4, #12]
1a00482a:	69a2      	ldr	r2, [r4, #24]
1a00482c:	60a2      	str	r2, [r4, #8]
1a00482e:	071a      	lsls	r2, r3, #28
1a004830:	d522      	bpl.n	1a004878 <__swbuf_r+0x74>
1a004832:	6923      	ldr	r3, [r4, #16]
1a004834:	b303      	cbz	r3, 1a004878 <__swbuf_r+0x74>
1a004836:	6822      	ldr	r2, [r4, #0]
1a004838:	6961      	ldr	r1, [r4, #20]
1a00483a:	1ad3      	subs	r3, r2, r3
1a00483c:	b2ed      	uxtb	r5, r5
1a00483e:	428b      	cmp	r3, r1
1a004840:	462f      	mov	r7, r5
1a004842:	da21      	bge.n	1a004888 <__swbuf_r+0x84>
1a004844:	3301      	adds	r3, #1
1a004846:	68a1      	ldr	r1, [r4, #8]
1a004848:	1c50      	adds	r0, r2, #1
1a00484a:	3901      	subs	r1, #1
1a00484c:	60a1      	str	r1, [r4, #8]
1a00484e:	6020      	str	r0, [r4, #0]
1a004850:	7015      	strb	r5, [r2, #0]
1a004852:	6962      	ldr	r2, [r4, #20]
1a004854:	429a      	cmp	r2, r3
1a004856:	d006      	beq.n	1a004866 <__swbuf_r+0x62>
1a004858:	89a3      	ldrh	r3, [r4, #12]
1a00485a:	07db      	lsls	r3, r3, #31
1a00485c:	d501      	bpl.n	1a004862 <__swbuf_r+0x5e>
1a00485e:	2d0a      	cmp	r5, #10
1a004860:	d001      	beq.n	1a004866 <__swbuf_r+0x62>
1a004862:	4638      	mov	r0, r7
1a004864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004866:	4621      	mov	r1, r4
1a004868:	4630      	mov	r0, r6
1a00486a:	f7ff f815 	bl	1a003898 <_fflush_r>
1a00486e:	2800      	cmp	r0, #0
1a004870:	d0f7      	beq.n	1a004862 <__swbuf_r+0x5e>
1a004872:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004876:	e7f4      	b.n	1a004862 <__swbuf_r+0x5e>
1a004878:	4621      	mov	r1, r4
1a00487a:	4630      	mov	r0, r6
1a00487c:	f000 f824 	bl	1a0048c8 <__swsetup_r>
1a004880:	2800      	cmp	r0, #0
1a004882:	d1f6      	bne.n	1a004872 <__swbuf_r+0x6e>
1a004884:	6923      	ldr	r3, [r4, #16]
1a004886:	e7d6      	b.n	1a004836 <__swbuf_r+0x32>
1a004888:	4621      	mov	r1, r4
1a00488a:	4630      	mov	r0, r6
1a00488c:	f7ff f804 	bl	1a003898 <_fflush_r>
1a004890:	2800      	cmp	r0, #0
1a004892:	d1ee      	bne.n	1a004872 <__swbuf_r+0x6e>
1a004894:	6822      	ldr	r2, [r4, #0]
1a004896:	2301      	movs	r3, #1
1a004898:	e7d5      	b.n	1a004846 <__swbuf_r+0x42>
1a00489a:	f7ff f939 	bl	1a003b10 <__sinit>
1a00489e:	4b03      	ldr	r3, [pc, #12]	; (1a0048ac <__swbuf_r+0xa8>)
1a0048a0:	429c      	cmp	r4, r3
1a0048a2:	d1ba      	bne.n	1a00481a <__swbuf_r+0x16>
1a0048a4:	6874      	ldr	r4, [r6, #4]
1a0048a6:	e7bf      	b.n	1a004828 <__swbuf_r+0x24>
1a0048a8:	68b4      	ldr	r4, [r6, #8]
1a0048aa:	e7bd      	b.n	1a004828 <__swbuf_r+0x24>
1a0048ac:	1a00530c 	.word	0x1a00530c
1a0048b0:	1a0052ec 	.word	0x1a0052ec
1a0048b4:	1a0052cc 	.word	0x1a0052cc

1a0048b8 <__swbuf>:
1a0048b8:	4b02      	ldr	r3, [pc, #8]	; (1a0048c4 <__swbuf+0xc>)
1a0048ba:	460a      	mov	r2, r1
1a0048bc:	4601      	mov	r1, r0
1a0048be:	6818      	ldr	r0, [r3, #0]
1a0048c0:	f7ff bfa0 	b.w	1a004804 <__swbuf_r>
1a0048c4:	10000040 	.word	0x10000040

1a0048c8 <__swsetup_r>:
1a0048c8:	4b38      	ldr	r3, [pc, #224]	; (1a0049ac <__swsetup_r+0xe4>)
1a0048ca:	b570      	push	{r4, r5, r6, lr}
1a0048cc:	681d      	ldr	r5, [r3, #0]
1a0048ce:	4606      	mov	r6, r0
1a0048d0:	460c      	mov	r4, r1
1a0048d2:	b115      	cbz	r5, 1a0048da <__swsetup_r+0x12>
1a0048d4:	69ab      	ldr	r3, [r5, #24]
1a0048d6:	2b00      	cmp	r3, #0
1a0048d8:	d042      	beq.n	1a004960 <__swsetup_r+0x98>
1a0048da:	4b35      	ldr	r3, [pc, #212]	; (1a0049b0 <__swsetup_r+0xe8>)
1a0048dc:	429c      	cmp	r4, r3
1a0048de:	d045      	beq.n	1a00496c <__swsetup_r+0xa4>
1a0048e0:	4b34      	ldr	r3, [pc, #208]	; (1a0049b4 <__swsetup_r+0xec>)
1a0048e2:	429c      	cmp	r4, r3
1a0048e4:	d058      	beq.n	1a004998 <__swsetup_r+0xd0>
1a0048e6:	4b34      	ldr	r3, [pc, #208]	; (1a0049b8 <__swsetup_r+0xf0>)
1a0048e8:	429c      	cmp	r4, r3
1a0048ea:	bf08      	it	eq
1a0048ec:	68ec      	ldreq	r4, [r5, #12]
1a0048ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0048f2:	b293      	uxth	r3, r2
1a0048f4:	0719      	lsls	r1, r3, #28
1a0048f6:	d50c      	bpl.n	1a004912 <__swsetup_r+0x4a>
1a0048f8:	6920      	ldr	r0, [r4, #16]
1a0048fa:	b1a8      	cbz	r0, 1a004928 <__swsetup_r+0x60>
1a0048fc:	f013 0201 	ands.w	r2, r3, #1
1a004900:	d01e      	beq.n	1a004940 <__swsetup_r+0x78>
1a004902:	6963      	ldr	r3, [r4, #20]
1a004904:	2200      	movs	r2, #0
1a004906:	425b      	negs	r3, r3
1a004908:	61a3      	str	r3, [r4, #24]
1a00490a:	60a2      	str	r2, [r4, #8]
1a00490c:	b1f0      	cbz	r0, 1a00494c <__swsetup_r+0x84>
1a00490e:	2000      	movs	r0, #0
1a004910:	bd70      	pop	{r4, r5, r6, pc}
1a004912:	06dd      	lsls	r5, r3, #27
1a004914:	d542      	bpl.n	1a00499c <__swsetup_r+0xd4>
1a004916:	0758      	lsls	r0, r3, #29
1a004918:	d42a      	bmi.n	1a004970 <__swsetup_r+0xa8>
1a00491a:	6920      	ldr	r0, [r4, #16]
1a00491c:	f042 0308 	orr.w	r3, r2, #8
1a004920:	81a3      	strh	r3, [r4, #12]
1a004922:	b29b      	uxth	r3, r3
1a004924:	2800      	cmp	r0, #0
1a004926:	d1e9      	bne.n	1a0048fc <__swsetup_r+0x34>
1a004928:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a00492c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a004930:	d0e4      	beq.n	1a0048fc <__swsetup_r+0x34>
1a004932:	4630      	mov	r0, r6
1a004934:	4621      	mov	r1, r4
1a004936:	f000 f9e7 	bl	1a004d08 <__smakebuf_r>
1a00493a:	89a3      	ldrh	r3, [r4, #12]
1a00493c:	6920      	ldr	r0, [r4, #16]
1a00493e:	e7dd      	b.n	1a0048fc <__swsetup_r+0x34>
1a004940:	0799      	lsls	r1, r3, #30
1a004942:	bf58      	it	pl
1a004944:	6962      	ldrpl	r2, [r4, #20]
1a004946:	60a2      	str	r2, [r4, #8]
1a004948:	2800      	cmp	r0, #0
1a00494a:	d1e0      	bne.n	1a00490e <__swsetup_r+0x46>
1a00494c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004950:	061a      	lsls	r2, r3, #24
1a004952:	d5dd      	bpl.n	1a004910 <__swsetup_r+0x48>
1a004954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004958:	81a3      	strh	r3, [r4, #12]
1a00495a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00495e:	bd70      	pop	{r4, r5, r6, pc}
1a004960:	4628      	mov	r0, r5
1a004962:	f7ff f8d5 	bl	1a003b10 <__sinit>
1a004966:	4b12      	ldr	r3, [pc, #72]	; (1a0049b0 <__swsetup_r+0xe8>)
1a004968:	429c      	cmp	r4, r3
1a00496a:	d1b9      	bne.n	1a0048e0 <__swsetup_r+0x18>
1a00496c:	686c      	ldr	r4, [r5, #4]
1a00496e:	e7be      	b.n	1a0048ee <__swsetup_r+0x26>
1a004970:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004972:	b151      	cbz	r1, 1a00498a <__swsetup_r+0xc2>
1a004974:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004978:	4299      	cmp	r1, r3
1a00497a:	d004      	beq.n	1a004986 <__swsetup_r+0xbe>
1a00497c:	4630      	mov	r0, r6
1a00497e:	f7ff fa47 	bl	1a003e10 <_free_r>
1a004982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004986:	2300      	movs	r3, #0
1a004988:	6363      	str	r3, [r4, #52]	; 0x34
1a00498a:	2300      	movs	r3, #0
1a00498c:	6920      	ldr	r0, [r4, #16]
1a00498e:	6063      	str	r3, [r4, #4]
1a004990:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a004994:	6020      	str	r0, [r4, #0]
1a004996:	e7c1      	b.n	1a00491c <__swsetup_r+0x54>
1a004998:	68ac      	ldr	r4, [r5, #8]
1a00499a:	e7a8      	b.n	1a0048ee <__swsetup_r+0x26>
1a00499c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a0049a0:	2309      	movs	r3, #9
1a0049a2:	6033      	str	r3, [r6, #0]
1a0049a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0049a8:	81a2      	strh	r2, [r4, #12]
1a0049aa:	bd70      	pop	{r4, r5, r6, pc}
1a0049ac:	10000040 	.word	0x10000040
1a0049b0:	1a00530c 	.word	0x1a00530c
1a0049b4:	1a0052ec 	.word	0x1a0052ec
1a0049b8:	1a0052cc 	.word	0x1a0052cc

1a0049bc <__sfvwrite_r>:
1a0049bc:	6893      	ldr	r3, [r2, #8]
1a0049be:	2b00      	cmp	r3, #0
1a0049c0:	d073      	beq.n	1a004aaa <__sfvwrite_r+0xee>
1a0049c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0049c6:	898b      	ldrh	r3, [r1, #12]
1a0049c8:	b083      	sub	sp, #12
1a0049ca:	460c      	mov	r4, r1
1a0049cc:	0719      	lsls	r1, r3, #28
1a0049ce:	9000      	str	r0, [sp, #0]
1a0049d0:	4616      	mov	r6, r2
1a0049d2:	d526      	bpl.n	1a004a22 <__sfvwrite_r+0x66>
1a0049d4:	6922      	ldr	r2, [r4, #16]
1a0049d6:	b322      	cbz	r2, 1a004a22 <__sfvwrite_r+0x66>
1a0049d8:	f013 0002 	ands.w	r0, r3, #2
1a0049dc:	6835      	ldr	r5, [r6, #0]
1a0049de:	d02c      	beq.n	1a004a3a <__sfvwrite_r+0x7e>
1a0049e0:	f04f 0900 	mov.w	r9, #0
1a0049e4:	4fb0      	ldr	r7, [pc, #704]	; (1a004ca8 <__sfvwrite_r+0x2ec>)
1a0049e6:	46c8      	mov	r8, r9
1a0049e8:	46b2      	mov	sl, r6
1a0049ea:	45b8      	cmp	r8, r7
1a0049ec:	4643      	mov	r3, r8
1a0049ee:	464a      	mov	r2, r9
1a0049f0:	bf28      	it	cs
1a0049f2:	463b      	movcs	r3, r7
1a0049f4:	9800      	ldr	r0, [sp, #0]
1a0049f6:	f1b8 0f00 	cmp.w	r8, #0
1a0049fa:	d050      	beq.n	1a004a9e <__sfvwrite_r+0xe2>
1a0049fc:	6a21      	ldr	r1, [r4, #32]
1a0049fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004a00:	47b0      	blx	r6
1a004a02:	2800      	cmp	r0, #0
1a004a04:	dd58      	ble.n	1a004ab8 <__sfvwrite_r+0xfc>
1a004a06:	f8da 3008 	ldr.w	r3, [sl, #8]
1a004a0a:	1a1b      	subs	r3, r3, r0
1a004a0c:	4481      	add	r9, r0
1a004a0e:	eba8 0800 	sub.w	r8, r8, r0
1a004a12:	f8ca 3008 	str.w	r3, [sl, #8]
1a004a16:	2b00      	cmp	r3, #0
1a004a18:	d1e7      	bne.n	1a0049ea <__sfvwrite_r+0x2e>
1a004a1a:	2000      	movs	r0, #0
1a004a1c:	b003      	add	sp, #12
1a004a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a22:	4621      	mov	r1, r4
1a004a24:	9800      	ldr	r0, [sp, #0]
1a004a26:	f7ff ff4f 	bl	1a0048c8 <__swsetup_r>
1a004a2a:	2800      	cmp	r0, #0
1a004a2c:	f040 8133 	bne.w	1a004c96 <__sfvwrite_r+0x2da>
1a004a30:	89a3      	ldrh	r3, [r4, #12]
1a004a32:	6835      	ldr	r5, [r6, #0]
1a004a34:	f013 0002 	ands.w	r0, r3, #2
1a004a38:	d1d2      	bne.n	1a0049e0 <__sfvwrite_r+0x24>
1a004a3a:	f013 0901 	ands.w	r9, r3, #1
1a004a3e:	d145      	bne.n	1a004acc <__sfvwrite_r+0x110>
1a004a40:	464f      	mov	r7, r9
1a004a42:	9601      	str	r6, [sp, #4]
1a004a44:	b337      	cbz	r7, 1a004a94 <__sfvwrite_r+0xd8>
1a004a46:	059a      	lsls	r2, r3, #22
1a004a48:	f8d4 8008 	ldr.w	r8, [r4, #8]
1a004a4c:	f140 8083 	bpl.w	1a004b56 <__sfvwrite_r+0x19a>
1a004a50:	4547      	cmp	r7, r8
1a004a52:	46c3      	mov	fp, r8
1a004a54:	f0c0 80ab 	bcc.w	1a004bae <__sfvwrite_r+0x1f2>
1a004a58:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a004a5c:	f040 80ac 	bne.w	1a004bb8 <__sfvwrite_r+0x1fc>
1a004a60:	6820      	ldr	r0, [r4, #0]
1a004a62:	46ba      	mov	sl, r7
1a004a64:	465a      	mov	r2, fp
1a004a66:	4649      	mov	r1, r9
1a004a68:	f000 f9e2 	bl	1a004e30 <memmove>
1a004a6c:	68a2      	ldr	r2, [r4, #8]
1a004a6e:	6823      	ldr	r3, [r4, #0]
1a004a70:	eba2 0208 	sub.w	r2, r2, r8
1a004a74:	445b      	add	r3, fp
1a004a76:	60a2      	str	r2, [r4, #8]
1a004a78:	6023      	str	r3, [r4, #0]
1a004a7a:	9a01      	ldr	r2, [sp, #4]
1a004a7c:	6893      	ldr	r3, [r2, #8]
1a004a7e:	eba3 030a 	sub.w	r3, r3, sl
1a004a82:	44d1      	add	r9, sl
1a004a84:	eba7 070a 	sub.w	r7, r7, sl
1a004a88:	6093      	str	r3, [r2, #8]
1a004a8a:	2b00      	cmp	r3, #0
1a004a8c:	d0c5      	beq.n	1a004a1a <__sfvwrite_r+0x5e>
1a004a8e:	89a3      	ldrh	r3, [r4, #12]
1a004a90:	2f00      	cmp	r7, #0
1a004a92:	d1d8      	bne.n	1a004a46 <__sfvwrite_r+0x8a>
1a004a94:	f8d5 9000 	ldr.w	r9, [r5]
1a004a98:	686f      	ldr	r7, [r5, #4]
1a004a9a:	3508      	adds	r5, #8
1a004a9c:	e7d2      	b.n	1a004a44 <__sfvwrite_r+0x88>
1a004a9e:	f8d5 9000 	ldr.w	r9, [r5]
1a004aa2:	f8d5 8004 	ldr.w	r8, [r5, #4]
1a004aa6:	3508      	adds	r5, #8
1a004aa8:	e79f      	b.n	1a0049ea <__sfvwrite_r+0x2e>
1a004aaa:	2000      	movs	r0, #0
1a004aac:	4770      	bx	lr
1a004aae:	4621      	mov	r1, r4
1a004ab0:	9800      	ldr	r0, [sp, #0]
1a004ab2:	f7fe fef1 	bl	1a003898 <_fflush_r>
1a004ab6:	b370      	cbz	r0, 1a004b16 <__sfvwrite_r+0x15a>
1a004ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ac4:	81a3      	strh	r3, [r4, #12]
1a004ac6:	b003      	add	sp, #12
1a004ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004acc:	4681      	mov	r9, r0
1a004ace:	4633      	mov	r3, r6
1a004ad0:	464e      	mov	r6, r9
1a004ad2:	46a8      	mov	r8, r5
1a004ad4:	469a      	mov	sl, r3
1a004ad6:	464d      	mov	r5, r9
1a004ad8:	b34e      	cbz	r6, 1a004b2e <__sfvwrite_r+0x172>
1a004ada:	b380      	cbz	r0, 1a004b3e <__sfvwrite_r+0x182>
1a004adc:	6820      	ldr	r0, [r4, #0]
1a004ade:	6923      	ldr	r3, [r4, #16]
1a004ae0:	6962      	ldr	r2, [r4, #20]
1a004ae2:	45b1      	cmp	r9, r6
1a004ae4:	46cb      	mov	fp, r9
1a004ae6:	bf28      	it	cs
1a004ae8:	46b3      	movcs	fp, r6
1a004aea:	4298      	cmp	r0, r3
1a004aec:	465f      	mov	r7, fp
1a004aee:	d904      	bls.n	1a004afa <__sfvwrite_r+0x13e>
1a004af0:	68a3      	ldr	r3, [r4, #8]
1a004af2:	4413      	add	r3, r2
1a004af4:	459b      	cmp	fp, r3
1a004af6:	f300 80a6 	bgt.w	1a004c46 <__sfvwrite_r+0x28a>
1a004afa:	4593      	cmp	fp, r2
1a004afc:	db4b      	blt.n	1a004b96 <__sfvwrite_r+0x1da>
1a004afe:	4613      	mov	r3, r2
1a004b00:	6aa7      	ldr	r7, [r4, #40]	; 0x28
1a004b02:	6a21      	ldr	r1, [r4, #32]
1a004b04:	9800      	ldr	r0, [sp, #0]
1a004b06:	462a      	mov	r2, r5
1a004b08:	47b8      	blx	r7
1a004b0a:	1e07      	subs	r7, r0, #0
1a004b0c:	ddd4      	ble.n	1a004ab8 <__sfvwrite_r+0xfc>
1a004b0e:	ebb9 0907 	subs.w	r9, r9, r7
1a004b12:	d0cc      	beq.n	1a004aae <__sfvwrite_r+0xf2>
1a004b14:	2001      	movs	r0, #1
1a004b16:	f8da 3008 	ldr.w	r3, [sl, #8]
1a004b1a:	1bdb      	subs	r3, r3, r7
1a004b1c:	443d      	add	r5, r7
1a004b1e:	1bf6      	subs	r6, r6, r7
1a004b20:	f8ca 3008 	str.w	r3, [sl, #8]
1a004b24:	2b00      	cmp	r3, #0
1a004b26:	f43f af78 	beq.w	1a004a1a <__sfvwrite_r+0x5e>
1a004b2a:	2e00      	cmp	r6, #0
1a004b2c:	d1d5      	bne.n	1a004ada <__sfvwrite_r+0x11e>
1a004b2e:	f108 0308 	add.w	r3, r8, #8
1a004b32:	e913 0060 	ldmdb	r3, {r5, r6}
1a004b36:	4698      	mov	r8, r3
1a004b38:	3308      	adds	r3, #8
1a004b3a:	2e00      	cmp	r6, #0
1a004b3c:	d0f9      	beq.n	1a004b32 <__sfvwrite_r+0x176>
1a004b3e:	4632      	mov	r2, r6
1a004b40:	210a      	movs	r1, #10
1a004b42:	4628      	mov	r0, r5
1a004b44:	f000 f924 	bl	1a004d90 <memchr>
1a004b48:	2800      	cmp	r0, #0
1a004b4a:	f000 80a1 	beq.w	1a004c90 <__sfvwrite_r+0x2d4>
1a004b4e:	3001      	adds	r0, #1
1a004b50:	eba0 0905 	sub.w	r9, r0, r5
1a004b54:	e7c2      	b.n	1a004adc <__sfvwrite_r+0x120>
1a004b56:	6820      	ldr	r0, [r4, #0]
1a004b58:	6923      	ldr	r3, [r4, #16]
1a004b5a:	4298      	cmp	r0, r3
1a004b5c:	d802      	bhi.n	1a004b64 <__sfvwrite_r+0x1a8>
1a004b5e:	6963      	ldr	r3, [r4, #20]
1a004b60:	429f      	cmp	r7, r3
1a004b62:	d25d      	bcs.n	1a004c20 <__sfvwrite_r+0x264>
1a004b64:	45b8      	cmp	r8, r7
1a004b66:	bf28      	it	cs
1a004b68:	46b8      	movcs	r8, r7
1a004b6a:	4642      	mov	r2, r8
1a004b6c:	4649      	mov	r1, r9
1a004b6e:	f000 f95f 	bl	1a004e30 <memmove>
1a004b72:	68a3      	ldr	r3, [r4, #8]
1a004b74:	6822      	ldr	r2, [r4, #0]
1a004b76:	eba3 0308 	sub.w	r3, r3, r8
1a004b7a:	4442      	add	r2, r8
1a004b7c:	60a3      	str	r3, [r4, #8]
1a004b7e:	6022      	str	r2, [r4, #0]
1a004b80:	b10b      	cbz	r3, 1a004b86 <__sfvwrite_r+0x1ca>
1a004b82:	46c2      	mov	sl, r8
1a004b84:	e779      	b.n	1a004a7a <__sfvwrite_r+0xbe>
1a004b86:	4621      	mov	r1, r4
1a004b88:	9800      	ldr	r0, [sp, #0]
1a004b8a:	f7fe fe85 	bl	1a003898 <_fflush_r>
1a004b8e:	2800      	cmp	r0, #0
1a004b90:	d192      	bne.n	1a004ab8 <__sfvwrite_r+0xfc>
1a004b92:	46c2      	mov	sl, r8
1a004b94:	e771      	b.n	1a004a7a <__sfvwrite_r+0xbe>
1a004b96:	465a      	mov	r2, fp
1a004b98:	4629      	mov	r1, r5
1a004b9a:	f000 f949 	bl	1a004e30 <memmove>
1a004b9e:	68a2      	ldr	r2, [r4, #8]
1a004ba0:	6823      	ldr	r3, [r4, #0]
1a004ba2:	eba2 020b 	sub.w	r2, r2, fp
1a004ba6:	445b      	add	r3, fp
1a004ba8:	60a2      	str	r2, [r4, #8]
1a004baa:	6023      	str	r3, [r4, #0]
1a004bac:	e7af      	b.n	1a004b0e <__sfvwrite_r+0x152>
1a004bae:	6820      	ldr	r0, [r4, #0]
1a004bb0:	46b8      	mov	r8, r7
1a004bb2:	46ba      	mov	sl, r7
1a004bb4:	46bb      	mov	fp, r7
1a004bb6:	e755      	b.n	1a004a64 <__sfvwrite_r+0xa8>
1a004bb8:	6962      	ldr	r2, [r4, #20]
1a004bba:	6820      	ldr	r0, [r4, #0]
1a004bbc:	6921      	ldr	r1, [r4, #16]
1a004bbe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
1a004bc2:	eba0 0a01 	sub.w	sl, r0, r1
1a004bc6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
1a004bca:	f10a 0001 	add.w	r0, sl, #1
1a004bce:	ea4f 0868 	mov.w	r8, r8, asr #1
1a004bd2:	4438      	add	r0, r7
1a004bd4:	4540      	cmp	r0, r8
1a004bd6:	4642      	mov	r2, r8
1a004bd8:	bf84      	itt	hi
1a004bda:	4680      	movhi	r8, r0
1a004bdc:	4642      	movhi	r2, r8
1a004bde:	055b      	lsls	r3, r3, #21
1a004be0:	d544      	bpl.n	1a004c6c <__sfvwrite_r+0x2b0>
1a004be2:	4611      	mov	r1, r2
1a004be4:	9800      	ldr	r0, [sp, #0]
1a004be6:	f7ff f95b 	bl	1a003ea0 <_malloc_r>
1a004bea:	4683      	mov	fp, r0
1a004bec:	2800      	cmp	r0, #0
1a004bee:	d055      	beq.n	1a004c9c <__sfvwrite_r+0x2e0>
1a004bf0:	4652      	mov	r2, sl
1a004bf2:	6921      	ldr	r1, [r4, #16]
1a004bf4:	f7ff f824 	bl	1a003c40 <memcpy>
1a004bf8:	89a3      	ldrh	r3, [r4, #12]
1a004bfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004c02:	81a3      	strh	r3, [r4, #12]
1a004c04:	eb0b 000a 	add.w	r0, fp, sl
1a004c08:	eba8 030a 	sub.w	r3, r8, sl
1a004c0c:	f8c4 b010 	str.w	fp, [r4, #16]
1a004c10:	f8c4 8014 	str.w	r8, [r4, #20]
1a004c14:	6020      	str	r0, [r4, #0]
1a004c16:	60a3      	str	r3, [r4, #8]
1a004c18:	46b8      	mov	r8, r7
1a004c1a:	46ba      	mov	sl, r7
1a004c1c:	46bb      	mov	fp, r7
1a004c1e:	e721      	b.n	1a004a64 <__sfvwrite_r+0xa8>
1a004c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a004c24:	42b9      	cmp	r1, r7
1a004c26:	bf28      	it	cs
1a004c28:	4639      	movcs	r1, r7
1a004c2a:	464a      	mov	r2, r9
1a004c2c:	fb91 f1f3 	sdiv	r1, r1, r3
1a004c30:	9800      	ldr	r0, [sp, #0]
1a004c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004c34:	fb03 f301 	mul.w	r3, r3, r1
1a004c38:	6a21      	ldr	r1, [r4, #32]
1a004c3a:	47b0      	blx	r6
1a004c3c:	f1b0 0a00 	subs.w	sl, r0, #0
1a004c40:	f73f af1b 	bgt.w	1a004a7a <__sfvwrite_r+0xbe>
1a004c44:	e738      	b.n	1a004ab8 <__sfvwrite_r+0xfc>
1a004c46:	461a      	mov	r2, r3
1a004c48:	4629      	mov	r1, r5
1a004c4a:	9301      	str	r3, [sp, #4]
1a004c4c:	f000 f8f0 	bl	1a004e30 <memmove>
1a004c50:	6822      	ldr	r2, [r4, #0]
1a004c52:	9b01      	ldr	r3, [sp, #4]
1a004c54:	9800      	ldr	r0, [sp, #0]
1a004c56:	441a      	add	r2, r3
1a004c58:	6022      	str	r2, [r4, #0]
1a004c5a:	4621      	mov	r1, r4
1a004c5c:	f7fe fe1c 	bl	1a003898 <_fflush_r>
1a004c60:	9b01      	ldr	r3, [sp, #4]
1a004c62:	2800      	cmp	r0, #0
1a004c64:	f47f af28 	bne.w	1a004ab8 <__sfvwrite_r+0xfc>
1a004c68:	461f      	mov	r7, r3
1a004c6a:	e750      	b.n	1a004b0e <__sfvwrite_r+0x152>
1a004c6c:	9800      	ldr	r0, [sp, #0]
1a004c6e:	f000 f943 	bl	1a004ef8 <_realloc_r>
1a004c72:	4683      	mov	fp, r0
1a004c74:	2800      	cmp	r0, #0
1a004c76:	d1c5      	bne.n	1a004c04 <__sfvwrite_r+0x248>
1a004c78:	9d00      	ldr	r5, [sp, #0]
1a004c7a:	6921      	ldr	r1, [r4, #16]
1a004c7c:	4628      	mov	r0, r5
1a004c7e:	f7ff f8c7 	bl	1a003e10 <_free_r>
1a004c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004c86:	220c      	movs	r2, #12
1a004c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a004c8c:	602a      	str	r2, [r5, #0]
1a004c8e:	e715      	b.n	1a004abc <__sfvwrite_r+0x100>
1a004c90:	f106 0901 	add.w	r9, r6, #1
1a004c94:	e722      	b.n	1a004adc <__sfvwrite_r+0x120>
1a004c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004c9a:	e6bf      	b.n	1a004a1c <__sfvwrite_r+0x60>
1a004c9c:	9a00      	ldr	r2, [sp, #0]
1a004c9e:	230c      	movs	r3, #12
1a004ca0:	6013      	str	r3, [r2, #0]
1a004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004ca6:	e709      	b.n	1a004abc <__sfvwrite_r+0x100>
1a004ca8:	7ffffc00 	.word	0x7ffffc00

1a004cac <__swhatbuf_r>:
1a004cac:	b570      	push	{r4, r5, r6, lr}
1a004cae:	460c      	mov	r4, r1
1a004cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004cb4:	2900      	cmp	r1, #0
1a004cb6:	b090      	sub	sp, #64	; 0x40
1a004cb8:	4615      	mov	r5, r2
1a004cba:	461e      	mov	r6, r3
1a004cbc:	db13      	blt.n	1a004ce6 <__swhatbuf_r+0x3a>
1a004cbe:	aa01      	add	r2, sp, #4
1a004cc0:	f7fb fbe3 	bl	1a00048a <_fstat_r>
1a004cc4:	2800      	cmp	r0, #0
1a004cc6:	db0e      	blt.n	1a004ce6 <__swhatbuf_r+0x3a>
1a004cc8:	9a02      	ldr	r2, [sp, #8]
1a004cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004cce:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a004cd2:	fab2 f282 	clz	r2, r2
1a004cd6:	0952      	lsrs	r2, r2, #5
1a004cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004cdc:	2000      	movs	r0, #0
1a004cde:	6032      	str	r2, [r6, #0]
1a004ce0:	602b      	str	r3, [r5, #0]
1a004ce2:	b010      	add	sp, #64	; 0x40
1a004ce4:	bd70      	pop	{r4, r5, r6, pc}
1a004ce6:	89a3      	ldrh	r3, [r4, #12]
1a004ce8:	2200      	movs	r2, #0
1a004cea:	061b      	lsls	r3, r3, #24
1a004cec:	6032      	str	r2, [r6, #0]
1a004cee:	d504      	bpl.n	1a004cfa <__swhatbuf_r+0x4e>
1a004cf0:	2340      	movs	r3, #64	; 0x40
1a004cf2:	2000      	movs	r0, #0
1a004cf4:	602b      	str	r3, [r5, #0]
1a004cf6:	b010      	add	sp, #64	; 0x40
1a004cf8:	bd70      	pop	{r4, r5, r6, pc}
1a004cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004cfe:	2000      	movs	r0, #0
1a004d00:	602b      	str	r3, [r5, #0]
1a004d02:	b010      	add	sp, #64	; 0x40
1a004d04:	bd70      	pop	{r4, r5, r6, pc}
1a004d06:	bf00      	nop

1a004d08 <__smakebuf_r>:
1a004d08:	898a      	ldrh	r2, [r1, #12]
1a004d0a:	0792      	lsls	r2, r2, #30
1a004d0c:	460b      	mov	r3, r1
1a004d0e:	d506      	bpl.n	1a004d1e <__smakebuf_r+0x16>
1a004d10:	f101 0247 	add.w	r2, r1, #71	; 0x47
1a004d14:	2101      	movs	r1, #1
1a004d16:	601a      	str	r2, [r3, #0]
1a004d18:	611a      	str	r2, [r3, #16]
1a004d1a:	6159      	str	r1, [r3, #20]
1a004d1c:	4770      	bx	lr
1a004d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004d20:	b083      	sub	sp, #12
1a004d22:	ab01      	add	r3, sp, #4
1a004d24:	466a      	mov	r2, sp
1a004d26:	460c      	mov	r4, r1
1a004d28:	4605      	mov	r5, r0
1a004d2a:	f7ff ffbf 	bl	1a004cac <__swhatbuf_r>
1a004d2e:	9900      	ldr	r1, [sp, #0]
1a004d30:	4606      	mov	r6, r0
1a004d32:	4628      	mov	r0, r5
1a004d34:	f7ff f8b4 	bl	1a003ea0 <_malloc_r>
1a004d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004d3c:	b1d0      	cbz	r0, 1a004d74 <__smakebuf_r+0x6c>
1a004d3e:	9a01      	ldr	r2, [sp, #4]
1a004d40:	4f12      	ldr	r7, [pc, #72]	; (1a004d8c <__smakebuf_r+0x84>)
1a004d42:	9900      	ldr	r1, [sp, #0]
1a004d44:	62af      	str	r7, [r5, #40]	; 0x28
1a004d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004d4a:	81a3      	strh	r3, [r4, #12]
1a004d4c:	6020      	str	r0, [r4, #0]
1a004d4e:	6120      	str	r0, [r4, #16]
1a004d50:	6161      	str	r1, [r4, #20]
1a004d52:	b91a      	cbnz	r2, 1a004d5c <__smakebuf_r+0x54>
1a004d54:	4333      	orrs	r3, r6
1a004d56:	81a3      	strh	r3, [r4, #12]
1a004d58:	b003      	add	sp, #12
1a004d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004d5c:	4628      	mov	r0, r5
1a004d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004d62:	f7fb fb97 	bl	1a000494 <_isatty_r>
1a004d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004d6a:	2800      	cmp	r0, #0
1a004d6c:	d0f2      	beq.n	1a004d54 <__smakebuf_r+0x4c>
1a004d6e:	f043 0301 	orr.w	r3, r3, #1
1a004d72:	e7ef      	b.n	1a004d54 <__smakebuf_r+0x4c>
1a004d74:	059a      	lsls	r2, r3, #22
1a004d76:	d4ef      	bmi.n	1a004d58 <__smakebuf_r+0x50>
1a004d78:	f104 0247 	add.w	r2, r4, #71	; 0x47
1a004d7c:	f043 0302 	orr.w	r3, r3, #2
1a004d80:	2101      	movs	r1, #1
1a004d82:	81a3      	strh	r3, [r4, #12]
1a004d84:	6022      	str	r2, [r4, #0]
1a004d86:	6122      	str	r2, [r4, #16]
1a004d88:	6161      	str	r1, [r4, #20]
1a004d8a:	e7e5      	b.n	1a004d58 <__smakebuf_r+0x50>
1a004d8c:	1a003925 	.word	0x1a003925

1a004d90 <memchr>:
1a004d90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004d94:	2a10      	cmp	r2, #16
1a004d96:	db2b      	blt.n	1a004df0 <memchr+0x60>
1a004d98:	f010 0f07 	tst.w	r0, #7
1a004d9c:	d008      	beq.n	1a004db0 <memchr+0x20>
1a004d9e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004da2:	3a01      	subs	r2, #1
1a004da4:	428b      	cmp	r3, r1
1a004da6:	d02d      	beq.n	1a004e04 <memchr+0x74>
1a004da8:	f010 0f07 	tst.w	r0, #7
1a004dac:	b342      	cbz	r2, 1a004e00 <memchr+0x70>
1a004dae:	d1f6      	bne.n	1a004d9e <memchr+0xe>
1a004db0:	b4f0      	push	{r4, r5, r6, r7}
1a004db2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004db6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004dba:	f022 0407 	bic.w	r4, r2, #7
1a004dbe:	f07f 0700 	mvns.w	r7, #0
1a004dc2:	2300      	movs	r3, #0
1a004dc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004dc8:	3c08      	subs	r4, #8
1a004dca:	ea85 0501 	eor.w	r5, r5, r1
1a004dce:	ea86 0601 	eor.w	r6, r6, r1
1a004dd2:	fa85 f547 	uadd8	r5, r5, r7
1a004dd6:	faa3 f587 	sel	r5, r3, r7
1a004dda:	fa86 f647 	uadd8	r6, r6, r7
1a004dde:	faa5 f687 	sel	r6, r5, r7
1a004de2:	b98e      	cbnz	r6, 1a004e08 <memchr+0x78>
1a004de4:	d1ee      	bne.n	1a004dc4 <memchr+0x34>
1a004de6:	bcf0      	pop	{r4, r5, r6, r7}
1a004de8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004dec:	f002 0207 	and.w	r2, r2, #7
1a004df0:	b132      	cbz	r2, 1a004e00 <memchr+0x70>
1a004df2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004df6:	3a01      	subs	r2, #1
1a004df8:	ea83 0301 	eor.w	r3, r3, r1
1a004dfc:	b113      	cbz	r3, 1a004e04 <memchr+0x74>
1a004dfe:	d1f8      	bne.n	1a004df2 <memchr+0x62>
1a004e00:	2000      	movs	r0, #0
1a004e02:	4770      	bx	lr
1a004e04:	3801      	subs	r0, #1
1a004e06:	4770      	bx	lr
1a004e08:	2d00      	cmp	r5, #0
1a004e0a:	bf06      	itte	eq
1a004e0c:	4635      	moveq	r5, r6
1a004e0e:	3803      	subeq	r0, #3
1a004e10:	3807      	subne	r0, #7
1a004e12:	f015 0f01 	tst.w	r5, #1
1a004e16:	d107      	bne.n	1a004e28 <memchr+0x98>
1a004e18:	3001      	adds	r0, #1
1a004e1a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004e1e:	bf02      	ittt	eq
1a004e20:	3001      	addeq	r0, #1
1a004e22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004e26:	3001      	addeq	r0, #1
1a004e28:	bcf0      	pop	{r4, r5, r6, r7}
1a004e2a:	3801      	subs	r0, #1
1a004e2c:	4770      	bx	lr
1a004e2e:	bf00      	nop

1a004e30 <memmove>:
1a004e30:	4288      	cmp	r0, r1
1a004e32:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004e34:	d90d      	bls.n	1a004e52 <memmove+0x22>
1a004e36:	188b      	adds	r3, r1, r2
1a004e38:	4298      	cmp	r0, r3
1a004e3a:	d20a      	bcs.n	1a004e52 <memmove+0x22>
1a004e3c:	1884      	adds	r4, r0, r2
1a004e3e:	2a00      	cmp	r2, #0
1a004e40:	d051      	beq.n	1a004ee6 <memmove+0xb6>
1a004e42:	4622      	mov	r2, r4
1a004e44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a004e48:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a004e4c:	4299      	cmp	r1, r3
1a004e4e:	d1f9      	bne.n	1a004e44 <memmove+0x14>
1a004e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004e52:	2a0f      	cmp	r2, #15
1a004e54:	d948      	bls.n	1a004ee8 <memmove+0xb8>
1a004e56:	ea41 0300 	orr.w	r3, r1, r0
1a004e5a:	079b      	lsls	r3, r3, #30
1a004e5c:	d146      	bne.n	1a004eec <memmove+0xbc>
1a004e5e:	f100 0410 	add.w	r4, r0, #16
1a004e62:	f101 0310 	add.w	r3, r1, #16
1a004e66:	4615      	mov	r5, r2
1a004e68:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a004e6c:	f844 6c10 	str.w	r6, [r4, #-16]
1a004e70:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a004e74:	f844 6c0c 	str.w	r6, [r4, #-12]
1a004e78:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a004e7c:	f844 6c08 	str.w	r6, [r4, #-8]
1a004e80:	3d10      	subs	r5, #16
1a004e82:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a004e86:	f844 6c04 	str.w	r6, [r4, #-4]
1a004e8a:	2d0f      	cmp	r5, #15
1a004e8c:	f103 0310 	add.w	r3, r3, #16
1a004e90:	f104 0410 	add.w	r4, r4, #16
1a004e94:	d8e8      	bhi.n	1a004e68 <memmove+0x38>
1a004e96:	f1a2 0310 	sub.w	r3, r2, #16
1a004e9a:	f023 030f 	bic.w	r3, r3, #15
1a004e9e:	f002 0e0f 	and.w	lr, r2, #15
1a004ea2:	3310      	adds	r3, #16
1a004ea4:	f1be 0f03 	cmp.w	lr, #3
1a004ea8:	4419      	add	r1, r3
1a004eaa:	4403      	add	r3, r0
1a004eac:	d921      	bls.n	1a004ef2 <memmove+0xc2>
1a004eae:	1f1e      	subs	r6, r3, #4
1a004eb0:	460d      	mov	r5, r1
1a004eb2:	4674      	mov	r4, lr
1a004eb4:	3c04      	subs	r4, #4
1a004eb6:	f855 7b04 	ldr.w	r7, [r5], #4
1a004eba:	f846 7f04 	str.w	r7, [r6, #4]!
1a004ebe:	2c03      	cmp	r4, #3
1a004ec0:	d8f8      	bhi.n	1a004eb4 <memmove+0x84>
1a004ec2:	f1ae 0404 	sub.w	r4, lr, #4
1a004ec6:	f024 0403 	bic.w	r4, r4, #3
1a004eca:	3404      	adds	r4, #4
1a004ecc:	4421      	add	r1, r4
1a004ece:	4423      	add	r3, r4
1a004ed0:	f002 0203 	and.w	r2, r2, #3
1a004ed4:	b162      	cbz	r2, 1a004ef0 <memmove+0xc0>
1a004ed6:	3b01      	subs	r3, #1
1a004ed8:	440a      	add	r2, r1
1a004eda:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004ede:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004ee2:	428a      	cmp	r2, r1
1a004ee4:	d1f9      	bne.n	1a004eda <memmove+0xaa>
1a004ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004ee8:	4603      	mov	r3, r0
1a004eea:	e7f3      	b.n	1a004ed4 <memmove+0xa4>
1a004eec:	4603      	mov	r3, r0
1a004eee:	e7f2      	b.n	1a004ed6 <memmove+0xa6>
1a004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004ef2:	4672      	mov	r2, lr
1a004ef4:	e7ee      	b.n	1a004ed4 <memmove+0xa4>
1a004ef6:	bf00      	nop

1a004ef8 <_realloc_r>:
1a004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004efa:	4614      	mov	r4, r2
1a004efc:	b1f9      	cbz	r1, 1a004f3e <_realloc_r+0x46>
1a004efe:	b1c2      	cbz	r2, 1a004f32 <_realloc_r+0x3a>
1a004f00:	4606      	mov	r6, r0
1a004f02:	460d      	mov	r5, r1
1a004f04:	f000 f820 	bl	1a004f48 <_malloc_usable_size_r>
1a004f08:	4284      	cmp	r4, r0
1a004f0a:	d801      	bhi.n	1a004f10 <_realloc_r+0x18>
1a004f0c:	4628      	mov	r0, r5
1a004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004f10:	4621      	mov	r1, r4
1a004f12:	4630      	mov	r0, r6
1a004f14:	f7fe ffc4 	bl	1a003ea0 <_malloc_r>
1a004f18:	4607      	mov	r7, r0
1a004f1a:	b170      	cbz	r0, 1a004f3a <_realloc_r+0x42>
1a004f1c:	4622      	mov	r2, r4
1a004f1e:	4629      	mov	r1, r5
1a004f20:	f7fe fe8e 	bl	1a003c40 <memcpy>
1a004f24:	4629      	mov	r1, r5
1a004f26:	4630      	mov	r0, r6
1a004f28:	463d      	mov	r5, r7
1a004f2a:	f7fe ff71 	bl	1a003e10 <_free_r>
1a004f2e:	4628      	mov	r0, r5
1a004f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004f32:	f7fe ff6d 	bl	1a003e10 <_free_r>
1a004f36:	4625      	mov	r5, r4
1a004f38:	e7e8      	b.n	1a004f0c <_realloc_r+0x14>
1a004f3a:	4605      	mov	r5, r0
1a004f3c:	e7e6      	b.n	1a004f0c <_realloc_r+0x14>
1a004f3e:	4611      	mov	r1, r2
1a004f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a004f44:	f7fe bfac 	b.w	1a003ea0 <_malloc_r>

1a004f48 <_malloc_usable_size_r>:
1a004f48:	f851 0c04 	ldr.w	r0, [r1, #-4]
1a004f4c:	2800      	cmp	r0, #0
1a004f4e:	f1a0 0004 	sub.w	r0, r0, #4
1a004f52:	bfbc      	itt	lt
1a004f54:	580b      	ldrlt	r3, [r1, r0]
1a004f56:	18c0      	addlt	r0, r0, r3
1a004f58:	4770      	bx	lr
1a004f5a:	bf00      	nop
1a004f5c:	61746146 	.word	0x61746146
1a004f60:	7245206c 	.word	0x7245206c
1a004f64:	2e726f72 	.word	0x2e726f72
1a004f68:	6d655320 	.word	0x6d655320
1a004f6c:	6f687061 	.word	0x6f687061
1a004f70:	63206572 	.word	0x63206572
1a004f74:	6e64756f 	.word	0x6e64756f
1a004f78:	62207427 	.word	0x62207427
1a004f7c:	72632065 	.word	0x72632065
1a004f80:	65746165 	.word	0x65746165
1a004f84:	000a0d64 	.word	0x000a0d64
1a004f88:	73615476 	.word	0x73615476
1a004f8c:	7220316b 	.word	0x7220316b
1a004f90:	696e6e75 	.word	0x696e6e75
1a004f94:	ff00676e 	.word	0xff00676e
1a004f98:	6c707041 	.word	0x6c707041
1a004f9c:	74616369 	.word	0x74616369
1a004fa0:	206e6f69 	.word	0x206e6f69
1a004fa4:	6c6c614d 	.word	0x6c6c614d
1a004fa8:	4620636f 	.word	0x4620636f
1a004fac:	656c6961 	.word	0x656c6961
1a004fb0:	6f482064 	.word	0x6f482064
1a004fb4:	0d216b6f 	.word	0x0d216b6f
1a004fb8:	00000000 	.word	0x00000000
1a004fbc:	7362696c 	.word	0x7362696c
1a004fc0:	6572662f 	.word	0x6572662f
1a004fc4:	6f747265 	.word	0x6f747265
1a004fc8:	6f732f73 	.word	0x6f732f73
1a004fcc:	65637275 	.word	0x65637275
1a004fd0:	6f6f682f 	.word	0x6f6f682f
1a004fd4:	632e736b 	.word	0x632e736b
1a004fd8:	ffffff00 	.word	0xffffff00
1a004fdc:	70410a0d 	.word	0x70410a0d
1a004fe0:	63696c70 	.word	0x63696c70
1a004fe4:	6f697461 	.word	0x6f697461
1a004fe8:	7453206e 	.word	0x7453206e
1a004fec:	206b6361 	.word	0x206b6361
1a004ff0:	7265764f 	.word	0x7265764f
1a004ff4:	776f6c66 	.word	0x776f6c66
1a004ff8:	6f202121 	.word	0x6f202121
1a004ffc:	6154206e 	.word	0x6154206e
1a005000:	203a6b73 	.word	0x203a6b73
1a005004:	0a0d7325 	.word	0x0a0d7325
1a005008:	ffffff00 	.word	0xffffff00
1a00500c:	41760a0d 	.word	0x41760a0d
1a005010:	72657373 	.word	0x72657373
1a005014:	6c614374 	.word	0x6c614374
1a005018:	2864656c 	.word	0x2864656c
1a00501c:	200a0d29 	.word	0x200a0d29
1a005020:	4c4c2020 	.word	0x4c4c2020
1a005024:	20656e69 	.word	0x20656e69
1a005028:	626d754e 	.word	0x626d754e
1a00502c:	3d207265 	.word	0x3d207265
1a005030:	0d642520 	.word	0x0d642520
1a005034:	2020200a 	.word	0x2020200a
1a005038:	656c6946 	.word	0x656c6946
1a00503c:	6d614e20 	.word	0x6d614e20
1a005040:	203d2065 	.word	0x203d2065
1a005044:	0a0d7325 	.word	0x0a0d7325
1a005048:	ff000a0d 	.word	0xff000a0d
1a00504c:	454c4449 	.word	0x454c4449
1a005050:	ffffff00 	.word	0xffffff00
1a005054:	51726d54 	.word	0x51726d54
1a005058:	ffffff00 	.word	0xffffff00
1a00505c:	20726d54 	.word	0x20726d54
1a005060:	00637653 	.word	0x00637653

1a005064 <keys>:
1a005064:	27262524 ff007325                       $%&'%s..

1a00506c <ExtRateIn>:
1a00506c:	00000000                                ....

1a005070 <GpioButtons>:
1a005070:	08000400 09010900                       ........

1a005078 <GpioLeds>:
1a005078:	01050005 0e000205 0c010b01              ............

1a005084 <GpioPorts>:
1a005084:	03030003 0f050403 05031005 07030603     ................
1a005094:	ffff0802                                ....

1a005098 <OscRateIn>:
1a005098:	00b71b00                                ....

1a00509c <InitClkStates>:
1a00509c:	01010f01                                ....

1a0050a0 <pinmuxing>:
1a0050a0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0050b0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0050c0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0050d0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0050e0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0050f0:	00d50301 00d50401 00160107 00560207     ..............V.
1a005100:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005110:	00570206                                ..W.

1a005114 <UART_BClock>:
1a005114:	01a201c2 01620182                       ......b.

1a00511c <UART_PClock>:
1a00511c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00512c:	ffff00ff                                ....

1a005130 <periph_to_base>:
1a005130:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005140:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005150:	000100e0 01000100 01200003 00060120     .......... . ...
1a005160:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005170:	01820013 00120182 01a201a2 01c20011     ................
1a005180:	001001c2 01e201e2 0202000f 000e0202     ................
1a005190:	02220222 0223000d 001c0223              "."...#.#...

1a00519c <InitClkStates>:
1a00519c:	00010100 00010909 0001090a 01010701     ................
1a0051ac:	00010902 00010906 0101090c 0001090d     ................
1a0051bc:	0001090e 0001090f 00010910 00010911     ................
1a0051cc:	00010912 00010913 00011114 00011119     ................
1a0051dc:	0001111a 0001111b                       ........

1a0051e4 <gpioPinsInit>:
1a0051e4:	02000104 00050701 05010d03 04080100     ................
1a0051f4:	02020002 02000304 00000403 04070002     ................
1a005204:	030c0300 09050402 05040103 04030208     ................
1a005214:	04020305 06040504 0802000c 03000b06     ................
1a005224:	00090607 07060503 060f0504 03030004     ................
1a005234:	02000404 00050404 06040502 04060200     ................
1a005244:	0c050408 05040a04 0003010e 14010a00     ................
1a005254:	010f0000 0d000012 00001101 0010010c     ................
1a005264:	07070300 000f0300 01000001 00000000     ................
1a005274:	000a0600 08060603 06100504 04030005     ................
1a005284:	03000106 04090400 04010d05 010b0000     ................
1a005294:	0200000f 00000001 00010104 02010800     ................
1a0052a4:	01090000 09010006 05040002 04010200     ................
1a0052b4:	02020105 02020504 0e00000a 01000b02     ................
1a0052c4:	000c020b ffff0c01                       ........

1a0052cc <__sf_fake_stderr>:
	...

1a0052ec <__sf_fake_stdout>:
	...

1a00530c <__sf_fake_stdin>:
	...

1a00532c <_global_impure_ptr>:
1a00532c:	10000044 ffff0043 2b302d23 00000020     D...C...#-0+ ...
1a00533c:	004c6c68 45676665 ff004746 33323130     hlL.efgEFG..0123
1a00534c:	37363534 42413938 46454443 00000000     456789ABCDEF....
1a00535c:	33323130 37363534 62613938 66656463     0123456789abcdef
1a00536c:	00000000                                ....
